//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/kiera/Documents/Rider/END/END.QueryParser/Antlr4/Query/mariadb/MariaDBParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Antlr4.Query.mariadb {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MariaDBParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, ARRAY=11, AS=12, ASC=13, 
		ATTRIBUTE=14, BEFORE=15, BETWEEN=16, BODY=17, BOTH=18, BUCKETS=19, BY=20, 
		CALL=21, CASCADE=22, CASE=23, CAST=24, CHANGE=25, CHARACTER=26, CHECK=27, 
		COLLATE=28, COLUMN=29, CONDITION=30, CONSTRAINT=31, CONTINUE=32, CONVERT=33, 
		CREATE=34, CROSS=35, CURRENT=36, CURRENT_ROLE=37, CURRENT_USER=38, CURSOR=39, 
		DATABASE=40, DATABASES=41, DECLARE=42, DEFAULT=43, DELAYED=44, DELETE=45, 
		DESC=46, DESCRIBE=47, DETERMINISTIC=48, DIAGNOSTICS=49, DISTINCT=50, DISTINCTROW=51, 
		DROP=52, EACH=53, ELSE=54, ELSEIF=55, EMPTY=56, ENCLOSED=57, ESCAPED=58, 
		EXCEPT=59, EXISTS=60, EXIT=61, EXPLAIN=62, FALSE=63, FETCH=64, FOR=65, 
		FORCE=66, FOREIGN=67, FROM=68, FULLTEXT=69, GENERATED=70, GET=71, GRANT=72, 
		GROUP=73, HAVING=74, HIGH_PRIORITY=75, HISTOGRAM=76, IF=77, IGNORE=78, 
		IGNORED=79, IN=80, INDEX=81, INFILE=82, INNER=83, INOUT=84, INSERT=85, 
		INTERVAL=86, INTO=87, IS=88, ITERATE=89, JOIN=90, KEY=91, KEYS=92, KILL=93, 
		LATERAL=94, LEADING=95, LEAVE=96, LEFT=97, LIKE=98, LIMIT=99, LINEAR=100, 
		LINES=101, LOAD=102, LOCK=103, LOCKED=104, LOOP=105, LOW_PRIORITY=106, 
		MASTER_BIND=107, MASTER_SSL_VERIFY_SERVER_CERT=108, MATCH=109, MAXVALUE=110, 
		MINVALUE=111, MODIFIES=112, NATURAL=113, NOT=114, NO_WRITE_TO_BINLOG=115, 
		NULL_LITERAL=116, NUMBER=117, ON=118, OPTIMIZE=119, OPTION=120, OPTIONAL=121, 
		OPTIONALLY=122, OR=123, ORDER=124, OUT=125, OUTER=126, OUTFILE=127, OVER=128, 
		PARTITION=129, PRIMARY=130, PACKAGE=131, PROCEDURE=132, PURGE=133, RANGE=134, 
		READ=135, READS=136, REFERENCES=137, REGEXP=138, RELEASE=139, RENAME=140, 
		REPEAT=141, REPLACE=142, REQUIRE=143, RESIGNAL=144, RESTRICT=145, RETAIN=146, 
		RETURN=147, REVOKE=148, RIGHT=149, RLIKE=150, SCHEMA=151, SCHEMAS=152, 
		SELECT=153, SET=154, SEPARATOR=155, SHOW=156, SIGNAL=157, SKIP_=158, SPATIAL=159, 
		SQL=160, SQLEXCEPTION=161, SQLSTATE=162, SQLWARNING=163, SQL_BIG_RESULT=164, 
		SQL_CALC_FOUND_ROWS=165, SQL_SMALL_RESULT=166, SSL=167, STACKED=168, STARTING=169, 
		STATEMENT=170, STRAIGHT_JOIN=171, SYSTEM=172, SYSTEM_TIME=173, TABLE=174, 
		TERMINATED=175, THEN=176, TO=177, TRAILING=178, TRIGGER=179, TRUE=180, 
		UNDO=181, UNION=182, UNIQUE=183, UNLOCK=184, UNSIGNED=185, UPDATE=186, 
		USAGE=187, USE=188, USING=189, VALUES=190, VERSIONING=191, WHEN=192, WHERE=193, 
		WHILE=194, WITH=195, WRITE=196, XOR=197, ZEROFILL=198, TINYINT=199, SMALLINT=200, 
		MEDIUMINT=201, MIDDLEINT=202, INT=203, INT1=204, INT2=205, INT3=206, INT4=207, 
		INT8=208, INTEGER=209, BIGINT=210, REAL=211, DOUBLE=212, PRECISION=213, 
		FLOAT=214, FLOAT4=215, FLOAT8=216, DECIMAL=217, DEC=218, NUMERIC=219, 
		DATE=220, TIME=221, TIMESTAMP=222, DATETIME=223, YEAR=224, CHAR=225, VARCHAR=226, 
		NVARCHAR=227, NATIONAL=228, BINARY=229, VARBINARY=230, TINYBLOB=231, BLOB=232, 
		MEDIUMBLOB=233, LONG=234, LONGBLOB=235, TINYTEXT=236, TEXT=237, MEDIUMTEXT=238, 
		LONGTEXT=239, ENUM=240, VARYING=241, SERIAL=242, YEAR_MONTH=243, DAY_HOUR=244, 
		DAY_MINUTE=245, DAY_SECOND=246, HOUR_MINUTE=247, HOUR_SECOND=248, MINUTE_SECOND=249, 
		SECOND_MICROSECOND=250, MINUTE_MICROSECOND=251, HOUR_MICROSECOND=252, 
		DAY_MICROSECOND=253, JSON_ARRAY=254, JSON_ARRAYAGG=255, JSON_ARRAY_APPEND=256, 
		JSON_ARRAY_INSERT=257, JSON_CONTAINS=258, JSON_CONTAINS_PATH=259, JSON_DEPTH=260, 
		JSON_EXTRACT=261, JSON_INSERT=262, JSON_KEYS=263, JSON_LENGTH=264, JSON_MERGE=265, 
		JSON_MERGE_PATCH=266, JSON_MERGE_PRESERVE=267, JSON_OBJECT=268, JSON_OBJECTAGG=269, 
		JSON_OVERLAPS=270, JSON_PRETTY=271, JSON_QUOTE=272, JSON_REMOVE=273, JSON_REPLACE=274, 
		JSON_SCHEMA_VALID=275, JSON_SCHEMA_VALIDATION_REPORT=276, JSON_SEARCH=277, 
		JSON_SET=278, JSON_STORAGE_FREE=279, JSON_STORAGE_SIZE=280, JSON_TABLE=281, 
		JSON_TYPE=282, JSON_UNQUOTE=283, JSON_VALID=284, JSON_VALUE=285, NESTED=286, 
		ORDINALITY=287, PATH=288, AVG=289, BIT_AND=290, BIT_OR=291, BIT_XOR=292, 
		COUNT=293, CUME_DIST=294, DENSE_RANK=295, FIRST_VALUE=296, GROUP_CONCAT=297, 
		LAG=298, LAST_VALUE=299, LEAD=300, MAX=301, MIN=302, NTILE=303, NTH_VALUE=304, 
		PERCENT_RANK=305, RANK=306, ROW_NUMBER=307, STD=308, STDDEV=309, STDDEV_POP=310, 
		STDDEV_SAMP=311, SUM=312, VAR_POP=313, VAR_SAMP=314, VARIANCE=315, CURRENT_DATE=316, 
		CURRENT_TIME=317, CURRENT_TIMESTAMP=318, LOCALTIME=319, CURDATE=320, CURTIME=321, 
		DATE_ADD=322, DATE_SUB=323, EXTRACT=324, LOCALTIMESTAMP=325, NOW=326, 
		POSITION=327, SUBSTR=328, SUBSTRING=329, SYSDATE=330, TRIM=331, UTC_DATE=332, 
		UTC_TIME=333, UTC_TIMESTAMP=334, ACCOUNT=335, ACTION=336, AFTER=337, AGGREGATE=338, 
		ALGORITHM=339, ANY=340, AT=341, AUTHORS=342, AUTOCOMMIT=343, AUTOEXTEND_SIZE=344, 
		AUTO=345, AUTO_INCREMENT=346, AVG_ROW_LENGTH=347, BEGIN=348, BINLOG=349, 
		BIT=350, BLOCK=351, BOOL=352, BOOLEAN=353, BTREE=354, CACHE=355, CASCADED=356, 
		CHAIN=357, CHANGED=358, CHANNEL=359, CHECKSUM=360, PAGE_CHECKSUM=361, 
		CIPHER=362, CLASS_ORIGIN=363, CLIENT=364, CLOSE=365, CLUSTERING=366, COALESCE=367, 
		CODE=368, COLUMNS=369, COLUMN_FORMAT=370, COLUMN_NAME=371, COMMENT=372, 
		COMMIT=373, COMPACT=374, COMPLETION=375, COMPRESSED=376, COMPRESSION=377, 
		CONCURRENT=378, CONNECT=379, CONNECTION=380, CONSISTENT=381, CONSTRAINT_CATALOG=382, 
		CONSTRAINT_SCHEMA=383, CONSTRAINT_NAME=384, CONTAINS=385, CONTEXT=386, 
		CONTRIBUTORS=387, COPY=388, CPU=389, CYCLE=390, CURSOR_NAME=391, DATA=392, 
		DATAFILE=393, DEALLOCATE=394, DEFAULT_AUTH=395, DEFINER=396, DELAY_KEY_WRITE=397, 
		DES_KEY_FILE=398, DIRECTORY=399, DISABLE=400, DISCARD=401, DISK=402, DO=403, 
		DUMPFILE=404, DUPLICATE=405, DYNAMIC=406, ENABLE=407, ENCRYPTED=408, ENCRYPTION=409, 
		ENCRYPTION_KEY_ID=410, END=411, ENDS=412, ENGINE=413, ENGINES=414, ERROR=415, 
		ERRORS=416, ESCAPE=417, EVEN=418, EVENT=419, EVENTS=420, EVERY=421, EXCHANGE=422, 
		EXCLUSIVE=423, EXPIRE=424, EXPORT=425, EXTENDED=426, EXTENT_SIZE=427, 
		FAILED_LOGIN_ATTEMPTS=428, FAST=429, FAULTS=430, FIELDS=431, FILE_BLOCK_SIZE=432, 
		FILTER=433, FIRST=434, FIXED=435, FLUSH=436, FOLLOWING=437, FOLLOWS=438, 
		FOUND=439, FULL=440, FUNCTION=441, GENERAL=442, GLOBAL=443, GRANTS=444, 
		GROUP_REPLICATION=445, HANDLER=446, HASH=447, HELP=448, HISTORY=449, HOST=450, 
		HOSTS=451, IDENTIFIED=452, IGNORE_SERVER_IDS=453, IMPORT=454, INCREMENT=455, 
		INDEXES=456, INITIAL_SIZE=457, INPLACE=458, INSERT_METHOD=459, INSTALL=460, 
		INSTANCE=461, INSTANT=462, INVISIBLE=463, INVOKER=464, IO=465, IO_THREAD=466, 
		IPC=467, ISOLATION=468, ISSUER=469, JSON=470, KEY_BLOCK_SIZE=471, LANGUAGE=472, 
		LAST=473, LEAVES=474, LESS=475, LEVEL=476, LIST=477, LOCAL=478, LOCALES=479, 
		LOGFILE=480, LOGS=481, MASTER=482, MASTER_AUTO_POSITION=483, MASTER_CONNECT_RETRY=484, 
		MASTER_DELAY=485, MASTER_HEARTBEAT_PERIOD=486, MASTER_HOST=487, MASTER_LOG_FILE=488, 
		MASTER_LOG_POS=489, MASTER_PASSWORD=490, MASTER_PORT=491, MASTER_RETRY_COUNT=492, 
		MASTER_SSL=493, MASTER_SSL_CA=494, MASTER_SSL_CAPATH=495, MASTER_SSL_CERT=496, 
		MASTER_SSL_CIPHER=497, MASTER_SSL_CRL=498, MASTER_SSL_CRLPATH=499, MASTER_SSL_KEY=500, 
		MASTER_TLS_VERSION=501, MASTER_USER=502, MAX_CONNECTIONS_PER_HOUR=503, 
		MAX_QUERIES_PER_HOUR=504, MAX_ROWS=505, MAX_SIZE=506, MAX_UPDATES_PER_HOUR=507, 
		MAX_USER_CONNECTIONS=508, MEDIUM=509, MEMBER=510, MERGE=511, MESSAGE_TEXT=512, 
		MID=513, MIGRATE=514, MIN_ROWS=515, MODE=516, MODIFY=517, MUTEX=518, MYSQL=519, 
		MYSQL_ERRNO=520, NAME=521, NAMES=522, NCHAR=523, NEVER=524, NEXT=525, 
		NO=526, NOCACHE=527, NOCOPY=528, NOCYCLE=529, NOMAXVALUE=530, NOMINVALUE=531, 
		NOWAIT=532, NODEGROUP=533, NONE=534, ODBC=535, OFFLINE=536, OFFSET=537, 
		OF=538, OJ=539, OLD_PASSWORD=540, ONE=541, ONLINE=542, ONLY=543, OPEN=544, 
		OPTIMIZER_COSTS=545, OPTIONS=546, OWNER=547, PACK_KEYS=548, PAGE=549, 
		PAGE_COMPRESSED=550, PAGE_COMPRESSION_LEVEL=551, PARSER=552, PARTIAL=553, 
		PARTITIONING=554, PARTITIONS=555, PASSWORD=556, PASSWORD_LOCK_TIME=557, 
		PHASE=558, PLUGIN=559, PLUGIN_DIR=560, PLUGINS=561, PORT=562, PRECEDES=563, 
		PRECEDING=564, PREPARE=565, PRESERVE=566, PREV=567, PROCESSLIST=568, PROFILE=569, 
		PROFILES=570, PROXY=571, QUERY=572, QUERY_RESPONSE_TIME=573, QUICK=574, 
		REBUILD=575, RECOVER=576, RECURSIVE=577, REDO_BUFFER_SIZE=578, REDUNDANT=579, 
		RELAY=580, RELAY_LOG_FILE=581, RELAY_LOG_POS=582, RELAYLOG=583, REMOVE=584, 
		REORGANIZE=585, REPAIR=586, REPLICATE_DO_DB=587, REPLICATE_DO_TABLE=588, 
		REPLICATE_IGNORE_DB=589, REPLICATE_IGNORE_TABLE=590, REPLICATE_REWRITE_DB=591, 
		REPLICATE_WILD_DO_TABLE=592, REPLICATE_WILD_IGNORE_TABLE=593, REPLICATION=594, 
		RESET=595, RESTART=596, RESUME=597, RETURNED_SQLSTATE=598, RETURNING=599, 
		RETURNS=600, REUSE=601, ROLE=602, ROLLBACK=603, ROLLUP=604, ROTATE=605, 
		ROW=606, ROWS=607, ROW_FORMAT=608, RTREE=609, SAVEPOINT=610, SCHEDULE=611, 
		SECURITY=612, SEQUENCE=613, SERVER=614, SESSION=615, SHARE=616, SHARED=617, 
		SIGNED=618, SIMPLE=619, SLAVE=620, SLAVES=621, SLOW=622, SNAPSHOT=623, 
		SOCKET=624, SOME=625, SONAME=626, SOUNDS=627, SOURCE=628, SQL_AFTER_GTIDS=629, 
		SQL_AFTER_MTS_GAPS=630, SQL_BEFORE_GTIDS=631, SQL_BUFFER_RESULT=632, SQL_CACHE=633, 
		SQL_NO_CACHE=634, SQL_THREAD=635, START=636, STARTS=637, STATS_AUTO_RECALC=638, 
		STATS_PERSISTENT=639, STATS_SAMPLE_PAGES=640, STATUS=641, STOP=642, STORAGE=643, 
		STORED=644, STRING=645, SUBCLASS_ORIGIN=646, SUBJECT=647, SUBPARTITION=648, 
		SUBPARTITIONS=649, SUSPEND=650, SWAPS=651, SWITCHES=652, TABLE_NAME=653, 
		TABLESPACE=654, TABLE_TYPE=655, TEMPORARY=656, TEMPTABLE=657, THAN=658, 
		TRADITIONAL=659, TRANSACTION=660, TRANSACTIONAL=661, TRIGGERS=662, TRUNCATE=663, 
		TYPES=664, UNBOUNDED=665, UNDEFINED=666, UNDOFILE=667, UNDO_BUFFER_SIZE=668, 
		UNINSTALL=669, UNKNOWN=670, UNTIL=671, UPGRADE=672, USER=673, USE_FRM=674, 
		USER_RESOURCES=675, VALIDATION=676, VALUE=677, VARIABLES=678, VIEW=679, 
		VIRTUAL=680, VISIBLE=681, WAIT=682, WARNINGS=683, WINDOW=684, WITHOUT=685, 
		WORK=686, WRAPPER=687, WSREP_MEMBERSHIP=688, WSREP_STATUS=689, X509=690, 
		XA=691, XML=692, YES=693, EUR=694, USA=695, JIS=696, ISO=697, INTERNAL=698, 
		QUARTER=699, MONTH=700, DAY=701, HOUR=702, MINUTE=703, WEEK=704, SECOND=705, 
		MICROSECOND=706, USER_STATISTICS=707, CLIENT_STATISTICS=708, INDEX_STATISTICS=709, 
		TABLE_STATISTICS=710, ADMIN=711, APPLICATION_PASSWORD_ADMIN=712, AUDIT_ADMIN=713, 
		BACKUP_ADMIN=714, BINLOG_ADMIN=715, BINLOG_ENCRYPTION_ADMIN=716, CLONE_ADMIN=717, 
		CONNECTION_ADMIN=718, ENCRYPTION_KEY_ADMIN=719, EXECUTE=720, FILE=721, 
		FIREWALL_ADMIN=722, FIREWALL_USER=723, FLUSH_OPTIMIZER_COSTS=724, FLUSH_STATUS=725, 
		FLUSH_TABLES=726, FLUSH_USER_RESOURCES=727, GROUP_REPLICATION_ADMIN=728, 
		INNODB_REDO_LOG_ARCHIVE=729, INNODB_REDO_LOG_ENABLE=730, INVOKE=731, LAMBDA=732, 
		NDB_STORED_USER=733, PASSWORDLESS_USER_ADMIN=734, PERSIST_RO_VARIABLES_ADMIN=735, 
		PRIVILEGES=736, PROCESS=737, RELOAD=738, REPLICATION_APPLIER=739, REPLICATION_SLAVE_ADMIN=740, 
		RESOURCE_GROUP_ADMIN=741, RESOURCE_GROUP_USER=742, ROLE_ADMIN=743, ROUTINE=744, 
		S3=745, SERVICE_CONNECTION_ADMIN=746, SESSION_VARIABLES_ADMIN=747, SET_USER_ID=748, 
		SHOW_ROUTINE=749, SHUTDOWN=750, SUPER=751, SYSTEM_VARIABLES_ADMIN=752, 
		TABLES=753, TABLE_ENCRYPTION_ADMIN=754, VERSION_TOKEN_ADMIN=755, XA_RECOVER_ADMIN=756, 
		ARMSCII8=757, ASCII=758, BIG5=759, CP1250=760, CP1251=761, CP1256=762, 
		CP1257=763, CP850=764, CP852=765, CP866=766, CP932=767, DEC8=768, EUCJPMS=769, 
		EUCKR=770, GB18030=771, GB2312=772, GBK=773, GEOSTD8=774, GREEK=775, HEBREW=776, 
		HP8=777, KEYBCS2=778, KOI8R=779, KOI8U=780, LATIN1=781, LATIN2=782, LATIN5=783, 
		LATIN7=784, MACCE=785, MACROMAN=786, SJIS=787, SWE7=788, TIS620=789, UCS2=790, 
		UJIS=791, UTF16=792, UTF16LE=793, UTF32=794, UTF8=795, UTF8MB3=796, UTF8MB4=797, 
		ARCHIVE=798, BLACKHOLE=799, CSV=800, FEDERATED=801, INNODB=802, MEMORY=803, 
		MRG_MYISAM=804, MYISAM=805, NDB=806, NDBCLUSTER=807, PERFORMANCE_SCHEMA=808, 
		TOKUDB=809, REPEATABLE=810, COMMITTED=811, UNCOMMITTED=812, SERIALIZABLE=813, 
		GEOMETRYCOLLECTION=814, GEOMCOLLECTION=815, GEOMETRY=816, LINESTRING=817, 
		MULTILINESTRING=818, MULTIPOINT=819, MULTIPOLYGON=820, POINT=821, POLYGON=822, 
		ABS=823, ACOS=824, ADDDATE=825, ADDTIME=826, AES_DECRYPT=827, AES_ENCRYPT=828, 
		AREA=829, ASBINARY=830, ASIN=831, ASTEXT=832, ASWKB=833, ASWKT=834, ASYMMETRIC_DECRYPT=835, 
		ASYMMETRIC_DERIVE=836, ASYMMETRIC_ENCRYPT=837, ASYMMETRIC_SIGN=838, ASYMMETRIC_VERIFY=839, 
		ATAN=840, ATAN2=841, BENCHMARK=842, BIN=843, BIT_COUNT=844, BIT_LENGTH=845, 
		BUFFER=846, CATALOG_NAME=847, CEIL=848, CEILING=849, CENTROID=850, CHARACTER_LENGTH=851, 
		CHARSET=852, CHAR_LENGTH=853, COERCIBILITY=854, COLLATION=855, COMPRESS=856, 
		CONCAT=857, CONCAT_WS=858, CONNECTION_ID=859, CONV=860, CONVERT_TZ=861, 
		COS=862, COT=863, CRC32=864, CREATE_ASYMMETRIC_PRIV_KEY=865, CREATE_ASYMMETRIC_PUB_KEY=866, 
		CREATE_DH_PARAMETERS=867, CREATE_DIGEST=868, CROSSES=869, DATEDIFF=870, 
		DATE_FORMAT=871, DAYNAME=872, DAYOFMONTH=873, DAYOFWEEK=874, DAYOFYEAR=875, 
		DECODE=876, DEGREES=877, DES_DECRYPT=878, DES_ENCRYPT=879, DIMENSION=880, 
		DISJOINT=881, ELT=882, ENCODE=883, ENCRYPT=884, ENDPOINT=885, ENGINE_ATTRIBUTE=886, 
		ENVELOPE=887, EQUALS=888, EXP=889, EXPORT_SET=890, EXTERIORRING=891, EXTRACTVALUE=892, 
		FIELD=893, FIND_IN_SET=894, FLOOR=895, FORMAT=896, FOUND_ROWS=897, FROM_BASE64=898, 
		FROM_DAYS=899, FROM_UNIXTIME=900, GEOMCOLLFROMTEXT=901, GEOMCOLLFROMWKB=902, 
		GEOMETRYCOLLECTIONFROMTEXT=903, GEOMETRYCOLLECTIONFROMWKB=904, GEOMETRYFROMTEXT=905, 
		GEOMETRYFROMWKB=906, GEOMETRYN=907, GEOMETRYTYPE=908, GEOMFROMTEXT=909, 
		GEOMFROMWKB=910, GET_FORMAT=911, GET_LOCK=912, GLENGTH=913, GREATEST=914, 
		GTID_SUBSET=915, GTID_SUBTRACT=916, HEX=917, IFNULL=918, INET6_ATON=919, 
		INET6_NTOA=920, INET_ATON=921, INET_NTOA=922, INSTR=923, INTERIORRINGN=924, 
		INTERSECTS=925, ISCLOSED=926, ISEMPTY=927, ISNULL=928, ISSIMPLE=929, IS_FREE_LOCK=930, 
		IS_IPV4=931, IS_IPV4_COMPAT=932, IS_IPV4_MAPPED=933, IS_IPV6=934, IS_USED_LOCK=935, 
		LAST_INSERT_ID=936, LCASE=937, LEAST=938, LENGTH=939, LINEFROMTEXT=940, 
		LINEFROMWKB=941, LINESTRINGFROMTEXT=942, LINESTRINGFROMWKB=943, LN=944, 
		LOAD_FILE=945, LOCATE=946, LOG=947, LOG10=948, LOG2=949, LOWER=950, LPAD=951, 
		LTRIM=952, MAKEDATE=953, MAKETIME=954, MAKE_SET=955, MASTER_POS_WAIT=956, 
		MBRCONTAINS=957, MBRDISJOINT=958, MBREQUAL=959, MBRINTERSECTS=960, MBROVERLAPS=961, 
		MBRTOUCHES=962, MBRWITHIN=963, MD5=964, MLINEFROMTEXT=965, MLINEFROMWKB=966, 
		MONTHNAME=967, MPOINTFROMTEXT=968, MPOINTFROMWKB=969, MPOLYFROMTEXT=970, 
		MPOLYFROMWKB=971, MULTILINESTRINGFROMTEXT=972, MULTILINESTRINGFROMWKB=973, 
		MULTIPOINTFROMTEXT=974, MULTIPOINTFROMWKB=975, MULTIPOLYGONFROMTEXT=976, 
		MULTIPOLYGONFROMWKB=977, NAME_CONST=978, NULLIF=979, NUMGEOMETRIES=980, 
		NUMINTERIORRINGS=981, NUMPOINTS=982, OCT=983, OCTET_LENGTH=984, ORD=985, 
		OVERLAPS=986, PERIOD_ADD=987, PERIOD_DIFF=988, PI=989, POINTFROMTEXT=990, 
		POINTFROMWKB=991, POINTN=992, POLYFROMTEXT=993, POLYFROMWKB=994, POLYGONFROMTEXT=995, 
		POLYGONFROMWKB=996, POW=997, POWER=998, QUOTE=999, RADIANS=1000, RAND=1001, 
		RANDOM_BYTES=1002, RELEASE_LOCK=1003, REVERSE=1004, ROUND=1005, ROW_COUNT=1006, 
		RPAD=1007, RTRIM=1008, SEC_TO_TIME=1009, SECONDARY_ENGINE_ATTRIBUTE=1010, 
		SESSION_USER=1011, SHA=1012, SHA1=1013, SHA2=1014, SCHEMA_NAME=1015, SIGN=1016, 
		SIN=1017, SLEEP=1018, SOUNDEX=1019, SQL_THREAD_WAIT_AFTER_GTIDS=1020, 
		SQRT=1021, SRID=1022, STARTPOINT=1023, STRCMP=1024, STR_TO_DATE=1025, 
		ST_AREA=1026, ST_ASBINARY=1027, ST_ASTEXT=1028, ST_ASWKB=1029, ST_ASWKT=1030, 
		ST_BUFFER=1031, ST_CENTROID=1032, ST_CONTAINS=1033, ST_CROSSES=1034, ST_DIFFERENCE=1035, 
		ST_DIMENSION=1036, ST_DISJOINT=1037, ST_DISTANCE=1038, ST_ENDPOINT=1039, 
		ST_ENVELOPE=1040, ST_EQUALS=1041, ST_EXTERIORRING=1042, ST_GEOMCOLLFROMTEXT=1043, 
		ST_GEOMCOLLFROMTXT=1044, ST_GEOMCOLLFROMWKB=1045, ST_GEOMETRYCOLLECTIONFROMTEXT=1046, 
		ST_GEOMETRYCOLLECTIONFROMWKB=1047, ST_GEOMETRYFROMTEXT=1048, ST_GEOMETRYFROMWKB=1049, 
		ST_GEOMETRYN=1050, ST_GEOMETRYTYPE=1051, ST_GEOMFROMTEXT=1052, ST_GEOMFROMWKB=1053, 
		ST_INTERIORRINGN=1054, ST_INTERSECTION=1055, ST_INTERSECTS=1056, ST_ISCLOSED=1057, 
		ST_ISEMPTY=1058, ST_ISSIMPLE=1059, ST_LINEFROMTEXT=1060, ST_LINEFROMWKB=1061, 
		ST_LINESTRINGFROMTEXT=1062, ST_LINESTRINGFROMWKB=1063, ST_NUMGEOMETRIES=1064, 
		ST_NUMINTERIORRING=1065, ST_NUMINTERIORRINGS=1066, ST_NUMPOINTS=1067, 
		ST_OVERLAPS=1068, ST_POINTFROMTEXT=1069, ST_POINTFROMWKB=1070, ST_POINTN=1071, 
		ST_POLYFROMTEXT=1072, ST_POLYFROMWKB=1073, ST_POLYGONFROMTEXT=1074, ST_POLYGONFROMWKB=1075, 
		ST_SRID=1076, ST_STARTPOINT=1077, ST_SYMDIFFERENCE=1078, ST_TOUCHES=1079, 
		ST_UNION=1080, ST_WITHIN=1081, ST_X=1082, ST_Y=1083, SUBDATE=1084, SUBSTRING_INDEX=1085, 
		SUBTIME=1086, SYSTEM_USER=1087, TAN=1088, TIMEDIFF=1089, TIMESTAMPADD=1090, 
		TIMESTAMPDIFF=1091, TIME_FORMAT=1092, TIME_TO_SEC=1093, TOUCHES=1094, 
		TO_BASE64=1095, TO_DAYS=1096, TO_SECONDS=1097, UCASE=1098, UNCOMPRESS=1099, 
		UNCOMPRESSED_LENGTH=1100, UNHEX=1101, UNIX_TIMESTAMP=1102, UPDATEXML=1103, 
		UPPER=1104, UUID=1105, UUID_SHORT=1106, VALIDATE_PASSWORD_STRENGTH=1107, 
		VERSION=1108, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1109, WEEKDAY=1110, WEEKOFYEAR=1111, 
		WEIGHT_STRING=1112, WITHIN=1113, YEARWEEK=1114, Y_FUNCTION=1115, X_FUNCTION=1116, 
		VIA=1117, LASTVAL=1118, NEXTVAL=1119, SETVAL=1120, PREVIOUS=1121, PERSISTENT=1122, 
		BINLOG_MONITOR=1123, BINLOG_REPLAY=1124, FEDERATED_ADMIN=1125, READ_ONLY_ADMIN=1126, 
		REPLICA=1127, REPLICAS=1128, REPLICATION_MASTER_ADMIN=1129, MONITOR=1130, 
		READ_ONLY=1131, REPLAY=1132, VAR_ASSIGN=1133, PLUS_ASSIGN=1134, MINUS_ASSIGN=1135, 
		MULT_ASSIGN=1136, DIV_ASSIGN=1137, MOD_ASSIGN=1138, AND_ASSIGN=1139, XOR_ASSIGN=1140, 
		OR_ASSIGN=1141, STAR=1142, DIVIDE=1143, MODULE=1144, PLUS=1145, MINUS=1146, 
		DIV=1147, MOD=1148, EQUAL_SYMBOL=1149, GREATER_SYMBOL=1150, LESS_SYMBOL=1151, 
		EXCLAMATION_SYMBOL=1152, BIT_NOT_OP=1153, BIT_OR_OP=1154, BIT_AND_OP=1155, 
		BIT_XOR_OP=1156, DOT=1157, LR_BRACKET=1158, RR_BRACKET=1159, COMMA=1160, 
		SEMI=1161, AT_SIGN=1162, ZERO_DECIMAL=1163, ONE_DECIMAL=1164, TWO_DECIMAL=1165, 
		SINGLE_QUOTE_SYMB=1166, DOUBLE_QUOTE_SYMB=1167, REVERSE_QUOTE_SYMB=1168, 
		COLON_SYMB=1169, CHARSET_REVERSE_QOUTE_STRING=1170, FILESIZE_LITERAL=1171, 
		START_NATIONAL_STRING_LITERAL=1172, STRING_LITERAL=1173, DECIMAL_LITERAL=1174, 
		HEXADECIMAL_LITERAL=1175, REAL_LITERAL=1176, NULL_SPEC_LITERAL=1177, BIT_STRING=1178, 
		STRING_CHARSET_NAME=1179, DOT_ID=1180, ID=1181, REVERSE_QUOTE_ID=1182, 
		HOST_IP_ADDRESS=1183, LOCAL_ID=1184, GLOBAL_ID=1185, ERROR_RECONGNIGION=1186;
	public const int
		RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_setStatementFor = 3, 
		RULE_emptyStatement_ = 4, RULE_ddlStatement = 5, RULE_dmlStatement = 6, 
		RULE_transactionStatement = 7, RULE_replicationStatement = 8, RULE_preparedStatement = 9, 
		RULE_compoundStatement = 10, RULE_administrationStatement = 11, RULE_utilityStatement = 12, 
		RULE_createDatabase = 13, RULE_createEvent = 14, RULE_createIndex = 15, 
		RULE_createLogfileGroup = 16, RULE_createProcedure = 17, RULE_createFunction = 18, 
		RULE_createRole = 19, RULE_createServer = 20, RULE_createTable = 21, RULE_createTablespaceInnodb = 22, 
		RULE_createTablespaceNdb = 23, RULE_createTrigger = 24, RULE_withClause = 25, 
		RULE_commonTableExpressions = 26, RULE_cteName = 27, RULE_cteColumnName = 28, 
		RULE_createView = 29, RULE_createSequence = 30, RULE_sequenceSpec = 31, 
		RULE_createDatabaseOption = 32, RULE_charSet = 33, RULE_currentUserExpression = 34, 
		RULE_ownerStatement = 35, RULE_scheduleExpression = 36, RULE_timestampValue = 37, 
		RULE_intervalExpr = 38, RULE_intervalType = 39, RULE_enableType = 40, 
		RULE_indexType = 41, RULE_indexOption = 42, RULE_procedureParameter = 43, 
		RULE_functionParameter = 44, RULE_routineOption = 45, RULE_serverOption = 46, 
		RULE_createDefinitions = 47, RULE_createDefinition = 48, RULE_columnDefinition = 49, 
		RULE_columnConstraint = 50, RULE_tableConstraint = 51, RULE_referenceDefinition = 52, 
		RULE_referenceAction = 53, RULE_referenceControlType = 54, RULE_indexColumnDefinition = 55, 
		RULE_tableOption = 56, RULE_tableType = 57, RULE_tablespaceStorage = 58, 
		RULE_partitionDefinitions = 59, RULE_partitionFunctionDefinition = 60, 
		RULE_partitionSystemVersionDefinitions = 61, RULE_partitionSystemVersionDefinition = 62, 
		RULE_subpartitionFunctionDefinition = 63, RULE_partitionDefinition = 64, 
		RULE_partitionDefinerAtom = 65, RULE_partitionDefinerVector = 66, RULE_subpartitionDefinition = 67, 
		RULE_partitionOption = 68, RULE_alterDatabase = 69, RULE_alterEvent = 70, 
		RULE_alterFunction = 71, RULE_alterInstance = 72, RULE_alterLogfileGroup = 73, 
		RULE_alterProcedure = 74, RULE_alterServer = 75, RULE_alterTable = 76, 
		RULE_alterTablespace = 77, RULE_alterView = 78, RULE_alterSequence = 79, 
		RULE_alterSpecification = 80, RULE_alterPartitionSpecification = 81, RULE_dropDatabase = 82, 
		RULE_dropEvent = 83, RULE_dropIndex = 84, RULE_dropLogfileGroup = 85, 
		RULE_dropProcedure = 86, RULE_dropFunction = 87, RULE_dropServer = 88, 
		RULE_dropTable = 89, RULE_dropTablespace = 90, RULE_dropTrigger = 91, 
		RULE_dropView = 92, RULE_dropRole = 93, RULE_setRole = 94, RULE_dropSequence = 95, 
		RULE_renameTable = 96, RULE_renameTableClause = 97, RULE_truncateTable = 98, 
		RULE_callStatement = 99, RULE_deleteStatement = 100, RULE_doStatement = 101, 
		RULE_handlerStatement = 102, RULE_insertStatement = 103, RULE_loadDataStatement = 104, 
		RULE_loadXmlStatement = 105, RULE_replaceStatement = 106, RULE_selectStatement = 107, 
		RULE_updateStatement = 108, RULE_valuesStatement = 109, RULE_insertStatementValue = 110, 
		RULE_updatedElement = 111, RULE_assignmentField = 112, RULE_lockClause = 113, 
		RULE_singleDeleteStatement = 114, RULE_multipleDeleteStatement = 115, 
		RULE_handlerOpenStatement = 116, RULE_handlerReadIndexStatement = 117, 
		RULE_handlerReadStatement = 118, RULE_handlerCloseStatement = 119, RULE_singleUpdateStatement = 120, 
		RULE_multipleUpdateStatement = 121, RULE_orderByClause = 122, RULE_orderByExpression = 123, 
		RULE_tableSources = 124, RULE_tableSource = 125, RULE_tableSourceItem = 126, 
		RULE_indexHint = 127, RULE_indexHintType = 128, RULE_joinPart = 129, RULE_queryExpression = 130, 
		RULE_queryExpressionNointo = 131, RULE_querySpecification = 132, RULE_querySpecificationNointo = 133, 
		RULE_unionParenthesis = 134, RULE_unionStatement = 135, RULE_lateralStatement = 136, 
		RULE_jsonTable = 137, RULE_jsonColumnList = 138, RULE_jsonColumn = 139, 
		RULE_jsonOnEmpty = 140, RULE_jsonOnError = 141, RULE_selectSpec = 142, 
		RULE_selectElements = 143, RULE_selectElement = 144, RULE_selectIntoExpression = 145, 
		RULE_selectFieldsInto = 146, RULE_selectLinesInto = 147, RULE_fromClause = 148, 
		RULE_groupByClause = 149, RULE_havingClause = 150, RULE_windowClause = 151, 
		RULE_groupByItem = 152, RULE_limitClause = 153, RULE_limitClauseAtom = 154, 
		RULE_startTransaction = 155, RULE_beginWork = 156, RULE_commitWork = 157, 
		RULE_rollbackWork = 158, RULE_savepointStatement = 159, RULE_rollbackStatement = 160, 
		RULE_releaseStatement = 161, RULE_lockTables = 162, RULE_unlockTables = 163, 
		RULE_setAutocommitStatement = 164, RULE_setTransactionStatement = 165, 
		RULE_transactionMode = 166, RULE_lockTableElement = 167, RULE_lockAction = 168, 
		RULE_transactionOption = 169, RULE_transactionLevel = 170, RULE_changeMaster = 171, 
		RULE_changeReplicationFilter = 172, RULE_purgeBinaryLogs = 173, RULE_resetMaster = 174, 
		RULE_resetSlave = 175, RULE_startSlave = 176, RULE_stopSlave = 177, RULE_startGroupReplication = 178, 
		RULE_stopGroupReplication = 179, RULE_masterOption = 180, RULE_stringMasterOption = 181, 
		RULE_decimalMasterOption = 182, RULE_boolMasterOption = 183, RULE_channelOption = 184, 
		RULE_replicationFilter = 185, RULE_tablePair = 186, RULE_threadType = 187, 
		RULE_untilOption = 188, RULE_connectionOption = 189, RULE_gtuidSet = 190, 
		RULE_xaStartTransaction = 191, RULE_xaEndTransaction = 192, RULE_xaPrepareStatement = 193, 
		RULE_xaCommitWork = 194, RULE_xaRollbackWork = 195, RULE_xaRecoverWork = 196, 
		RULE_prepareStatement = 197, RULE_executeStatement = 198, RULE_deallocatePrepare = 199, 
		RULE_routineBody = 200, RULE_blockStatement = 201, RULE_caseStatement = 202, 
		RULE_ifStatement = 203, RULE_iterateStatement = 204, RULE_leaveStatement = 205, 
		RULE_loopStatement = 206, RULE_repeatStatement = 207, RULE_returnStatement = 208, 
		RULE_whileStatement = 209, RULE_cursorStatement = 210, RULE_declareVariable = 211, 
		RULE_declareCondition = 212, RULE_declareCursor = 213, RULE_declareHandler = 214, 
		RULE_handlerConditionValue = 215, RULE_procedureSqlStatement = 216, RULE_caseAlternative = 217, 
		RULE_elifAlternative = 218, RULE_alterUser = 219, RULE_createUser = 220, 
		RULE_dropUser = 221, RULE_grantStatement = 222, RULE_roleOption = 223, 
		RULE_grantProxy = 224, RULE_renameUser = 225, RULE_revokeStatement = 226, 
		RULE_revokeProxy = 227, RULE_setPasswordStatement = 228, RULE_userSpecification = 229, 
		RULE_userAuthOption = 230, RULE_authenticationRule = 231, RULE_tlsOption = 232, 
		RULE_userResourceOption = 233, RULE_userPasswordOption = 234, RULE_userLockOption = 235, 
		RULE_privelegeClause = 236, RULE_privilege = 237, RULE_privilegeLevel = 238, 
		RULE_renameUserClause = 239, RULE_analyzeTable = 240, RULE_checkTable = 241, 
		RULE_checksumTable = 242, RULE_optimizeTable = 243, RULE_repairTable = 244, 
		RULE_checkTableOption = 245, RULE_createUdfunction = 246, RULE_installPlugin = 247, 
		RULE_uninstallPlugin = 248, RULE_setStatement = 249, RULE_showStatement = 250, 
		RULE_explainStatement = 251, RULE_variableClause = 252, RULE_showCommonEntity = 253, 
		RULE_showFilter = 254, RULE_showGlobalInfoClause = 255, RULE_showSchemaEntity = 256, 
		RULE_showProfileType = 257, RULE_binlogStatement = 258, RULE_cacheIndexStatement = 259, 
		RULE_flushStatement = 260, RULE_killStatement = 261, RULE_loadIndexIntoCache = 262, 
		RULE_resetStatement = 263, RULE_shutdownStatement = 264, RULE_tableIndexes = 265, 
		RULE_flushOption = 266, RULE_flushTableOption = 267, RULE_loadedTableIndexes = 268, 
		RULE_simpleDescribeStatement = 269, RULE_fullDescribeStatement = 270, 
		RULE_formatJsonStatement = 271, RULE_helpStatement = 272, RULE_useStatement = 273, 
		RULE_signalStatement = 274, RULE_resignalStatement = 275, RULE_signalConditionInformation = 276, 
		RULE_diagnosticsStatement = 277, RULE_diagnosticsConditionInformationName = 278, 
		RULE_describeObjectClause = 279, RULE_fullId = 280, RULE_tableName = 281, 
		RULE_roleName = 282, RULE_fullColumnName = 283, RULE_indexColumnName = 284, 
		RULE_simpleUserName = 285, RULE_hostName = 286, RULE_userName = 287, RULE_mysqlVariable = 288, 
		RULE_charsetName = 289, RULE_collationName = 290, RULE_engineName = 291, 
		RULE_engineNameBase = 292, RULE_encryptedLiteral = 293, RULE_uuidSet = 294, 
		RULE_xid = 295, RULE_xuidStringId = 296, RULE_authPlugin = 297, RULE_uid = 298, 
		RULE_simpleId = 299, RULE_dottedId = 300, RULE_decimalLiteral = 301, RULE_fileSizeLiteral = 302, 
		RULE_stringLiteral = 303, RULE_booleanLiteral = 304, RULE_hexadecimalLiteral = 305, 
		RULE_nullNotnull = 306, RULE_constant = 307, RULE_dataType = 308, RULE_collectionOptions = 309, 
		RULE_collectionOption = 310, RULE_convertedDataType = 311, RULE_lengthOneDimension = 312, 
		RULE_lengthTwoDimension = 313, RULE_lengthTwoOptionalDimension = 314, 
		RULE_uidList = 315, RULE_tables = 316, RULE_indexColumnNames = 317, RULE_expressions = 318, 
		RULE_expressionsWithDefaults = 319, RULE_constants = 320, RULE_simpleStrings = 321, 
		RULE_userVariables = 322, RULE_defaultValue = 323, RULE_currentTimestamp = 324, 
		RULE_expressionOrDefault = 325, RULE_ifExists = 326, RULE_ifNotExists = 327, 
		RULE_orReplace = 328, RULE_waitNowaitClause = 329, RULE_lockOption = 330, 
		RULE_functionCall = 331, RULE_specificFunction = 332, RULE_caseFuncAlternative = 333, 
		RULE_levelsInWeightString = 334, RULE_levelInWeightListElement = 335, 
		RULE_aggregateWindowedFunction = 336, RULE_nonAggregateWindowedFunction = 337, 
		RULE_overClause = 338, RULE_windowSpec = 339, RULE_windowName = 340, RULE_frameClause = 341, 
		RULE_frameUnits = 342, RULE_frameExtent = 343, RULE_frameBetween = 344, 
		RULE_frameRange = 345, RULE_partitionClause = 346, RULE_scalarFunctionName = 347, 
		RULE_passwordFunctionClause = 348, RULE_functionArgs = 349, RULE_functionArg = 350, 
		RULE_expression = 351, RULE_predicate = 352, RULE_expressionAtom = 353, 
		RULE_unaryOperator = 354, RULE_comparisonOperator = 355, RULE_logicalOperator = 356, 
		RULE_bitOperator = 357, RULE_mathOperator = 358, RULE_jsonOperator = 359, 
		RULE_charsetNameBase = 360, RULE_transactionLevelBase = 361, RULE_privilegesBase = 362, 
		RULE_intervalTypeBase = 363, RULE_dataTypeBase = 364, RULE_keywordsCanBeId = 365, 
		RULE_functionNameBase = 366;
	public static readonly string[] ruleNames = {
		"root", "sqlStatements", "sqlStatement", "setStatementFor", "emptyStatement_", 
		"ddlStatement", "dmlStatement", "transactionStatement", "replicationStatement", 
		"preparedStatement", "compoundStatement", "administrationStatement", "utilityStatement", 
		"createDatabase", "createEvent", "createIndex", "createLogfileGroup", 
		"createProcedure", "createFunction", "createRole", "createServer", "createTable", 
		"createTablespaceInnodb", "createTablespaceNdb", "createTrigger", "withClause", 
		"commonTableExpressions", "cteName", "cteColumnName", "createView", "createSequence", 
		"sequenceSpec", "createDatabaseOption", "charSet", "currentUserExpression", 
		"ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr", 
		"intervalType", "enableType", "indexType", "indexOption", "procedureParameter", 
		"functionParameter", "routineOption", "serverOption", "createDefinitions", 
		"createDefinition", "columnDefinition", "columnConstraint", "tableConstraint", 
		"referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition", 
		"tableOption", "tableType", "tablespaceStorage", "partitionDefinitions", 
		"partitionFunctionDefinition", "partitionSystemVersionDefinitions", "partitionSystemVersionDefinition", 
		"subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom", 
		"partitionDefinerVector", "subpartitionDefinition", "partitionOption", 
		"alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
		"alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView", 
		"alterSequence", "alterSpecification", "alterPartitionSpecification", 
		"dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup", "dropProcedure", 
		"dropFunction", "dropServer", "dropTable", "dropTablespace", "dropTrigger", 
		"dropView", "dropRole", "setRole", "dropSequence", "renameTable", "renameTableClause", 
		"truncateTable", "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
		"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
		"selectStatement", "updateStatement", "valuesStatement", "insertStatementValue", 
		"updatedElement", "assignmentField", "lockClause", "singleDeleteStatement", 
		"multipleDeleteStatement", "handlerOpenStatement", "handlerReadIndexStatement", 
		"handlerReadStatement", "handlerCloseStatement", "singleUpdateStatement", 
		"multipleUpdateStatement", "orderByClause", "orderByExpression", "tableSources", 
		"tableSource", "tableSourceItem", "indexHint", "indexHintType", "joinPart", 
		"queryExpression", "queryExpressionNointo", "querySpecification", "querySpecificationNointo", 
		"unionParenthesis", "unionStatement", "lateralStatement", "jsonTable", 
		"jsonColumnList", "jsonColumn", "jsonOnEmpty", "jsonOnError", "selectSpec", 
		"selectElements", "selectElement", "selectIntoExpression", "selectFieldsInto", 
		"selectLinesInto", "fromClause", "groupByClause", "havingClause", "windowClause", 
		"groupByItem", "limitClause", "limitClauseAtom", "startTransaction", "beginWork", 
		"commitWork", "rollbackWork", "savepointStatement", "rollbackStatement", 
		"releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement", 
		"setTransactionStatement", "transactionMode", "lockTableElement", "lockAction", 
		"transactionOption", "transactionLevel", "changeMaster", "changeReplicationFilter", 
		"purgeBinaryLogs", "resetMaster", "resetSlave", "startSlave", "stopSlave", 
		"startGroupReplication", "stopGroupReplication", "masterOption", "stringMasterOption", 
		"decimalMasterOption", "boolMasterOption", "channelOption", "replicationFilter", 
		"tablePair", "threadType", "untilOption", "connectionOption", "gtuidSet", 
		"xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
		"xaRollbackWork", "xaRecoverWork", "prepareStatement", "executeStatement", 
		"deallocatePrepare", "routineBody", "blockStatement", "caseStatement", 
		"ifStatement", "iterateStatement", "leaveStatement", "loopStatement", 
		"repeatStatement", "returnStatement", "whileStatement", "cursorStatement", 
		"declareVariable", "declareCondition", "declareCursor", "declareHandler", 
		"handlerConditionValue", "procedureSqlStatement", "caseAlternative", "elifAlternative", 
		"alterUser", "createUser", "dropUser", "grantStatement", "roleOption", 
		"grantProxy", "renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement", 
		"userSpecification", "userAuthOption", "authenticationRule", "tlsOption", 
		"userResourceOption", "userPasswordOption", "userLockOption", "privelegeClause", 
		"privilege", "privilegeLevel", "renameUserClause", "analyzeTable", "checkTable", 
		"checksumTable", "optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
		"installPlugin", "uninstallPlugin", "setStatement", "showStatement", "explainStatement", 
		"variableClause", "showCommonEntity", "showFilter", "showGlobalInfoClause", 
		"showSchemaEntity", "showProfileType", "binlogStatement", "cacheIndexStatement", 
		"flushStatement", "killStatement", "loadIndexIntoCache", "resetStatement", 
		"shutdownStatement", "tableIndexes", "flushOption", "flushTableOption", 
		"loadedTableIndexes", "simpleDescribeStatement", "fullDescribeStatement", 
		"formatJsonStatement", "helpStatement", "useStatement", "signalStatement", 
		"resignalStatement", "signalConditionInformation", "diagnosticsStatement", 
		"diagnosticsConditionInformationName", "describeObjectClause", "fullId", 
		"tableName", "roleName", "fullColumnName", "indexColumnName", "simpleUserName", 
		"hostName", "userName", "mysqlVariable", "charsetName", "collationName", 
		"engineName", "engineNameBase", "encryptedLiteral", "uuidSet", "xid", 
		"xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", 
		"fileSizeLiteral", "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
		"nullNotnull", "constant", "dataType", "collectionOptions", "collectionOption", 
		"convertedDataType", "lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension", 
		"uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
		"constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp", 
		"expressionOrDefault", "ifExists", "ifNotExists", "orReplace", "waitNowaitClause", 
		"lockOption", "functionCall", "specificFunction", "caseFuncAlternative", 
		"levelsInWeightString", "levelInWeightListElement", "aggregateWindowedFunction", 
		"nonAggregateWindowedFunction", "overClause", "windowSpec", "windowName", 
		"frameClause", "frameUnits", "frameExtent", "frameBetween", "frameRange", 
		"partitionClause", "scalarFunctionName", "passwordFunctionClause", "functionArgs", 
		"functionArg", "expression", "predicate", "expressionAtom", "unaryOperator", 
		"comparisonOperator", "logicalOperator", "bitOperator", "mathOperator", 
		"jsonOperator", "charsetNameBase", "transactionLevelBase", "privilegesBase", 
		"intervalTypeBase", "dataTypeBase", "keywordsCanBeId", "functionNameBase"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
		"'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'ATTRIBUTE'", "'BEFORE'", 
		"'BETWEEN'", "'BODY'", "'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", 
		"'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", 
		"'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", 
		"'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_ROLE'", "'CURRENT_USER'", 
		"'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", 
		"'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", 
		"'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", 
		"'EMPTY'", "'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", "'EXIT'", 
		"'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", 
		"'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", "'HAVING'", 
		"'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IGNORED'", "'IN'", 
		"'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
		"'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", 
		"'LATERAL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", 
		"'LINES'", "'LOAD'", "'LOCK'", "'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", 
		"'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
		"'MINVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
		"'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONAL'", 
		"'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", "'OVER'", 
		"'PARTITION'", "'PRIMARY'", "'PACKAGE'", "'PROCEDURE'", "'PURGE'", "'RANGE'", 
		"'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", 
		"'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", 
		"'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", 
		"'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SKIP'", "'SPATIAL'", 
		"'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", 
		"'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", 
		"'STATEMENT'", "'STRAIGHT_JOIN'", "'SYSTEM'", "'SYSTEM_TIME'", "'TABLE'", 
		"'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", 
		"'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
		"'USAGE'", "'USE'", "'USING'", "'VALUES'", "'VERSIONING'", "'WHEN'", "'WHERE'", 
		"'WHILE'", "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
		"'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", "'INT4'", 
		"'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", 
		"'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", 
		"'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
		"'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'", 
		"'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", 
		"'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'", 
		"'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'", 
		"'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
		"'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_ARRAYAGG'", "'JSON_ARRAY_APPEND'", 
		"'JSON_ARRAY_INSERT'", "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_DEPTH'", 
		"'JSON_EXTRACT'", "'JSON_INSERT'", "'JSON_KEYS'", "'JSON_LENGTH'", "'JSON_MERGE'", 
		"'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'", 
		"'JSON_OVERLAPS'", "'JSON_PRETTY'", "'JSON_QUOTE'", "'JSON_REMOVE'", "'JSON_REPLACE'", 
		"'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", "'JSON_SEARCH'", 
		"'JSON_SET'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_TABLE'", 
		"'JSON_TYPE'", "'JSON_UNQUOTE'", "'JSON_VALID'", "'JSON_VALUE'", "'NESTED'", 
		"'ORDINALITY'", "'PATH'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", 
		"'COUNT'", "'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", 
		"'LAG'", "'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", 
		"'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
		"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
		"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'", 
		"'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
		"'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'", 
		"'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
		"'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", 
		"'AUTO'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", 
		"'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", 
		"'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
		"'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'CLUSTERING'", "'COALESCE'", 
		"'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", 
		"'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", null, "'CONCURRENT'", 
		"'CONNECT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", 
		"'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", 
		"'CPU'", "'CYCLE'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", 
		"'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
		"'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", 
		"'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTED'", "'ENCRYPTION'", 
		"'ENCRYPTION_KEY_ID'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", 
		"'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", 
		"'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
		"'FAILED_LOGIN_ATTEMPTS'", "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
		"'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", 
		"'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", 
		"'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", "'HELP'", "'HISTORY'", "'HOST'", 
		"'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INCREMENT'", 
		"'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", 
		"'INSTANCE'", "'INSTANT'", "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", 
		"'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
		"'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOCALES'", 
		"'LOGFILE'", "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
		"'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", 
		"'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
		"'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
		"'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", 
		"'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
		"'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
		"'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
		"'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", 
		"'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", 
		"'NO'", "'NOCACHE'", "'NOCOPY'", "'NOCYCLE'", "'NOMAXVALUE'", "'NOMINVALUE'", 
		"'NOWAIT'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", 
		"'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
		"'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
		"'PAGE_COMPRESSED'", "'PAGE_COMPRESSION_LEVEL'", "'PARSER'", "'PARTIAL'", 
		"'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PASSWORD_LOCK_TIME'", 
		"'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
		"'PRECEDING'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", 
		"'PROFILES'", "'PROXY'", "'QUERY'", "'QUERY_RESPONSE_TIME'", "'QUICK'", 
		"'REBUILD'", "'RECOVER'", "'RECURSIVE'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", 
		"'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", 
		"'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
		"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
		"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
		"'RESET'", "'RESTART'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", 
		"'RETURNS'", "'REUSE'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", 
		"'ROW'", "'ROWS'", "'ROW_FORMAT'", "'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", 
		"'SECURITY'", "'SEQUENCE'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", 
		"'SIGNED'", "'SIMPLE'", "'SLAVE'", "'SLAVES'", "'SLOW'", "'SNAPSHOT'", 
		"'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
		"'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", 
		"'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", 
		"'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", 
		"'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", 
		"'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", 
		"'TABLESPACE'", "'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", 
		"'TRADITIONAL'", "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", 
		"'TYPES'", "'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
		"'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", 
		"'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", 
		"'VIRTUAL'", "'VISIBLE'", "'WAIT'", "'WARNINGS'", "'WINDOW'", "'WITHOUT'", 
		"'WORK'", "'WRAPPER'", "'WSREP_MEMBERSHIP'", "'WSREP_STATUS'", "'X509'", 
		"'XA'", "'XML'", "'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", 
		"'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", 
		"'MICROSECOND'", "'USER_STATISTICS'", "'CLIENT_STATISTICS'", "'INDEX_STATISTICS'", 
		"'TABLE_STATISTICS'", "'ADMIN'", "'APPLICATION_PASSWORD_ADMIN'", "'AUDIT_ADMIN'", 
		"'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", 
		"'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'EXECUTE'", "'FILE'", 
		"'FIREWALL_ADMIN'", "'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", 
		"'FLUSH_TABLES'", "'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", 
		"'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'", "'INVOKE'", "'LAMBDA'", 
		"'NDB_STORED_USER'", "'PASSWORDLESS_USER_ADMIN'", "'PERSIST_RO_VARIABLES_ADMIN'", 
		"'PRIVILEGES'", "'PROCESS'", "'RELOAD'", "'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", 
		"'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'ROUTINE'", 
		"'S3'", "'SERVICE_CONNECTION_ADMIN'", null, "'SET_USER_ID'", "'SHOW_ROUTINE'", 
		"'SHUTDOWN'", "'SUPER'", "'SYSTEM_VARIABLES_ADMIN'", "'TABLES'", "'TABLE_ENCRYPTION_ADMIN'", 
		"'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", 
		"'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'", 
		"'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB18030'", "'GB2312'", 
		"'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", 
		"'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", 
		"'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", 
		"'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", 
		"'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", 
		"'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", 
		"'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", 
		"'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
		"'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", "'ACOS'", 
		"'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'", 
		"'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
		"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
		"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
		"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
		"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
		"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
		"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
		"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
		"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
		"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
		"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", 
		"'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
		"'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
		"'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", 
		"'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
		"'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'", 
		"'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", 
		"'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
		"'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'", 
		"'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", 
		"'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
		"'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'", 
		"'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'", 
		"'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
		"'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", 
		"'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", 
		"'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
		"'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", 
		"'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'", 
		"'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
		"'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", 
		"'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
		"'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
		"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
		"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
		"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
		"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
		"'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", 
		"'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", 
		"'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", 
		"'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", 
		"'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
		"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
		"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
		"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
		"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
		"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
		"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
		"'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
		"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
		"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
		"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
		"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
		"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
		"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
		"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
		"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
		"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
		"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
		"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", 
		"'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "'VIA'", "'LASTVAL'", "'NEXTVAL'", 
		"'SETVAL'", "'PREVIOUS'", "'PERSISTENT'", "'BINLOG_MONITOR'", "'BINLOG_REPLAY'", 
		"'FEDERATED_ADMIN'", "'READ_ONLY_ADMIN'", "'REPLICA'", "'REPLICAS'", "'REPLICATION_MASTER_ADMIN'", 
		"'MONITOR'", "'READ_ONLY'", "'REPLAY'", "':='", "'+='", "'-='", "'*='", 
		"'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", 
		"'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", 
		"'\"'", "'`'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
		"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", 
		"ATTRIBUTE", "BEFORE", "BETWEEN", "BODY", "BOTH", "BUCKETS", "BY", "CALL", 
		"CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", 
		"COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", 
		"CROSS", "CURRENT", "CURRENT_ROLE", "CURRENT_USER", "CURSOR", "DATABASE", 
		"DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC", "DESCRIBE", 
		"DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", "DROP", "EACH", 
		"ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", "EXISTS", 
		"EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", 
		"FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
		"HISTOGRAM", "IF", "IGNORE", "IGNORED", "IN", "INDEX", "INFILE", "INNER", 
		"INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", 
		"KEYS", "KILL", "LATERAL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", 
		"LINEAR", "LINES", "LOAD", "LOCK", "LOCKED", "LOOP", "LOW_PRIORITY", "MASTER_BIND", 
		"MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MINVALUE", "MODIFIES", 
		"NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", "ON", 
		"OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", "OR", "ORDER", "OUT", 
		"OUTER", "OUTFILE", "OVER", "PARTITION", "PRIMARY", "PACKAGE", "PROCEDURE", 
		"PURGE", "RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", 
		"RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETAIN", 
		"RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", 
		"SEPARATOR", "SHOW", "SIGNAL", "SKIP_", "SPATIAL", "SQL", "SQLEXCEPTION", 
		"SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
		"SSL", "STACKED", "STARTING", "STATEMENT", "STRAIGHT_JOIN", "SYSTEM", 
		"SYSTEM_TIME", "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", 
		"TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", 
		"USE", "USING", "VALUES", "VERSIONING", "WHEN", "WHERE", "WHILE", "WITH", 
		"WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", "MIDDLEINT", 
		"INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", "BIGINT", "REAL", 
		"DOUBLE", "PRECISION", "FLOAT", "FLOAT4", "FLOAT8", "DECIMAL", "DEC", 
		"NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", 
		"NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", 
		"LONG", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", 
		"VARYING", "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", 
		"HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", 
		"HOUR_MICROSECOND", "DAY_MICROSECOND", "JSON_ARRAY", "JSON_ARRAYAGG", 
		"JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_CONTAINS", "JSON_CONTAINS_PATH", 
		"JSON_DEPTH", "JSON_EXTRACT", "JSON_INSERT", "JSON_KEYS", "JSON_LENGTH", 
		"JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_OBJECT", 
		"JSON_OBJECTAGG", "JSON_OVERLAPS", "JSON_PRETTY", "JSON_QUOTE", "JSON_REMOVE", 
		"JSON_REPLACE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
		"JSON_SEARCH", "JSON_SET", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_TABLE", 
		"JSON_TYPE", "JSON_UNQUOTE", "JSON_VALID", "JSON_VALUE", "NESTED", "ORDINALITY", 
		"PATH", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", "DENSE_RANK", 
		"FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", "MAX", "MIN", 
		"NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", "STD", "STDDEV", 
		"STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", 
		"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", 
		"CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", "NOW", 
		"POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
		"UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", "ALGORITHM", 
		"ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", "AUTO", "AUTO_INCREMENT", 
		"AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
		"BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", 
		"PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", "CLOSE", "CLUSTERING", 
		"COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", 
		"COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION", "CONCURRENT", 
		"CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", 
		"CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU", 
		"CYCLE", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
		"DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", 
		"DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", 
		"ENCRYPTED", "ENCRYPTION", "ENCRYPTION_KEY_ID", "END", "ENDS", "ENGINE", 
		"ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", 
		"EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", 
		"FAILED_LOGIN_ATTEMPTS", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", 
		"FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", "FOLLOWS", "FOUND", 
		"FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
		"HANDLER", "HASH", "HELP", "HISTORY", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", 
		"IMPORT", "INCREMENT", "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", 
		"INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", "INVOKER", "IO", "IO_THREAD", 
		"IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
		"LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOCALES", "LOGFILE", "LOGS", 
		"MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
		"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
		"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
		"MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
		"MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
		"MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", 
		"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", 
		"MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
		"MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", "NEVER", 
		"NEXT", "NO", "NOCACHE", "NOCOPY", "NOCYCLE", "NOMAXVALUE", "NOMINVALUE", 
		"NOWAIT", "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", "OF", "OJ", 
		"OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", "OPTIONS", 
		"OWNER", "PACK_KEYS", "PAGE", "PAGE_COMPRESSED", "PAGE_COMPRESSION_LEVEL", 
		"PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", "PASSWORD", "PASSWORD_LOCK_TIME", 
		"PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PRECEDING", 
		"PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", 
		"QUERY", "QUERY_RESPONSE_TIME", "QUICK", "REBUILD", "RECOVER", "RECURSIVE", 
		"REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", 
		"RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", 
		"REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
		"REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", 
		"RESET", "RESTART", "RESUME", "RETURNED_SQLSTATE", "RETURNING", "RETURNS", 
		"REUSE", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", 
		"RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", "SEQUENCE", "SERVER", "SESSION", 
		"SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLAVES", "SLOW", "SNAPSHOT", 
		"SOCKET", "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
		"SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", 
		"SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
		"STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", "STORED", "STRING", 
		"SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
		"SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", "TEMPORARY", 
		"TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", "TRIGGERS", 
		"TRUNCATE", "TYPES", "UNBOUNDED", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
		"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
		"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
		"WARNINGS", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "WSREP_MEMBERSHIP", 
		"WSREP_STATUS", "X509", "XA", "XML", "YES", "EUR", "USA", "JIS", "ISO", 
		"INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", "SECOND", 
		"MICROSECOND", "USER_STATISTICS", "CLIENT_STATISTICS", "INDEX_STATISTICS", 
		"TABLE_STATISTICS", "ADMIN", "APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN", 
		"BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", 
		"CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", "EXECUTE", "FILE", "FIREWALL_ADMIN", 
		"FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", 
		"FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", "INNODB_REDO_LOG_ARCHIVE", 
		"INNODB_REDO_LOG_ENABLE", "INVOKE", "LAMBDA", "NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", 
		"PERSIST_RO_VARIABLES_ADMIN", "PRIVILEGES", "PROCESS", "RELOAD", "REPLICATION_APPLIER", 
		"REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", 
		"ROLE_ADMIN", "ROUTINE", "S3", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
		"SET_USER_ID", "SHOW_ROUTINE", "SHUTDOWN", "SUPER", "SYSTEM_VARIABLES_ADMIN", 
		"TABLES", "TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
		"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850", 
		"CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB18030", "GB2312", 
		"GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", 
		"LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", 
		"TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", 
		"UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", 
		"MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", 
		"REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
		"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
		"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
		"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
		"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
		"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
		"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
		"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
		"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", 
		"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
		"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
		"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
		"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
		"ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", 
		"EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
		"FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
		"GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
		"GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", 
		"GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
		"GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", 
		"INET_NTOA", "INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", 
		"ISNULL", "ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
		"IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", 
		"LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
		"LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
		"LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", 
		"MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", 
		"MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", 
		"MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
		"MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
		"MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", 
		"NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
		"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
		"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
		"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
		"RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", 
		"SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", 
		"SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", 
		"STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
		"ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", 
		"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", 
		"ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
		"ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
		"ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
		"ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", 
		"ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
		"ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
		"ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
		"ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
		"ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
		"ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
		"ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
		"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
		"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS", 
		"UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", 
		"UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
		"WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
		"X_FUNCTION", "VIA", "LASTVAL", "NEXTVAL", "SETVAL", "PREVIOUS", "PERSISTENT", 
		"BINLOG_MONITOR", "BINLOG_REPLAY", "FEDERATED_ADMIN", "READ_ONLY_ADMIN", 
		"REPLICA", "REPLICAS", "REPLICATION_MASTER_ADMIN", "MONITOR", "READ_ONLY", 
		"REPLAY", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
		"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", 
		"DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
		"LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", 
		"BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", 
		"ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", 
		"REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
		"START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL", 
		"HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
		"STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "HOST_IP_ADDRESS", 
		"LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MariaDBParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MariaDBParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MariaDBParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MariaDBParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MariaDBParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementsContext sqlStatements() {
			return GetRuleContext<SqlStatementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MariaDBParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MariaDBParser.MINUS, i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4616435926009119360L) != 0) || ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & 4611967499850760195L) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & 2990671627993643L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & 36099165796700291L) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & 16782337L) != 0) || ((((_la - 565)) & ~0x3f) == 0 && ((1L << (_la - 565)) & 35460325834753L) != 0) || ((((_la - 636)) & ~0x3f) == 0 && ((1L << (_la - 636)) & 36028805743116353L) != 0) || _la==EXECUTE || _la==SHUTDOWN || _la==LR_BRACKET || _la==SEMI) {
				{
				State = 734;
				sqlStatements();
				}
			}

			State = 739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 737;
				Match(MINUS);
				State = 738;
				Match(MINUS);
				}
			}

			State = 741;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlStatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext[] sqlStatement() {
			return GetRuleContexts<SqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement(int i) {
			return GetRuleContext<SqlStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context[] emptyStatement_() {
			return GetRuleContexts<EmptyStatement_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyStatement_Context emptyStatement_(int i) {
			return GetRuleContext<EmptyStatement_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MariaDBParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MariaDBParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MariaDBParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MariaDBParser.MINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlStatements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSqlStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSqlStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlStatementsContext sqlStatements() {
		SqlStatementsContext _localctx = new SqlStatementsContext(Context, State);
		EnterRule(_localctx, 2, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 752;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALTER:
					case ANALYZE:
					case CALL:
					case CHANGE:
					case CHECK:
					case CREATE:
					case DELETE:
					case DESC:
					case DESCRIBE:
					case DROP:
					case EXPLAIN:
					case GET:
					case GRANT:
					case INSERT:
					case KILL:
					case LOAD:
					case LOCK:
					case OPTIMIZE:
					case PURGE:
					case RELEASE:
					case RENAME:
					case REPLACE:
					case RESIGNAL:
					case REVOKE:
					case SELECT:
					case SET:
					case SHOW:
					case SIGNAL:
					case UNLOCK:
					case UPDATE:
					case USE:
					case VALUES:
					case BEGIN:
					case BINLOG:
					case CACHE:
					case CHECKSUM:
					case COMMIT:
					case DEALLOCATE:
					case DO:
					case FLUSH:
					case HANDLER:
					case HELP:
					case INSTALL:
					case PREPARE:
					case REPAIR:
					case RESET:
					case ROLLBACK:
					case SAVEPOINT:
					case START:
					case STOP:
					case TRUNCATE:
					case UNINSTALL:
					case XA:
					case EXECUTE:
					case SHUTDOWN:
					case LR_BRACKET:
						{
						State = 743;
						sqlStatement();
						State = 746;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==MINUS) {
							{
							State = 744;
							Match(MINUS);
							State = 745;
							Match(MINUS);
							}
						}

						State = 749;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
						case 1:
							{
							State = 748;
							Match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						State = 751;
						emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 756;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case VALUES:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case LR_BRACKET:
				{
				State = 757;
				sqlStatement();
				State = 763;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 760;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==MINUS) {
						{
						State = 758;
						Match(MINUS);
						State = 759;
						Match(MINUS);
						}
					}

					State = 762;
					Match(SEMI);
					}
					break;
				}
				}
				break;
			case SEMI:
				{
				State = 765;
				emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DdlStatementContext ddlStatement() {
			return GetRuleContext<DdlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DmlStatementContext dmlStatement() {
			return GetRuleContext<DmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionStatementContext transactionStatement() {
			return GetRuleContext<TransactionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationStatementContext replicationStatement() {
			return GetRuleContext<ReplicationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreparedStatementContext preparedStatement() {
			return GetRuleContext<PreparedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdministrationStatementContext administrationStatement() {
			return GetRuleContext<AdministrationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UtilityStatementContext utilityStatement() {
			return GetRuleContext<UtilityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStatementForContext setStatementFor() {
			return GetRuleContext<SetStatementForContext>(0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSqlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSqlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlStatementContext sqlStatement() {
		SqlStatementContext _localctx = new SqlStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sqlStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 768;
				setStatementFor();
				}
				break;
			}
			State = 778;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 771;
				ddlStatement();
				}
				break;
			case 2:
				{
				State = 772;
				dmlStatement();
				}
				break;
			case 3:
				{
				State = 773;
				transactionStatement();
				}
				break;
			case 4:
				{
				State = 774;
				replicationStatement();
				}
				break;
			case 5:
				{
				State = 775;
				preparedStatement();
				}
				break;
			case 6:
				{
				State = 776;
				administrationStatement();
				}
				break;
			case 7:
				{
				State = 777;
				utilityStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT() { return GetToken(MariaDBParser.STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(MariaDBParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(MariaDBParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public SetStatementForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatementFor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSetStatementFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSetStatementFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStatementFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementForContext setStatementFor() {
		SetStatementForContext _localctx = new SetStatementForContext(Context, State);
		EnterRule(_localctx, 6, RULE_setStatementFor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 780;
			Match(SET);
			State = 781;
			Match(STATEMENT);
			State = 782;
			Match(ID);
			State = 783;
			Match(EQUAL_SYMBOL);
			State = 784;
			constant();
			State = 791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 785;
				Match(COMMA);
				State = 786;
				Match(ID);
				State = 787;
				Match(EQUAL_SYMBOL);
				State = 788;
				constant();
				}
				}
				State = 793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 794;
			Match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatement_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MariaDBParser.SEMI, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatement_Context emptyStatement_() {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(Context, State);
		EnterRule(_localctx, 8, RULE_emptyStatement_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 796;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseContext createDatabase() {
			return GetRuleContext<CreateDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateEventContext createEvent() {
			return GetRuleContext<CreateEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateLogfileGroupContext createLogfileGroup() {
			return GetRuleContext<CreateLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateServerContext createServer() {
			return GetRuleContext<CreateServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTablespaceInnodbContext createTablespaceInnodb() {
			return GetRuleContext<CreateTablespaceInnodbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTablespaceNdbContext createTablespaceNdb() {
			return GetRuleContext<CreateTablespaceNdbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTriggerContext createTrigger() {
			return GetRuleContext<CreateTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateViewContext createView() {
			return GetRuleContext<CreateViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateRoleContext createRole() {
			return GetRuleContext<CreateRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateSequenceContext createSequence() {
			return GetRuleContext<CreateSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseContext alterDatabase() {
			return GetRuleContext<AlterDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterEventContext alterEvent() {
			return GetRuleContext<AlterEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterFunctionContext alterFunction() {
			return GetRuleContext<AlterFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterInstanceContext alterInstance() {
			return GetRuleContext<AlterInstanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupContext alterLogfileGroup() {
			return GetRuleContext<AlterLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterProcedureContext alterProcedure() {
			return GetRuleContext<AlterProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterServerContext alterServer() {
			return GetRuleContext<AlterServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceContext alterTablespace() {
			return GetRuleContext<AlterTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterViewContext alterView() {
			return GetRuleContext<AlterViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterSequenceContext alterSequence() {
			return GetRuleContext<AlterSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropDatabaseContext dropDatabase() {
			return GetRuleContext<DropDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropEventContext dropEvent() {
			return GetRuleContext<DropEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupContext dropLogfileGroup() {
			return GetRuleContext<DropLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropFunctionContext dropFunction() {
			return GetRuleContext<DropFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropServerContext dropServer() {
			return GetRuleContext<DropServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTablespaceContext dropTablespace() {
			return GetRuleContext<DropTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTriggerContext dropTrigger() {
			return GetRuleContext<DropTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropViewContext dropView() {
			return GetRuleContext<DropViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropRoleContext dropRole() {
			return GetRuleContext<DropRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropSequenceContext dropSequence() {
			return GetRuleContext<DropSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetRoleContext setRole() {
			return GetRuleContext<SetRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableContext renameTable() {
			return GetRuleContext<RenameTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncateTableContext truncateTable() {
			return GetRuleContext<TruncateTableContext>(0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDdlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDdlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdlStatementContext ddlStatement() {
		DdlStatementContext _localctx = new DdlStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_ddlStatement);
		try {
			State = 839;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 798;
				createDatabase();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 799;
				createEvent();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 800;
				createIndex();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 801;
				createLogfileGroup();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 802;
				createProcedure();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 803;
				createFunction();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 804;
				createServer();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 805;
				createTable();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 806;
				createTablespaceInnodb();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 807;
				createTablespaceNdb();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 808;
				createTrigger();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 809;
				createView();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 810;
				createRole();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 811;
				createSequence();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 812;
				alterDatabase();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 813;
				alterEvent();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 814;
				alterFunction();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 815;
				alterInstance();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 816;
				alterLogfileGroup();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 817;
				alterProcedure();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 818;
				alterServer();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 819;
				alterTable();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 820;
				alterTablespace();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 821;
				alterView();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 822;
				alterSequence();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 823;
				dropDatabase();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 824;
				dropEvent();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 825;
				dropIndex();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 826;
				dropLogfileGroup();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 827;
				dropProcedure();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 828;
				dropFunction();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 829;
				dropServer();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 830;
				dropTable();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 831;
				dropTablespace();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 832;
				dropTrigger();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 833;
				dropView();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 834;
				dropRole();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 835;
				dropSequence();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 836;
				setRole();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 837;
				renameTable();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 838;
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DmlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadDataStatementContext loadDataStatement() {
			return GetRuleContext<LoadDataStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadXmlStatementContext loadXmlStatement() {
			return GetRuleContext<LoadXmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerStatementContext handlerStatement() {
			return GetRuleContext<HandlerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesStatementContext valuesStatement() {
			return GetRuleContext<ValuesStatementContext>(0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dmlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDmlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDmlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDmlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DmlStatementContext dmlStatement() {
		DmlStatementContext _localctx = new DmlStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_dmlStatement);
		try {
			State = 852;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 841;
				selectStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 842;
				insertStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 843;
				updateStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 844;
				deleteStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 845;
				replaceStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 846;
				callStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 847;
				loadDataStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 848;
				loadXmlStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 849;
				doStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 850;
				handlerStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 851;
				valuesStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StartTransactionContext startTransaction() {
			return GetRuleContext<StartTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginWorkContext beginWork() {
			return GetRuleContext<BeginWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommitWorkContext commitWork() {
			return GetRuleContext<CommitWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RollbackWorkContext rollbackWork() {
			return GetRuleContext<RollbackWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SavepointStatementContext savepointStatement() {
			return GetRuleContext<SavepointStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RollbackStatementContext rollbackStatement() {
			return GetRuleContext<RollbackStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReleaseStatementContext releaseStatement() {
			return GetRuleContext<ReleaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockTablesContext lockTables() {
			return GetRuleContext<LockTablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlockTablesContext unlockTables() {
			return GetRuleContext<UnlockTablesContext>(0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionStatementContext transactionStatement() {
		TransactionStatementContext _localctx = new TransactionStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_transactionStatement);
		try {
			State = 863;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 854;
				startTransaction();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 855;
				beginWork();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 856;
				commitWork();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 857;
				rollbackWork();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 858;
				savepointStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 859;
				rollbackStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 860;
				releaseStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 861;
				lockTables();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 862;
				unlockTables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChangeMasterContext changeMaster() {
			return GetRuleContext<ChangeMasterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationFilterContext changeReplicationFilter() {
			return GetRuleContext<ChangeReplicationFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PurgeBinaryLogsContext purgeBinaryLogs() {
			return GetRuleContext<PurgeBinaryLogsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetMasterContext resetMaster() {
			return GetRuleContext<ResetMasterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetSlaveContext resetSlave() {
			return GetRuleContext<ResetSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartSlaveContext startSlave() {
			return GetRuleContext<StartSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopSlaveContext stopSlave() {
			return GetRuleContext<StopSlaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartGroupReplicationContext startGroupReplication() {
			return GetRuleContext<StartGroupReplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopGroupReplicationContext stopGroupReplication() {
			return GetRuleContext<StopGroupReplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaStartTransactionContext xaStartTransaction() {
			return GetRuleContext<XaStartTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaEndTransactionContext xaEndTransaction() {
			return GetRuleContext<XaEndTransactionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaPrepareStatementContext xaPrepareStatement() {
			return GetRuleContext<XaPrepareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaCommitWorkContext xaCommitWork() {
			return GetRuleContext<XaCommitWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaRollbackWorkContext xaRollbackWork() {
			return GetRuleContext<XaRollbackWorkContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaRecoverWorkContext xaRecoverWork() {
			return GetRuleContext<XaRecoverWorkContext>(0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterReplicationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitReplicationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplicationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationStatementContext replicationStatement() {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_replicationStatement);
		try {
			State = 880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 865;
				changeMaster();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 866;
				changeReplicationFilter();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 867;
				purgeBinaryLogs();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 868;
				resetMaster();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 869;
				resetSlave();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 870;
				startSlave();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 871;
				stopSlave();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 872;
				startGroupReplication();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 873;
				stopGroupReplication();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 874;
				xaStartTransaction();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 875;
				xaEndTransaction();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 876;
				xaPrepareStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 877;
				xaCommitWork();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 878;
				xaRollbackWork();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 879;
				xaRecoverWork();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrepareStatementContext prepareStatement() {
			return GetRuleContext<PrepareStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeallocatePrepareContext deallocatePrepare() {
			return GetRuleContext<DeallocatePrepareContext>(0);
		}
		public PreparedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPreparedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPreparedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreparedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreparedStatementContext preparedStatement() {
		PreparedStatementContext _localctx = new PreparedStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_preparedStatement);
		try {
			State = 885;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPARE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 882;
				prepareStatement();
				}
				break;
			case EXECUTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 883;
				executeStatement();
				}
				break;
			case DROP:
			case DEALLOCATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 884;
				deallocatePrepare();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveStatementContext leaveStatement() {
			return GetRuleContext<LeaveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoopStatementContext loopStatement() {
			return GetRuleContext<LoopStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatStatementContext repeatStatement() {
			return GetRuleContext<RepeatStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterateStatementContext iterateStatement() {
			return GetRuleContext<IterateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorStatementContext cursorStatement() {
			return GetRuleContext<CursorStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DmlStatementContext dmlStatement() {
			return GetRuleContext<DmlStatementContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_compoundStatement);
		try {
			State = 900;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 887;
				blockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 888;
				caseStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 889;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 890;
				leaveStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 891;
				loopStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 892;
				repeatStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 893;
				whileStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 894;
				iterateStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 895;
				returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 896;
				cursorStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 897;
				withClause();
				State = 898;
				dmlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdministrationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserContext alterUser() {
			return GetRuleContext<AlterUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserContext createUser() {
			return GetRuleContext<CreateUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropUserContext dropUser() {
			return GetRuleContext<DropUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantStatementContext grantStatement() {
			return GetRuleContext<GrantStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantProxyContext grantProxy() {
			return GetRuleContext<GrantProxyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserContext renameUser() {
			return GetRuleContext<RenameUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeStatementContext revokeStatement() {
			return GetRuleContext<RevokeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeProxyContext revokeProxy() {
			return GetRuleContext<RevokeProxyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnalyzeTableContext analyzeTable() {
			return GetRuleContext<AnalyzeTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableContext checkTable() {
			return GetRuleContext<CheckTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChecksumTableContext checksumTable() {
			return GetRuleContext<ChecksumTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptimizeTableContext optimizeTable() {
			return GetRuleContext<OptimizeTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepairTableContext repairTable() {
			return GetRuleContext<RepairTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUdfunctionContext createUdfunction() {
			return GetRuleContext<CreateUdfunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallPluginContext installPlugin() {
			return GetRuleContext<InstallPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UninstallPluginContext uninstallPlugin() {
			return GetRuleContext<UninstallPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowStatementContext showStatement() {
			return GetRuleContext<ShowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinlogStatementContext binlogStatement() {
			return GetRuleContext<BinlogStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheIndexStatementContext cacheIndexStatement() {
			return GetRuleContext<CacheIndexStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushStatementContext flushStatement() {
			return GetRuleContext<FlushStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KillStatementContext killStatement() {
			return GetRuleContext<KillStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadIndexIntoCacheContext loadIndexIntoCache() {
			return GetRuleContext<LoadIndexIntoCacheContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetStatementContext resetStatement() {
			return GetRuleContext<ResetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShutdownStatementContext shutdownStatement() {
			return GetRuleContext<ShutdownStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainStatementContext explainStatement() {
			return GetRuleContext<ExplainStatementContext>(0);
		}
		public AdministrationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_administrationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAdministrationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAdministrationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdministrationStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdministrationStatementContext administrationStatement() {
		AdministrationStatementContext _localctx = new AdministrationStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_administrationStatement);
		try {
			State = 928;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 902;
				alterUser();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 903;
				createUser();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 904;
				dropUser();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 905;
				grantStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 906;
				grantProxy();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 907;
				renameUser();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 908;
				revokeStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 909;
				revokeProxy();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 910;
				analyzeTable();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 911;
				checkTable();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 912;
				checksumTable();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 913;
				optimizeTable();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 914;
				repairTable();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 915;
				createUdfunction();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 916;
				installPlugin();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 917;
				uninstallPlugin();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 918;
				setStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 919;
				showStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 920;
				binlogStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 921;
				cacheIndexStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 922;
				flushStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 923;
				killStatement();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 924;
				loadIndexIntoCache();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 925;
				resetStatement();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 926;
				shutdownStatement();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 927;
				explainStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UtilityStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleDescribeStatementContext simpleDescribeStatement() {
			return GetRuleContext<SimpleDescribeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullDescribeStatementContext fullDescribeStatement() {
			return GetRuleContext<FullDescribeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HelpStatementContext helpStatement() {
			return GetRuleContext<HelpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseStatementContext useStatement() {
			return GetRuleContext<UseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalStatementContext signalStatement() {
			return GetRuleContext<SignalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResignalStatementContext resignalStatement() {
			return GetRuleContext<ResignalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsStatementContext diagnosticsStatement() {
			return GetRuleContext<DiagnosticsStatementContext>(0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utilityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUtilityStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUtilityStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUtilityStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UtilityStatementContext utilityStatement() {
		UtilityStatementContext _localctx = new UtilityStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_utilityStatement);
		try {
			State = 937;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 930;
				simpleDescribeStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 931;
				fullDescribeStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 932;
				helpStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 933;
				useStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 934;
				signalStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 935;
				resignalStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 936;
				diagnosticsStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseContext : ParserRuleContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MariaDBParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MariaDBParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseContext createDatabase() {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(Context, State);
		EnterRule(_localctx, 26, RULE_createDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 939;
			Match(CREATE);
			State = 940;
			_localctx.dbFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_localctx.dbFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 942;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 941;
				ifNotExists();
				}
				break;
			}
			State = 944;
			uid();
			State = 948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8796428566528L) != 0) || _la==READ || _la==CHAR || _la==ENCRYPTION || _la==CHARSET) {
				{
				{
				State = 945;
				createDatabaseOption();
				}
				}
				State = 950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MariaDBParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MariaDBParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MariaDBParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MariaDBParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleExpressionContext scheduleExpression() {
			return GetRuleContext<ScheduleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MariaDBParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MariaDBParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MariaDBParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnableTypeContext enableType() {
			return GetRuleContext<EnableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MariaDBParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateEventContext createEvent() {
		CreateEventContext _localctx = new CreateEventContext(Context, State);
		EnterRule(_localctx, 28, RULE_createEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 951;
			Match(CREATE);
			State = 953;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 952;
				ownerStatement();
				}
			}

			State = 955;
			Match(EVENT);
			State = 957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 956;
				ifNotExists();
				}
				break;
			}
			State = 959;
			fullId();
			State = 960;
			Match(ON);
			State = 961;
			Match(SCHEDULE);
			State = 962;
			scheduleExpression();
			State = 969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 963;
				Match(ON);
				State = 964;
				Match(COMPLETION);
				State = 966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 965;
					Match(NOT);
					}
				}

				State = 968;
				Match(PRESERVE);
				}
			}

			State = 972;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				State = 971;
				enableType();
				}
			}

			State = 976;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 974;
				Match(COMMENT);
				State = 975;
				Match(STRING_LITERAL);
				}
			}

			State = 978;
			Match(DO);
			State = 979;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public IToken intimeAction;
		public IToken indexCategory;
		public IToken algType;
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrReplaceContext orReplace() {
			return GetRuleContext<OrReplaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALGORITHM() { return GetTokens(MariaDBParser.ALGORITHM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM(int i) {
			return GetToken(MariaDBParser.ALGORITHM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCK() { return GetTokens(MariaDBParser.LOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK(int i) {
			return GetToken(MariaDBParser.LOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MariaDBParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MariaDBParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MariaDBParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MariaDBParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MariaDBParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MariaDBParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MariaDBParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INPLACE() { return GetTokens(MariaDBParser.INPLACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE(int i) {
			return GetToken(MariaDBParser.INPLACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY() { return GetTokens(MariaDBParser.COPY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY(int i) {
			return GetToken(MariaDBParser.COPY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NOCOPY() { return GetTokens(MariaDBParser.NOCOPY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCOPY(int i) {
			return GetToken(MariaDBParser.NOCOPY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INSTANT() { return GetTokens(MariaDBParser.INSTANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANT(int i) {
			return GetToken(MariaDBParser.INSTANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NONE() { return GetTokens(MariaDBParser.NONE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE(int i) {
			return GetToken(MariaDBParser.NONE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHARED() { return GetTokens(MariaDBParser.SHARED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED(int i) {
			return GetToken(MariaDBParser.SHARED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLUSIVE() { return GetTokens(MariaDBParser.EXCLUSIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE(int i) {
			return GetToken(MariaDBParser.EXCLUSIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(Context, State);
		EnterRule(_localctx, 30, RULE_createIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 981;
			Match(CREATE);
			State = 983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 982;
				orReplace();
				}
			}

			State = 986;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				State = 985;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 989;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) {
				{
				State = 988;
				_localctx.indexCategory = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL || _la==UNIQUE) ) {
					_localctx.indexCategory = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 991;
			Match(INDEX);
			State = 993;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 992;
				ifNotExists();
				}
				break;
			}
			State = 995;
			uid();
			State = 997;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 996;
				indexType();
				}
			}

			State = 999;
			Match(ON);
			State = 1000;
			tableName();
			State = 1001;
			indexColumnNames();
			State = 1003;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 1002;
				waitNowaitClause();
				}
			}

			State = 1008;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
				{
				{
				State = 1005;
				indexOption();
				}
				}
				State = 1010;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1023;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 1021;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALGORITHM:
						{
						State = 1011;
						Match(ALGORITHM);
						State = 1013;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 1012;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 1015;
						_localctx.algType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT || _la==NOCOPY) ) {
							_localctx.algType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case LOCK:
						{
						State = 1016;
						Match(LOCK);
						State = 1018;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 1017;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 1020;
						_localctx.lockType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							_localctx.lockType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 1025;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,38,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateLogfileGroupContext : ParserRuleContext {
		public IToken undoFile;
		public FileSizeLiteralContext initSize;
		public FileSizeLiteralContext undoSize;
		public FileSizeLiteralContext redoSize;
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MariaDBParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MariaDBParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MariaDBParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MariaDBParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MariaDBParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MariaDBParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MariaDBParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MariaDBParser.UNDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MariaDBParser.REDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MariaDBParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MariaDBParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MariaDBParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext[] fileSizeLiteral() {
			return GetRuleContexts<FileSizeLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral(int i) {
			return GetRuleContext<FileSizeLiteralContext>(i);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateLogfileGroupContext createLogfileGroup() {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(Context, State);
		EnterRule(_localctx, 32, RULE_createLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1026;
			Match(CREATE);
			State = 1027;
			Match(LOGFILE);
			State = 1028;
			Match(GROUP);
			State = 1029;
			uid();
			State = 1030;
			Match(ADD);
			State = 1031;
			Match(UNDOFILE);
			State = 1032;
			_localctx.undoFile = Match(STRING_LITERAL);
			State = 1038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 1033;
				Match(INITIAL_SIZE);
				State = 1035;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1034;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1037;
				_localctx.initSize = fileSizeLiteral();
				}
			}

			State = 1045;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNDO_BUFFER_SIZE) {
				{
				State = 1040;
				Match(UNDO_BUFFER_SIZE);
				State = 1042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1041;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1044;
				_localctx.undoSize = fileSizeLiteral();
				}
			}

			State = 1052;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REDO_BUFFER_SIZE) {
				{
				State = 1047;
				Match(REDO_BUFFER_SIZE);
				State = 1049;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1048;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1051;
				_localctx.redoSize = fileSizeLiteral();
				}
			}

			State = 1059;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NODEGROUP) {
				{
				State = 1054;
				Match(NODEGROUP);
				State = 1056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1055;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1058;
				uid();
				}
			}

			State = 1062;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 1061;
				Match(WAIT);
				}
			}

			State = 1069;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 1064;
				Match(COMMENT);
				State = 1066;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1065;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1068;
				_localctx.comment = Match(STRING_LITERAL);
				}
			}

			State = 1071;
			Match(ENGINE);
			State = 1073;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 1072;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 1075;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MariaDBParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrReplaceContext orReplace() {
			return GetRuleContext<OrReplaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(Context, State);
		EnterRule(_localctx, 34, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1077;
			Match(CREATE);
			State = 1079;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1078;
				orReplace();
				}
			}

			State = 1082;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1081;
				ownerStatement();
				}
			}

			State = 1084;
			Match(PROCEDURE);
			State = 1085;
			fullId();
			State = 1086;
			Match(LR_BRACKET);
			State = 1088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 439400445314603217L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
				{
				State = 1087;
				procedureParameter();
				}
			}

			State = 1094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1090;
				Match(COMMA);
				State = 1091;
				procedureParameter();
				}
				}
				State = 1096;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1097;
			Match(RR_BRACKET);
			State = 1101;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1098;
					routineOption();
					}
					} 
				}
				State = 1103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
			}
			State = 1104;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MariaDBParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MariaDBParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrReplaceContext orReplace() {
			return GetRuleContext<OrReplaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(MariaDBParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateFunctionContext createFunction() {
		CreateFunctionContext _localctx = new CreateFunctionContext(Context, State);
		EnterRule(_localctx, 36, RULE_createFunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1106;
			Match(CREATE);
			State = 1108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1107;
				orReplace();
				}
			}

			State = 1111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1110;
				ownerStatement();
				}
			}

			State = 1114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGGREGATE) {
				{
				State = 1113;
				Match(AGGREGATE);
				}
			}

			State = 1116;
			Match(FUNCTION);
			State = 1118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 1117;
				ifNotExists();
				}
				break;
			}
			State = 1120;
			fullId();
			State = 1121;
			Match(LR_BRACKET);
			State = 1123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
				{
				State = 1122;
				functionParameter();
				}
			}

			State = 1129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1125;
				Match(COMMA);
				State = 1126;
				functionParameter();
				}
				}
				State = 1131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1132;
			Match(RR_BRACKET);
			State = 1133;
			Match(RETURNS);
			State = 1134;
			dataType();
			State = 1138;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1135;
					routineOption();
					}
					} 
				}
				State = 1140;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			State = 1143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER:
			case ANALYZE:
			case ATTRIBUTE:
			case BODY:
			case BUCKETS:
			case CALL:
			case CHANGE:
			case CHECK:
			case CONDITION:
			case CREATE:
			case CURRENT:
			case CURRENT_ROLE:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DIAGNOSTICS:
			case DROP:
			case EMPTY:
			case EXCEPT:
			case EXPLAIN:
			case GET:
			case GRANT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case KILL:
			case LATERAL:
			case LEFT:
			case LOAD:
			case LOCK:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIMIZE:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case PACKAGE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case RIGHT:
			case SCHEMA:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case SKIP_:
			case STACKED:
			case STATEMENT:
			case UNLOCK:
			case UPDATE:
			case USE:
			case VALUES:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTED:
			case ENCRYPTION:
			case ENCRYPTION_KEY_ID:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOCALES:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUERY_RESPONSE_TIME:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLAVES:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case TYPES:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WSREP_MEMBERSHIP:
			case WSREP_STATUS:
			case X509:
			case XA:
			case XML:
			case YES:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case USER_STATISTICS:
			case CLIENT_STATISTICS:
			case INDEX_STATISTICS:
			case TABLE_STATISTICS:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICAS:
			case REPLICATION_MASTER_ADMIN:
			case MONITOR:
			case READ_ONLY:
			case REPLAY:
			case MOD:
			case LR_BRACKET:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
				{
				State = 1141;
				routineBody();
				}
				break;
			case RETURN:
				{
				State = 1142;
				returnStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MariaDBParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext[] roleName() {
			return GetRuleContexts<RoleNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext roleName(int i) {
			return GetRuleContext<RoleNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoleContext createRole() {
		CreateRoleContext _localctx = new CreateRoleContext(Context, State);
		EnterRule(_localctx, 38, RULE_createRole);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1145;
			Match(CREATE);
			State = 1146;
			Match(ROLE);
			State = 1148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 1147;
				ifNotExists();
				}
				break;
			}
			State = 1150;
			roleName();
			State = 1155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1151;
				Match(COMMA);
				State = 1152;
				roleName();
				}
				}
				State = 1157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateServerContext : ParserRuleContext {
		public IToken wrapperName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MariaDBParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MariaDBParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MariaDBParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(MariaDBParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MariaDBParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MariaDBParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateServerContext createServer() {
		CreateServerContext _localctx = new CreateServerContext(Context, State);
		EnterRule(_localctx, 40, RULE_createServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1158;
			Match(CREATE);
			State = 1159;
			Match(SERVER);
			State = 1160;
			uid();
			State = 1161;
			Match(FOREIGN);
			State = 1162;
			Match(DATA);
			State = 1163;
			Match(WRAPPER);
			State = 1164;
			_localctx.wrapperName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==MYSQL || _la==STRING_LITERAL) ) {
				_localctx.wrapperName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1165;
			Match(OPTIONS);
			State = 1166;
			Match(LR_BRACKET);
			State = 1167;
			serverOption();
			State = 1172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1168;
				Match(COMMA);
				State = 1169;
				serverOption();
				}
				}
				State = 1174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1175;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
	 
		public CreateTableContext() { }
		public virtual void CopyFrom(CreateTableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CopyCreateTableContext : CreateTableContext {
		public TableNameContext parenthesisTable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MariaDBParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrReplaceContext orReplace() {
			return GetRuleContext<OrReplaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MariaDBParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CopyCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCopyCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCopyCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCopyCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ColumnCreateTableContext : CreateTableContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionsContext createDefinitions() {
			return GetRuleContext<CreateDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrReplaceContext orReplace() {
			return GetRuleContext<OrReplaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MariaDBParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public ColumnCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterColumnCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitColumnCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QueryCreateTableContext : CreateTableContext {
		public IToken keyViolate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrReplaceContext orReplace() {
			return GetRuleContext<OrReplaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MariaDBParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionsContext createDefinitions() {
			return GetRuleContext<CreateDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MariaDBParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MariaDBParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public QueryCreateTableContext(CreateTableContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterQueryCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitQueryCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryCreateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(Context, State);
		EnterRule(_localctx, 42, RULE_createTable);
		int _la;
		try {
			int _alt;
			State = 1264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				_localctx = new CopyCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1177;
				Match(CREATE);
				State = 1179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 1178;
					orReplace();
					}
				}

				State = 1182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1181;
					Match(TEMPORARY);
					}
				}

				State = 1184;
				Match(TABLE);
				State = 1186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 1185;
					ifNotExists();
					}
					break;
				}
				State = 1188;
				tableName();
				State = 1196;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LIKE:
					{
					State = 1189;
					Match(LIKE);
					State = 1190;
					tableName();
					}
					break;
				case LR_BRACKET:
					{
					State = 1191;
					Match(LR_BRACKET);
					State = 1192;
					Match(LIKE);
					State = 1193;
					((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
					State = 1194;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new QueryCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1198;
				Match(CREATE);
				State = 1200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 1199;
					orReplace();
					}
				}

				State = 1203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1202;
					Match(TEMPORARY);
					}
				}

				State = 1205;
				Match(TABLE);
				State = 1207;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 1206;
					ifNotExists();
					}
					break;
				}
				State = 1209;
				tableName();
				State = 1211;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
				case 1:
					{
					State = 1210;
					createDefinitions();
					}
					break;
				}
				State = 1223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & 36028797019095045L) != 0) || ((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & 8796093030401L) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & 9288751809495053L) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & -9221120237041090521L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 2366149022974977L) != 0) || ((((_la - 608)) & ~0x3f) == 0 && ((1L << (_la - 608)) & 9218347631640577L) != 0) || _la==CHARSET || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==STRING_LITERAL) {
					{
					State = 1213;
					tableOption();
					State = 1220;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (((((_la - 26)) & ~0x3f) == 0 && ((1L << (_la - 26)) & 36028797019095045L) != 0) || ((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & 8796093030401L) != 0) || ((((_la - 344)) & ~0x3f) == 0 && ((1L << (_la - 344)) & 9288751809495053L) != 0) || ((((_la - 408)) & ~0x3f) == 0 && ((1L << (_la - 408)) & -9221120237041090521L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 2366149022974977L) != 0) || ((((_la - 608)) & ~0x3f) == 0 && ((1L << (_la - 608)) & 9218347631640577L) != 0) || _la==CHARSET || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==COMMA || _la==STRING_LITERAL) {
						{
						{
						State = 1215;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 1214;
							Match(COMMA);
							}
						}

						State = 1217;
						tableOption();
						}
						}
						State = 1222;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1225;
					partitionDefinitions();
					}
				}

				State = 1229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE || _la==REPLACE) {
					{
					State = 1228;
					((QueryCreateTableContext)_localctx).keyViolate = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==IGNORE || _la==REPLACE) ) {
						((QueryCreateTableContext)_localctx).keyViolate = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 1231;
					Match(AS);
					}
				}

				State = 1234;
				selectStatement();
				}
				break;
			case 3:
				_localctx = new ColumnCreateTableContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1236;
				Match(CREATE);
				State = 1238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OR) {
					{
					State = 1237;
					orReplace();
					}
				}

				State = 1241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TEMPORARY) {
					{
					State = 1240;
					Match(TEMPORARY);
					}
				}

				State = 1243;
				Match(TABLE);
				State = 1245;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
				case 1:
					{
					State = 1244;
					ifNotExists();
					}
					break;
				}
				State = 1247;
				tableName();
				State = 1248;
				createDefinitions();
				State = 1259;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 1249;
					tableOption();
					State = 1256;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 1251;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==COMMA) {
								{
								State = 1250;
								Match(COMMA);
								}
							}

							State = 1253;
							tableOption();
							}
							} 
						}
						State = 1258;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
					}
					}
					break;
				}
				State = 1262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 1261;
					partitionDefinitions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceInnodbContext : ParserRuleContext {
		public IToken datafile;
		public FileSizeLiteralContext fileBlockSize;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MariaDBParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MariaDBParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MariaDBParser.FILE_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MariaDBParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespaceInnodb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateTablespaceInnodb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateTablespaceInnodb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTablespaceInnodb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceInnodbContext createTablespaceInnodb() {
		CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(Context, State);
		EnterRule(_localctx, 44, RULE_createTablespaceInnodb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1266;
			Match(CREATE);
			State = 1267;
			Match(TABLESPACE);
			State = 1268;
			uid();
			State = 1269;
			Match(ADD);
			State = 1270;
			Match(DATAFILE);
			State = 1271;
			_localctx.datafile = Match(STRING_LITERAL);
			State = 1275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FILE_BLOCK_SIZE) {
				{
				State = 1272;
				Match(FILE_BLOCK_SIZE);
				State = 1273;
				Match(EQUAL_SYMBOL);
				State = 1274;
				_localctx.fileBlockSize = fileSizeLiteral();
				}
			}

			State = 1282;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE) {
				{
				State = 1277;
				Match(ENGINE);
				State = 1279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1278;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1281;
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceNdbContext : ParserRuleContext {
		public IToken datafile;
		public FileSizeLiteralContext extentSize;
		public FileSizeLiteralContext initialSize;
		public FileSizeLiteralContext autoextendSize;
		public FileSizeLiteralContext maxSize;
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MariaDBParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MariaDBParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MariaDBParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MariaDBParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MariaDBParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MariaDBParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MariaDBParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MariaDBParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE() { return GetToken(MariaDBParser.EXTENT_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MariaDBParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MariaDBParser.AUTOEXTEND_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE() { return GetToken(MariaDBParser.MAX_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MariaDBParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MariaDBParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MariaDBParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext[] fileSizeLiteral() {
			return GetRuleContexts<FileSizeLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral(int i) {
			return GetRuleContext<FileSizeLiteralContext>(i);
		}
		public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespaceNdb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateTablespaceNdb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateTablespaceNdb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTablespaceNdb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceNdbContext createTablespaceNdb() {
		CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(Context, State);
		EnterRule(_localctx, 46, RULE_createTablespaceNdb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1284;
			Match(CREATE);
			State = 1285;
			Match(TABLESPACE);
			State = 1286;
			uid();
			State = 1287;
			Match(ADD);
			State = 1288;
			Match(DATAFILE);
			State = 1289;
			_localctx.datafile = Match(STRING_LITERAL);
			State = 1290;
			Match(USE);
			State = 1291;
			Match(LOGFILE);
			State = 1292;
			Match(GROUP);
			State = 1293;
			uid();
			State = 1299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENT_SIZE) {
				{
				State = 1294;
				Match(EXTENT_SIZE);
				State = 1296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1295;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1298;
				_localctx.extentSize = fileSizeLiteral();
				}
			}

			State = 1306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 1301;
				Match(INITIAL_SIZE);
				State = 1303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1302;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1305;
				_localctx.initialSize = fileSizeLiteral();
				}
			}

			State = 1313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AUTOEXTEND_SIZE) {
				{
				State = 1308;
				Match(AUTOEXTEND_SIZE);
				State = 1310;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1309;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1312;
				_localctx.autoextendSize = fileSizeLiteral();
				}
			}

			State = 1320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MAX_SIZE) {
				{
				State = 1315;
				Match(MAX_SIZE);
				State = 1317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1316;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1319;
				_localctx.maxSize = fileSizeLiteral();
				}
			}

			State = 1327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NODEGROUP) {
				{
				State = 1322;
				Match(NODEGROUP);
				State = 1324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1323;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1326;
				uid();
				}
			}

			State = 1330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 1329;
				Match(WAIT);
				}
			}

			State = 1337;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 1332;
				Match(COMMENT);
				State = 1334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1333;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1336;
				_localctx.comment = Match(STRING_LITERAL);
				}
			}

			State = 1339;
			Match(ENGINE);
			State = 1341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 1340;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 1343;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTriggerContext : ParserRuleContext {
		public FullIdContext thisTrigger;
		public IToken triggerTime;
		public IToken triggerEvent;
		public IToken triggerPlace;
		public FullIdContext otherTrigger;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MariaDBParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH() { return GetToken(MariaDBParser.EACH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MariaDBParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(MariaDBParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MariaDBParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MariaDBParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MariaDBParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MariaDBParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrReplaceContext orReplace() {
			return GetRuleContext<OrReplaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS() { return GetToken(MariaDBParser.FOLLOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES() { return GetToken(MariaDBParser.PRECEDES, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTriggerContext createTrigger() {
		CreateTriggerContext _localctx = new CreateTriggerContext(Context, State);
		EnterRule(_localctx, 48, RULE_createTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1345;
			Match(CREATE);
			State = 1347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1346;
				orReplace();
				}
			}

			State = 1350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1349;
				ownerStatement();
				}
			}

			State = 1352;
			Match(TRIGGER);
			State = 1353;
			_localctx.thisTrigger = fullId();
			State = 1354;
			_localctx.triggerTime = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BEFORE || _la==AFTER) ) {
				_localctx.triggerTime = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1355;
			_localctx.triggerEvent = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
				_localctx.triggerEvent = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1356;
			Match(ON);
			State = 1357;
			tableName();
			State = 1358;
			Match(FOR);
			State = 1359;
			Match(EACH);
			State = 1360;
			Match(ROW);
			State = 1363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 1361;
				_localctx.triggerPlace = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
					_localctx.triggerPlace = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1362;
				_localctx.otherTrigger = fullId();
				}
				break;
			}
			State = 1365;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionsContext commonTableExpressions() {
			return GetRuleContext<CommonTableExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(MariaDBParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 50, RULE_withClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1367;
			Match(WITH);
			State = 1369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				{
				State = 1368;
				Match(RECURSIVE);
				}
				break;
			}
			State = 1371;
			commonTableExpressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CteNameContext cteName() {
			return GetRuleContext<CteNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DmlStatementContext dmlStatement() {
			return GetRuleContext<DmlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CteColumnNameContext[] cteColumnName() {
			return GetRuleContexts<CteColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CteColumnNameContext cteColumnName(int i) {
			return GetRuleContext<CteColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionsContext commonTableExpressions() {
			return GetRuleContext<CommonTableExpressionsContext>(0);
		}
		public CommonTableExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCommonTableExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCommonTableExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommonTableExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionsContext commonTableExpressions() {
		CommonTableExpressionsContext _localctx = new CommonTableExpressionsContext(Context, State);
		EnterRule(_localctx, 52, RULE_commonTableExpressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1373;
			cteName();
			State = 1385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 1374;
				Match(LR_BRACKET);
				State = 1375;
				cteColumnName();
				State = 1380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1376;
					Match(COMMA);
					State = 1377;
					cteColumnName();
					}
					}
					State = 1382;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1383;
				Match(RR_BRACKET);
				}
			}

			State = 1387;
			Match(AS);
			State = 1388;
			Match(LR_BRACKET);
			State = 1389;
			dmlStatement();
			State = 1390;
			Match(RR_BRACKET);
			State = 1393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1391;
				Match(COMMA);
				State = 1392;
				commonTableExpressions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CteNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CteNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cteName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCteName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCteName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCteName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CteNameContext cteName() {
		CteNameContext _localctx = new CteNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_cteName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1395;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CteColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CteColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cteColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCteColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCteColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCteColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CteColumnNameContext cteColumnName() {
		CteColumnNameContext _localctx = new CteColumnNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_cteColumnName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1397;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateViewContext : ParserRuleContext {
		public IToken algType;
		public IToken secContext;
		public IToken checkOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MariaDBParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrReplaceContext orReplace() {
			return GetRuleContext<OrReplaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MariaDBParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MariaDBParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MariaDBParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MariaDBParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MariaDBParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MariaDBParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MariaDBParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MariaDBParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MariaDBParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MariaDBParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MariaDBParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MariaDBParser.LOCAL, 0); }
		public CreateViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateViewContext createView() {
		CreateViewContext _localctx = new CreateViewContext(Context, State);
		EnterRule(_localctx, 58, RULE_createView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1399;
			Match(CREATE);
			State = 1401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1400;
				orReplace();
				}
			}

			State = 1406;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM) {
				{
				State = 1403;
				Match(ALGORITHM);
				State = 1404;
				Match(EQUAL_SYMBOL);
				State = 1405;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 1408;
				ownerStatement();
				}
			}

			State = 1414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL) {
				{
				State = 1411;
				Match(SQL);
				State = 1412;
				Match(SECURITY);
				State = 1413;
				_localctx.secContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					_localctx.secContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1416;
			Match(VIEW);
			State = 1417;
			fullId();
			State = 1422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 1418;
				Match(LR_BRACKET);
				State = 1419;
				uidList();
				State = 1420;
				Match(RR_BRACKET);
				}
			}

			State = 1424;
			Match(AS);
			State = 1444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				{
				State = 1425;
				Match(LR_BRACKET);
				State = 1427;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 1426;
					withClause();
					}
				}

				State = 1429;
				selectStatement();
				State = 1430;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				{
				State = 1433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 1432;
					withClause();
					}
				}

				State = 1435;
				selectStatement();
				State = 1442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 1436;
					Match(WITH);
					State = 1438;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CASCADED || _la==LOCAL) {
						{
						State = 1437;
						_localctx.checkOption = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==CASCADED || _la==LOCAL) ) {
							_localctx.checkOption = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 1440;
					Match(CHECK);
					State = 1441;
					Match(OPTION);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(MariaDBParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrReplaceContext orReplace() {
			return GetRuleContext<OrReplaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MariaDBParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceSpecContext[] sequenceSpec() {
			return GetRuleContexts<SequenceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceSpecContext sequenceSpec(int i) {
			return GetRuleContext<SequenceSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		public CreateSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateSequenceContext createSequence() {
		CreateSequenceContext _localctx = new CreateSequenceContext(Context, State);
		EnterRule(_localctx, 60, RULE_createSequence);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1446;
			Match(CREATE);
			State = 1448;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 1447;
				orReplace();
				}
			}

			State = 1451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY) {
				{
				State = 1450;
				Match(TEMPORARY);
				}
			}

			State = 1453;
			Match(SEQUENCE);
			State = 1455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				{
				State = 1454;
				ifNotExists();
				}
				break;
			}
			State = 1457;
			fullId();
			State = 1462;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 1460;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
					case 1:
						{
						State = 1458;
						sequenceSpec();
						}
						break;
					case 2:
						{
						State = 1459;
						tableOption();
						}
						break;
					}
					} 
				}
				State = 1464;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,127,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(MariaDBParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MariaDBParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(MariaDBParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MariaDBParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOMINVALUE() { return GetToken(MariaDBParser.NOMINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(MariaDBParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOMAXVALUE() { return GetToken(MariaDBParser.NOMAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MariaDBParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MariaDBParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCACHE() { return GetToken(MariaDBParser.NOCACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(MariaDBParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCYCLE() { return GetToken(MariaDBParser.NOCYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(MariaDBParser.RESTART, 0); }
		public SequenceSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSequenceSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSequenceSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSequenceSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequenceSpecContext sequenceSpec() {
		SequenceSpecContext _localctx = new SequenceSpecContext(Context, State);
		EnterRule(_localctx, 62, RULE_sequenceSpec);
		int _la;
		try {
			State = 1504;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1465;
				Match(INCREMENT);
				State = 1467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BY || _la==EQUAL_SYMBOL) {
					{
					State = 1466;
					_la = TokenStream.LA(1);
					if ( !(_la==BY || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1469;
				decimalLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1470;
				Match(MINVALUE);
				State = 1472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1471;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1474;
				decimalLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1475;
				Match(NO);
				State = 1476;
				Match(MINVALUE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1477;
				Match(NOMINVALUE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1478;
				Match(MAXVALUE);
				State = 1480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1479;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1482;
				decimalLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1483;
				Match(NO);
				State = 1484;
				Match(MAXVALUE);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1485;
				Match(NOMAXVALUE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1486;
				Match(START);
				State = 1488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==EQUAL_SYMBOL) {
					{
					State = 1487;
					_la = TokenStream.LA(1);
					if ( !(_la==WITH || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1490;
				decimalLiteral();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1491;
				Match(CACHE);
				State = 1493;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1492;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1495;
				decimalLiteral();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1496;
				Match(NOCACHE);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1497;
				Match(CYCLE);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1498;
				Match(NOCYCLE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1499;
				Match(RESTART);
				State = 1501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==EQUAL_SYMBOL) {
					{
					State = 1500;
					_la = TokenStream.LA(1);
					if ( !(_la==WITH || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1503;
				decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MariaDBParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MariaDBParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MariaDBParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(MariaDBParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MariaDBParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MariaDBParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MariaDBParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MariaDBParser.ONE_DECIMAL, 0); }
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabaseOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabaseOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabaseOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabaseOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseOptionContext createDatabaseOption() {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(Context, State);
		EnterRule(_localctx, 64, RULE_createDatabaseOption);
		int _la;
		try {
			State = 1539;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1506;
					Match(DEFAULT);
					}
				}

				State = 1509;
				charSet();
				State = 1511;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1510;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1515;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 1513;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 1514;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1518;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1517;
					Match(DEFAULT);
					}
				}

				State = 1520;
				Match(COLLATE);
				State = 1522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1521;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1524;
				collationName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1525;
					Match(DEFAULT);
					}
				}

				State = 1528;
				Match(ENCRYPTION);
				State = 1530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1529;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1532;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1533;
				Match(READ);
				State = 1534;
				Match(ONLY);
				State = 1536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1535;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1538;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MariaDBParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MariaDBParser.CHARSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MariaDBParser.CHAR, 0); }
		public CharSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCharSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCharSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharSetContext charSet() {
		CharSetContext _localctx = new CharSetContext(Context, State);
		EnterRule(_localctx, 66, RULE_charSet);
		try {
			State = 1546;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1541;
				Match(CHARACTER);
				State = 1542;
				Match(SET);
				}
				break;
			case CHARSET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1543;
				Match(CHARSET);
				}
				break;
			case CHAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1544;
				Match(CHAR);
				State = 1545;
				Match(SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrentUserExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(MariaDBParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public CurrentUserExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currentUserExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCurrentUserExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCurrentUserExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentUserExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrentUserExpressionContext currentUserExpression() {
		CurrentUserExpressionContext _localctx = new CurrentUserExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_currentUserExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1548;
			Match(CURRENT_USER);
			State = 1551;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				{
				State = 1549;
				Match(LR_BRACKET);
				State = 1550;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MariaDBParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurrentUserExpressionContext currentUserExpression() {
			return GetRuleContext<CurrentUserExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(MariaDBParser.CURRENT_ROLE, 0); }
		public OwnerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterOwnerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitOwnerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OwnerStatementContext ownerStatement() {
		OwnerStatementContext _localctx = new OwnerStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_ownerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1553;
			Match(DEFINER);
			State = 1554;
			Match(EQUAL_SYMBOL);
			State = 1558;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				{
				State = 1555;
				userName();
				}
				break;
			case 2:
				{
				State = 1556;
				currentUserExpression();
				}
				break;
			case 3:
				{
				State = 1557;
				Match(CURRENT_ROLE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScheduleExpressionContext : ParserRuleContext {
		public ScheduleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scheduleExpression; } }
	 
		public ScheduleExpressionContext() { }
		public virtual void CopyFrom(ScheduleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PreciseScheduleContext : ScheduleExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(MariaDBParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext timestampValue() {
			return GetRuleContext<TimestampValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext[] intervalExpr() {
			return GetRuleContexts<IntervalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext intervalExpr(int i) {
			return GetRuleContext<IntervalExprContext>(i);
		}
		public PreciseScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPreciseSchedule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPreciseSchedule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreciseSchedule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalScheduleContext : ScheduleExpressionContext {
		public TimestampValueContext startTimestamp;
		public IntervalExprContext _intervalExpr;
		public IList<IntervalExprContext> _startIntervals = new List<IntervalExprContext>();
		public TimestampValueContext endTimestamp;
		public IList<IntervalExprContext> _endIntervals = new List<IntervalExprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(MariaDBParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS() { return GetToken(MariaDBParser.STARTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS() { return GetToken(MariaDBParser.ENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext[] timestampValue() {
			return GetRuleContexts<TimestampValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext timestampValue(int i) {
			return GetRuleContext<TimestampValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext[] intervalExpr() {
			return GetRuleContexts<IntervalExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExprContext intervalExpr(int i) {
			return GetRuleContext<IntervalExprContext>(i);
		}
		public IntervalScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIntervalSchedule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIntervalSchedule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalSchedule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScheduleExpressionContext scheduleExpression() {
		ScheduleExpressionContext _localctx = new ScheduleExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_scheduleExpression);
		int _la;
		try {
			State = 1594;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				_localctx = new PreciseScheduleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1560;
				Match(AT);
				State = 1561;
				timestampValue();
				State = 1565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==PLUS) {
					{
					{
					State = 1562;
					intervalExpr();
					}
					}
					State = 1567;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case EVERY:
				_localctx = new IntervalScheduleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1568;
				Match(EVERY);
				State = 1571;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,148,Context) ) {
				case 1:
					{
					State = 1569;
					decimalLiteral();
					}
					break;
				case 2:
					{
					State = 1570;
					expression(0);
					}
					break;
				}
				State = 1573;
				intervalType();
				State = 1582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTS) {
					{
					State = 1574;
					Match(STARTS);
					State = 1575;
					((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
					State = 1579;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==PLUS) {
						{
						{
						State = 1576;
						((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx)._startIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
						}
						}
						State = 1581;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 1592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENDS) {
					{
					State = 1584;
					Match(ENDS);
					State = 1585;
					((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
					State = 1589;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==PLUS) {
						{
						{
						State = 1586;
						((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
						((IntervalScheduleContext)_localctx)._endIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
						}
						}
						State = 1591;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimestampValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MariaDBParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestampValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTimestampValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTimestampValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestampValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimestampValueContext timestampValue() {
		TimestampValueContext _localctx = new TimestampValueContext(Context, State);
		EnterRule(_localctx, 74, RULE_timestampValue);
		try {
			State = 1600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1596;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1597;
				stringLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1598;
				decimalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1599;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MariaDBParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MariaDBParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIntervalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIntervalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalExprContext intervalExpr() {
		IntervalExprContext _localctx = new IntervalExprContext(Context, State);
		EnterRule(_localctx, 76, RULE_intervalExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1602;
			Match(PLUS);
			State = 1603;
			Match(INTERVAL);
			State = 1606;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				{
				State = 1604;
				decimalLiteral();
				}
				break;
			case 2:
				{
				State = 1605;
				expression(0);
				}
				break;
			}
			State = 1608;
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeBaseContext intervalTypeBase() {
			return GetRuleContext<IntervalTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MariaDBParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_MONTH() { return GetToken(MariaDBParser.YEAR_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_HOUR() { return GetToken(MariaDBParser.DAY_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MINUTE() { return GetToken(MariaDBParser.DAY_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SECOND() { return GetToken(MariaDBParser.DAY_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MINUTE() { return GetToken(MariaDBParser.HOUR_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SECOND() { return GetToken(MariaDBParser.HOUR_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SECOND() { return GetToken(MariaDBParser.MINUTE_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_MICROSECOND() { return GetToken(MariaDBParser.SECOND_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_MICROSECOND() { return GetToken(MariaDBParser.MINUTE_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MICROSECOND() { return GetToken(MariaDBParser.HOUR_MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MICROSECOND() { return GetToken(MariaDBParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIntervalType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIntervalType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTypeContext intervalType() {
		IntervalTypeContext _localctx = new IntervalTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_intervalType);
		try {
			State = 1623;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1610;
				intervalTypeBase();
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1611;
				Match(YEAR);
				}
				break;
			case YEAR_MONTH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1612;
				Match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1613;
				Match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1614;
				Match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1615;
				Match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1616;
				Match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1617;
				Match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1618;
				Match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1619;
				Match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1620;
				Match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1621;
				Match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1622;
				Match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MariaDBParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MariaDBParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MariaDBParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterEnableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitEnableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableTypeContext enableType() {
		EnableTypeContext _localctx = new EnableTypeContext(Context, State);
		EnterRule(_localctx, 80, RULE_enableType);
		try {
			State = 1630;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1625;
				Match(ENABLE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1626;
				Match(DISABLE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1627;
				Match(DISABLE);
				State = 1628;
				Match(ON);
				State = 1629;
				Match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MariaDBParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE() { return GetToken(MariaDBParser.BTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MariaDBParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE() { return GetToken(MariaDBParser.RTREE, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIndexType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIndexType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeContext indexType() {
		IndexTypeContext _localctx = new IndexTypeContext(Context, State);
		EnterRule(_localctx, 82, RULE_indexType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632;
			Match(USING);
			State = 1633;
			_la = TokenStream.LA(1);
			if ( !(_la==BTREE || _la==HASH || _la==RTREE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MariaDBParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(MariaDBParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MariaDBParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MariaDBParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MariaDBParser.INVISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE() { return GetToken(MariaDBParser.ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return GetToken(MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERING() { return GetToken(MariaDBParser.CLUSTERING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES() { return GetToken(MariaDBParser.YES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MariaDBParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORED() { return GetToken(MariaDBParser.IGNORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexOptionContext indexOption() {
		IndexOptionContext _localctx = new IndexOptionContext(Context, State);
		EnterRule(_localctx, 84, RULE_indexOption);
		int _la;
		try {
			State = 1665;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KEY_BLOCK_SIZE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1635;
				Match(KEY_BLOCK_SIZE);
				State = 1637;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1636;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1639;
				fileSizeLiteral();
				}
				break;
			case USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1640;
				indexType();
				}
				break;
			case WITH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1641;
				Match(WITH);
				State = 1642;
				Match(PARSER);
				State = 1643;
				uid();
				}
				break;
			case COMMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1644;
				Match(COMMENT);
				State = 1645;
				Match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
			case VISIBLE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1646;
				_la = TokenStream.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case ENGINE_ATTRIBUTE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1647;
				Match(ENGINE_ATTRIBUTE);
				State = 1649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1648;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1651;
				Match(STRING_LITERAL);
				}
				break;
			case SECONDARY_ENGINE_ATTRIBUTE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1652;
				Match(SECONDARY_ENGINE_ATTRIBUTE);
				State = 1654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1653;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1656;
				Match(STRING_LITERAL);
				}
				break;
			case CLUSTERING:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1657;
				Match(CLUSTERING);
				State = 1658;
				Match(EQUAL_SYMBOL);
				State = 1659;
				_la = TokenStream.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case IGNORED:
			case NOT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1663;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IGNORED:
					{
					State = 1660;
					Match(IGNORED);
					}
					break;
				case NOT:
					{
					State = 1661;
					Match(NOT);
					State = 1662;
					Match(IGNORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public IToken direction;
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MariaDBParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(MariaDBParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT() { return GetToken(MariaDBParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 86, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 35184372088849L) != 0)) {
				{
				State = 1667;
				_localctx.direction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 35184372088849L) != 0)) ) {
					_localctx.direction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1670;
			uid();
			State = 1671;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 88, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1673;
			uid();
			State = 1674;
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineOptionContext : ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineOption; } }
	 
		public RoutineOptionContext() { }
		public virtual void CopyFrom(RoutineOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RoutineBehaviorContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC() { return GetToken(MariaDBParser.DETERMINISTIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRoutineBehavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRoutineBehavior(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineBehavior(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineLanguageContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(MariaDBParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MariaDBParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRoutineLanguage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRoutineLanguage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineLanguage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineCommentContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MariaDBParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRoutineComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRoutineComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineSecurityContext : RoutineOptionContext {
		public IToken context;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MariaDBParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MariaDBParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MariaDBParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MariaDBParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRoutineSecurity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRoutineSecurity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineSecurity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoutineDataContext : RoutineOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(MariaDBParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MariaDBParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MariaDBParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READS() { return GetToken(MariaDBParser.READS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MariaDBParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFIES() { return GetToken(MariaDBParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRoutineData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRoutineData(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineData(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineOptionContext routineOption() {
		RoutineOptionContext _localctx = new RoutineOptionContext(Context, State);
		EnterRule(_localctx, 90, RULE_routineOption);
		int _la;
		try {
			State = 1699;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1676;
				Match(COMMENT);
				State = 1677;
				Match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1678;
				Match(LANGUAGE);
				State = 1679;
				Match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 1680;
					Match(NOT);
					}
				}

				State = 1683;
				Match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1694;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CONTAINS:
					{
					State = 1684;
					Match(CONTAINS);
					State = 1685;
					Match(SQL);
					}
					break;
				case NO:
					{
					State = 1686;
					Match(NO);
					State = 1687;
					Match(SQL);
					}
					break;
				case READS:
					{
					State = 1688;
					Match(READS);
					State = 1689;
					Match(SQL);
					State = 1690;
					Match(DATA);
					}
					break;
				case MODIFIES:
					{
					State = 1691;
					Match(MODIFIES);
					State = 1692;
					Match(SQL);
					State = 1693;
					Match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1696;
				Match(SQL);
				State = 1697;
				Match(SECURITY);
				State = 1698;
				((RoutineSecurityContext)_localctx).context = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST() { return GetToken(MariaDBParser.HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MariaDBParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MariaDBParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MariaDBParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET() { return GetToken(MariaDBParser.SOCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(MariaDBParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(MariaDBParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterServerOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitServerOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServerOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionContext serverOption() {
		ServerOptionContext _localctx = new ServerOptionContext(Context, State);
		EnterRule(_localctx, 92, RULE_serverOption);
		try {
			State = 1715;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HOST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1701;
				Match(HOST);
				State = 1702;
				Match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1703;
				Match(DATABASE);
				State = 1704;
				Match(STRING_LITERAL);
				}
				break;
			case USER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1705;
				Match(USER);
				State = 1706;
				Match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1707;
				Match(PASSWORD);
				State = 1708;
				Match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1709;
				Match(SOCKET);
				State = 1710;
				Match(STRING_LITERAL);
				}
				break;
			case OWNER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1711;
				Match(OWNER);
				State = 1712;
				Match(STRING_LITERAL);
				}
				break;
			case PORT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1713;
				Match(PORT);
				State = 1714;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext[] createDefinition() {
			return GetRuleContexts<CreateDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext createDefinition(int i) {
			return GetRuleContext<CreateDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDefinitionsContext createDefinitions() {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(Context, State);
		EnterRule(_localctx, 94, RULE_createDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1717;
			Match(LR_BRACKET);
			State = 1718;
			createDefinition();
			State = 1723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1719;
				Match(COMMA);
				State = 1720;
				createDefinition();
				}
				}
				State = 1725;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1726;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDefinitionContext : ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDefinition; } }
	 
		public CreateDefinitionContext() { }
		public virtual void CopyFrom(CreateDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ColumnDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterColumnDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitColumnDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstraintDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintContext tableConstraint() {
			return GetRuleContext<TableConstraintContext>(0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterConstraintDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitConstraintDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexDeclarationContext : CreateDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnDefinitionContext indexColumnDefinition() {
			return GetRuleContext<IndexColumnDefinitionContext>(0);
		}
		public IndexDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDefinitionContext createDefinition() {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_createDefinition);
		try {
			State = 1733;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				_localctx = new ColumnDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1728;
				uid();
				State = 1729;
				columnDefinition();
				}
				break;
			case 2:
				_localctx = new ConstraintDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1731;
				tableConstraint();
				}
				break;
			case 3:
				_localctx = new IndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1732;
				indexColumnDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnConstraintContext[] columnConstraint() {
			return GetRuleContexts<ColumnConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnConstraintContext columnConstraint(int i) {
			return GetRuleContext<ColumnConstraintContext>(i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 98, RULE_columnDefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1735;
			dataType();
			State = 1739;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1736;
					columnConstraint();
					}
					} 
				}
				State = 1741;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnConstraintContext : ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnConstraint; } }
	 
		public ColumnConstraintContext() { }
		public virtual void CopyFrom(ColumnConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StorageColumnConstraintContext : ColumnConstraintContext {
		public IToken storageval;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MariaDBParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MariaDBParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MariaDBParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterStorageColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitStorageColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStorageColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VisibilityColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MariaDBParser.VISIBLE, 0); }
		public VisibilityColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterVisibilityColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitVisibilityColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibilityColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AutoIncrementColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MariaDBParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MariaDBParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext currentTimestamp() {
			return GetRuleContext<CurrentTimestampContext>(0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAutoIncrementColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAutoIncrementColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAutoIncrementColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CommentColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MariaDBParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCommentColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCommentColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniqueKeyColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MariaDBParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUniqueKeyColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUniqueKeyColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueKeyColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SerialDefaultColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MariaDBParser.SERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MariaDBParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSerialDefaultColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSerialDefaultColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSerialDefaultColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GeneratedColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED() { return GetToken(MariaDBParser.GENERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS() { return GetToken(MariaDBParser.ALWAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(MariaDBParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED() { return GetToken(MariaDBParser.STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSISTENT() { return GetToken(MariaDBParser.PERSISTENT, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterGeneratedColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitGeneratedColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneratedColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FormatColumnConstraintContext : ColumnConstraintContext {
		public IToken colformat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT() { return GetToken(MariaDBParser.COLUMN_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MariaDBParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MariaDBParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFormatColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFormatColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollateColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MariaDBParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCollateColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCollateColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollateColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryKeyColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MariaDBParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPrimaryKeyColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPrimaryKeyColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryKeyColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckColumnConstraintContext : ColumnConstraintContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MariaDBParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MariaDBParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCheckColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCheckColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public NullNotnullContext nullNotnull() {
			return GetRuleContext<NullNotnullContext>(0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterNullColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitNullColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDefaultColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDefaultColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReferenceColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterReferenceColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitReferenceColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvisibilityColumnConstraintContext : ColumnConstraintContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MariaDBParser.INVISIBLE, 0); }
		public InvisibilityColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterInvisibilityColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitInvisibilityColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvisibilityColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnConstraintContext columnConstraint() {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(Context, State);
		EnterRule(_localctx, 100, RULE_columnConstraint);
		int _la;
		try {
			State = 1795;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1742;
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1743;
				Match(DEFAULT);
				State = 1744;
				defaultValue();
				}
				break;
			case VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1745;
				Match(VISIBLE);
				}
				break;
			case INVISIBLE:
				_localctx = new InvisibilityColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1746;
				Match(INVISIBLE);
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1751;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case AUTO_INCREMENT:
					{
					State = 1747;
					Match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					State = 1748;
					Match(ON);
					State = 1749;
					Match(UPDATE);
					State = 1750;
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1754;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY) {
					{
					State = 1753;
					Match(PRIMARY);
					}
				}

				State = 1756;
				Match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1757;
				Match(UNIQUE);
				State = 1759;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
				case 1:
					{
					State = 1758;
					Match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1761;
				Match(COMMENT);
				State = 1762;
				Match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1763;
				Match(COLUMN_FORMAT);
				State = 1764;
				((FormatColumnConstraintContext)_localctx).colformat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1765;
				Match(STORAGE);
				State = 1766;
				((StorageColumnConstraintContext)_localctx).storageval = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1767;
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1768;
				Match(COLLATE);
				State = 1769;
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1772;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED) {
					{
					State = 1770;
					Match(GENERATED);
					State = 1771;
					Match(ALWAYS);
					}
				}

				State = 1774;
				Match(AS);
				State = 1775;
				Match(LR_BRACKET);
				State = 1776;
				expression(0);
				State = 1777;
				Match(RR_BRACKET);
				State = 1779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORED || _la==VIRTUAL || _la==PERSISTENT) {
					{
					State = 1778;
					_la = TokenStream.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL || _la==PERSISTENT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1781;
				Match(SERIAL);
				State = 1782;
				Match(DEFAULT);
				State = 1783;
				Match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1788;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1784;
					Match(CONSTRAINT);
					State = 1786;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
						{
						State = 1785;
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1790;
				Match(CHECK);
				State = 1791;
				Match(LR_BRACKET);
				State = 1792;
				expression(0);
				State = 1793;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintContext : ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraint; } }
	 
		public TableConstraintContext() { }
		public virtual void CopyFrom(TableConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UniqueKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public IToken indexFormat;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MariaDBParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MariaDBParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUniqueKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUniqueKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CheckTableConstraintContext : TableConstraintContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MariaDBParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MariaDBParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CheckTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCheckTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCheckTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrimaryKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MariaDBParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MariaDBParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPrimaryKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPrimaryKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForeignKeyTableConstraintContext : TableConstraintContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MariaDBParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MariaDBParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterForeignKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitForeignKeyTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignKeyTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintContext tableConstraint() {
		TableConstraintContext _localctx = new TableConstraintContext(Context, State);
		EnterRule(_localctx, 102, RULE_tableConstraint);
		int _la;
		try {
			State = 1866;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1797;
					Match(CONSTRAINT);
					State = 1799;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
					case 1:
						{
						State = 1798;
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
						break;
					}
					}
				}

				State = 1803;
				Match(PRIMARY);
				State = 1804;
				Match(KEY);
				State = 1806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
					{
					State = 1805;
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1809;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1808;
					indexType();
					}
				}

				State = 1811;
				indexColumnNames();
				State = 1815;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1812;
					indexOption();
					}
					}
					State = 1817;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1818;
					Match(CONSTRAINT);
					State = 1820;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
						{
						State = 1819;
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1824;
				Match(UNIQUE);
				State = 1826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 1825;
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
					{
					State = 1828;
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1831;
					indexType();
					}
				}

				State = 1834;
				indexColumnNames();
				State = 1838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1835;
					indexOption();
					}
					}
					State = 1840;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1841;
					Match(CONSTRAINT);
					State = 1843;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
						{
						State = 1842;
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1847;
				Match(FOREIGN);
				State = 1848;
				Match(KEY);
				State = 1850;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
					{
					State = 1849;
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				State = 1852;
				indexColumnNames();
				State = 1853;
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1859;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 1855;
					Match(CONSTRAINT);
					State = 1857;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
						{
						State = 1856;
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 1861;
				Match(CHECK);
				State = 1862;
				Match(LR_BRACKET);
				State = 1863;
				expression(0);
				State = 1864;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceDefinitionContext : ParserRuleContext {
		public IToken matchType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(MariaDBParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH() { return GetToken(MariaDBParser.MATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceActionContext referenceAction() {
			return GetRuleContext<ReferenceActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MariaDBParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(MariaDBParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(MariaDBParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterReferenceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitReferenceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceDefinitionContext referenceDefinition() {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(Context, State);
		EnterRule(_localctx, 104, RULE_referenceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1868;
			Match(REFERENCES);
			State = 1869;
			tableName();
			State = 1871;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				{
				State = 1870;
				indexColumnNames();
				}
				break;
			}
			State = 1875;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCH) {
				{
				State = 1873;
				Match(MATCH);
				State = 1874;
				_localctx.matchType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					_localctx.matchType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1878;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				State = 1877;
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceActionContext : ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MariaDBParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MariaDBParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MariaDBParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceControlTypeContext[] referenceControlType() {
			return GetRuleContexts<ReferenceControlTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceControlTypeContext referenceControlType(int i) {
			return GetRuleContext<ReferenceControlTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MariaDBParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterReferenceAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitReferenceAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceActionContext referenceAction() {
		ReferenceActionContext _localctx = new ReferenceActionContext(Context, State);
		EnterRule(_localctx, 106, RULE_referenceAction);
		try {
			State = 1896;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1880;
				Match(ON);
				State = 1881;
				Match(DELETE);
				State = 1882;
				_localctx.onDelete = referenceControlType();
				State = 1886;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
				case 1:
					{
					State = 1883;
					Match(ON);
					State = 1884;
					Match(UPDATE);
					State = 1885;
					_localctx.onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1888;
				Match(ON);
				State = 1889;
				Match(UPDATE);
				State = 1890;
				_localctx.onUpdate = referenceControlType();
				State = 1894;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
				case 1:
					{
					State = 1891;
					Match(ON);
					State = 1892;
					Match(DELETE);
					State = 1893;
					_localctx.onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceControlTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MariaDBParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MariaDBParser.CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MariaDBParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MariaDBParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(MariaDBParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceControlType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterReferenceControlType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitReferenceControlType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceControlType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceControlTypeContext referenceControlType() {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(Context, State);
		EnterRule(_localctx, 108, RULE_referenceControlType);
		try {
			State = 1904;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RESTRICT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1898;
				Match(RESTRICT);
				}
				break;
			case CASCADE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1899;
				Match(CASCADE);
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1900;
				Match(SET);
				State = 1901;
				Match(NULL_LITERAL);
				}
				break;
			case NO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1902;
				Match(NO);
				State = 1903;
				Match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnDefinitionContext : ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnDefinition; } }
	 
		public IndexColumnDefinitionContext() { }
		public virtual void CopyFrom(IndexColumnDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecialIndexDeclarationContext : IndexColumnDefinitionContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MariaDBParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MariaDBParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSpecialIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSpecialIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleIndexDeclarationContext : IndexColumnDefinitionContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSimpleIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSimpleIndexDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIndexDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnDefinitionContext indexColumnDefinition() {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 110, RULE_indexColumnDefinition);
		int _la;
		try {
			State = 1934;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1906;
				((SimpleIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
					{
					State = 1907;
					uid();
					}
				}

				State = 1911;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 1910;
					indexType();
					}
				}

				State = 1913;
				indexColumnNames();
				State = 1917;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1914;
					indexOption();
					}
					}
					State = 1919;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1920;
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 1921;
					((SpecialIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 1925;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
					{
					State = 1924;
					uid();
					}
				}

				State = 1927;
				indexColumnNames();
				State = 1931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 1928;
					indexOption();
					}
					}
					State = 1933;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableOptionContext : ParserRuleContext {
		public TableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableOption; } }
	 
		public TableOptionContext() { }
		public virtual void CopyFrom(TableOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableOptionEngineContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MariaDBParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public TableOptionEngineContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionMaxRowsContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MariaDBParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionMaxRowsContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionMaxRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionMaxRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionMaxRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCollateContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MariaDBParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionCollateContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCollate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPersistentContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT() { return GetToken(MariaDBParser.STATS_PERSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MariaDBParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MariaDBParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionPersistentContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPersistent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPersistent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPersistent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionTablespaceContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MariaDBParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceStorageContext tablespaceStorage() {
			return GetRuleContext<TablespaceStorageContext>(0);
		}
		public TableOptionTablespaceContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionAutoextendSizeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MariaDBParser.AUTOEXTEND_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoextendSizeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionAutoextendSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionAutoextendSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionAutoextendSize(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPageCompressedContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_COMPRESSED() { return GetToken(MariaDBParser.PAGE_COMPRESSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MariaDBParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MariaDBParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionPageCompressedContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPageCompressed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPageCompressed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPageCompressed(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionStartTransactionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MariaDBParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MariaDBParser.TRANSACTION, 0); }
		public TableOptionStartTransactionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionStartTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionStartTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPackKeysContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS() { return GetToken(MariaDBParser.PACK_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MariaDBParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MariaDBParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionPackKeysContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPackKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPackKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPackKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPasswordContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MariaDBParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionPasswordContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPassword(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionUnionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MariaDBParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionUnionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionUnion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionUnion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionSamplePageContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MariaDBParser.STATS_SAMPLE_PAGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionSamplePageContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionSamplePage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionSamplePage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionSamplePage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCharsetContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MariaDBParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MariaDBParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionCharsetContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionIndexDirectoryContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MariaDBParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionIndexDirectoryContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionIndexDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionIndexDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionIndexDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionTableTypeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_TYPE() { return GetToken(MariaDBParser.TABLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableTypeContext tableType() {
			return GetRuleContext<TableTypeContext>(0);
		}
		public TableOptionTableTypeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionTableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionTableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionTableType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionKeyBlockSizeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MariaDBParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionKeyBlockSizeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionKeyBlockSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionKeyBlockSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionKeyBlockSize(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionEncryptionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(MariaDBParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionEncryption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionEncryption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEncryption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionDataDirectoryContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MariaDBParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MariaDBParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionDataDirectoryContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionDataDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionDataDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionDataDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionRecalculationContext : TableOptionContext {
		public IToken extBoolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MariaDBParser.STATS_AUTO_RECALC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MariaDBParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MariaDBParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionRecalculationContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionRecalculation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionRecalculation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionRecalculation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionAutoIncrementContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MariaDBParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionAutoIncrementContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionAutoIncrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionAutoIncrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionAutoIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionEncryptionKeyIdContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_KEY_ID() { return GetToken(MariaDBParser.ENCRYPTION_KEY_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptionKeyIdContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionEncryptionKeyId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionEncryptionKeyId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEncryptionKeyId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionChecksumContext : TableOptionContext {
		public IToken boolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MariaDBParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_CHECKSUM() { return GetToken(MariaDBParser.PAGE_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MariaDBParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MariaDBParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionChecksumContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionChecksum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionChecksum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionChecksum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionEncryptedContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public EncryptedLiteralContext encryptedLiteral() {
			return GetRuleContext<EncryptedLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES() { return GetToken(MariaDBParser.YES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MariaDBParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionEncryptedContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionEncrypted(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionEncrypted(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEncrypted(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionDelayContext : TableOptionContext {
		public IToken boolValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MariaDBParser.DELAY_KEY_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MariaDBParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MariaDBParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionDelayContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionDelay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionDelay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionDelay(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionConnectionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MariaDBParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionConnectionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionConnection(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionTransactionalContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTIONAL() { return GetToken(MariaDBParser.TRANSACTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MariaDBParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MariaDBParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionTransactionalContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionTransactional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionTransactional(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionTransactional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionPageCompressionLevelContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_COMPRESSION_LEVEL() { return GetToken(MariaDBParser.PAGE_COMPRESSION_LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionPageCompressionLevelContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionPageCompressionLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionPageCompressionLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionPageCompressionLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionSecondaryEngineAttributeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return GetToken(MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionSecondaryEngineAttributeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionSecondaryEngineAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionSecondaryEngineAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionSecondaryEngineAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionWithSystemVersioningContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM() { return GetToken(MariaDBParser.SYSTEM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSIONING() { return GetToken(MariaDBParser.VERSIONING, 0); }
		public TableOptionWithSystemVersioningContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionWithSystemVersioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionWithSystemVersioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionWithSystemVersioning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCommentContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MariaDBParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionCommentContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionAverageContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MariaDBParser.AVG_ROW_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionAverageContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionAverage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionAverage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionAverage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionRowFormatContext : TableOptionContext {
		public IToken rowFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT() { return GetToken(MariaDBParser.ROW_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MariaDBParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MariaDBParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED() { return GetToken(MariaDBParser.COMPRESSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT() { return GetToken(MariaDBParser.REDUNDANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(MariaDBParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MariaDBParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionRowFormatContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionRowFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionRowFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionRowFormat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionCompressionContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION() { return GetToken(MariaDBParser.COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MariaDBParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionCompressionContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionCompression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionCompression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionCompression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionInsertMethodContext : TableOptionContext {
		public IToken insertMethod;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD() { return GetToken(MariaDBParser.INSERT_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MariaDBParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MariaDBParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MariaDBParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionInsertMethodContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionInsertMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionInsertMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionInsertMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionEngineAttributeContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE() { return GetToken(MariaDBParser.ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionEngineAttributeContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionEngineAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionEngineAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionEngineAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableOptionMinRowsContext : TableOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MariaDBParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public TableOptionMinRowsContext(TableOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableOptionMinRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableOptionMinRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOptionMinRows(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableOptionContext tableOption() {
		TableOptionContext _localctx = new TableOptionContext(Context, State);
		EnterRule(_localctx, 112, RULE_tableOption);
		int _la;
		try {
			State = 2130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				_localctx = new TableOptionEngineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1936;
				Match(ENGINE);
				State = 1938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1937;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1941;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
				case 1:
					{
					State = 1940;
					engineName();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new TableOptionEngineAttributeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1943;
				Match(ENGINE_ATTRIBUTE);
				State = 1945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1944;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1947;
				Match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new TableOptionAutoextendSizeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1948;
				Match(AUTOEXTEND_SIZE);
				State = 1950;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1949;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1952;
				decimalLiteral();
				}
				break;
			case 4:
				_localctx = new TableOptionAutoIncrementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1953;
				Match(AUTO_INCREMENT);
				State = 1955;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1954;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1957;
				decimalLiteral();
				}
				break;
			case 5:
				_localctx = new TableOptionAverageContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1958;
				Match(AVG_ROW_LENGTH);
				State = 1960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1959;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1962;
				decimalLiteral();
				}
				break;
			case 6:
				_localctx = new TableOptionCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1963;
					Match(DEFAULT);
					}
				}

				State = 1966;
				charSet();
				State = 1968;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1967;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1972;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 1970;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 1971;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				_localctx = new TableOptionChecksumContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1974;
				_la = TokenStream.LA(1);
				if ( !(_la==CHECKSUM || _la==PAGE_CHECKSUM) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1976;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1975;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1978;
				((TableOptionChecksumContext)_localctx).boolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionChecksumContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 8:
				_localctx = new TableOptionCollateContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 1979;
					Match(DEFAULT);
					}
				}

				State = 1982;
				Match(COLLATE);
				State = 1984;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1983;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1986;
				collationName();
				}
				break;
			case 9:
				_localctx = new TableOptionCommentContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1987;
				Match(COMMENT);
				State = 1989;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1988;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1991;
				Match(STRING_LITERAL);
				}
				break;
			case 10:
				_localctx = new TableOptionCompressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1992;
				Match(COMPRESSION);
				State = 1994;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1993;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 1996;
				_la = TokenStream.LA(1);
				if ( !(_la==STRING_LITERAL || _la==ID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				_localctx = new TableOptionConnectionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1997;
				Match(CONNECTION);
				State = 1999;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 1998;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2001;
				Match(STRING_LITERAL);
				}
				break;
			case 12:
				_localctx = new TableOptionDataDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2002;
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==DATA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2003;
				Match(DIRECTORY);
				State = 2005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2004;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2007;
				Match(STRING_LITERAL);
				}
				break;
			case 13:
				_localctx = new TableOptionDelayContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2008;
				Match(DELAY_KEY_WRITE);
				State = 2010;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2009;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2012;
				((TableOptionDelayContext)_localctx).boolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionDelayContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 14:
				_localctx = new TableOptionEncryptionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2013;
				Match(ENCRYPTION);
				State = 2015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2014;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2017;
				Match(STRING_LITERAL);
				}
				break;
			case 15:
				_localctx = new TableOptionEncryptedContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2018;
				encryptedLiteral();
				State = 2020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2019;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2022;
				_la = TokenStream.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 16:
				_localctx = new TableOptionPageCompressedContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2024;
				_la = TokenStream.LA(1);
				if ( !(_la==PAGE_COMPRESSED || _la==STRING_LITERAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2026;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2025;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2028;
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 17:
				_localctx = new TableOptionPageCompressionLevelContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2029;
				_la = TokenStream.LA(1);
				if ( !(_la==PAGE_COMPRESSION_LEVEL || _la==STRING_LITERAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2030;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2033;
				decimalLiteral();
				}
				break;
			case 18:
				_localctx = new TableOptionEncryptionKeyIdContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2034;
				Match(ENCRYPTION_KEY_ID);
				State = 2036;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2035;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2038;
				decimalLiteral();
				}
				break;
			case 19:
				_localctx = new TableOptionIndexDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2039;
				Match(INDEX);
				State = 2040;
				Match(DIRECTORY);
				State = 2042;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2041;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2044;
				Match(STRING_LITERAL);
				}
				break;
			case 20:
				_localctx = new TableOptionInsertMethodContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2045;
				Match(INSERT_METHOD);
				State = 2047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2046;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2049;
				((TableOptionInsertMethodContext)_localctx).insertMethod = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NO) ) {
					((TableOptionInsertMethodContext)_localctx).insertMethod = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 21:
				_localctx = new TableOptionKeyBlockSizeContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2050;
				Match(KEY_BLOCK_SIZE);
				State = 2052;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2051;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2054;
				fileSizeLiteral();
				}
				break;
			case 22:
				_localctx = new TableOptionMaxRowsContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2055;
				Match(MAX_ROWS);
				State = 2057;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2056;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2059;
				decimalLiteral();
				}
				break;
			case 23:
				_localctx = new TableOptionMinRowsContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2060;
				Match(MIN_ROWS);
				State = 2062;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2061;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2064;
				decimalLiteral();
				}
				break;
			case 24:
				_localctx = new TableOptionPackKeysContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2065;
				Match(PACK_KEYS);
				State = 2067;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2066;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2069;
				((TableOptionPackKeysContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPackKeysContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 25:
				_localctx = new TableOptionPasswordContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2070;
				Match(PASSWORD);
				State = 2072;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2071;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2074;
				Match(STRING_LITERAL);
				}
				break;
			case 26:
				_localctx = new TableOptionRowFormatContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2075;
				Match(ROW_FORMAT);
				State = 2077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2076;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2079;
				((TableOptionRowFormatContext)_localctx).rowFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || ((((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & 2305843013508661253L) != 0) || _la==REDUNDANT || _la==ID) ) {
					((TableOptionRowFormatContext)_localctx).rowFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 27:
				_localctx = new TableOptionStartTransactionContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2080;
				Match(START);
				State = 2081;
				Match(TRANSACTION);
				}
				break;
			case 28:
				_localctx = new TableOptionSecondaryEngineAttributeContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2082;
				Match(SECONDARY_ENGINE_ATTRIBUTE);
				State = 2084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2083;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2086;
				Match(STRING_LITERAL);
				}
				break;
			case 29:
				_localctx = new TableOptionRecalculationContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2087;
				Match(STATS_AUTO_RECALC);
				State = 2089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2088;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2091;
				((TableOptionRecalculationContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionRecalculationContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 30:
				_localctx = new TableOptionPersistentContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 2092;
				Match(STATS_PERSISTENT);
				State = 2094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2093;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2096;
				((TableOptionPersistentContext)_localctx).extBoolValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((TableOptionPersistentContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 31:
				_localctx = new TableOptionSamplePageContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 2097;
				Match(STATS_SAMPLE_PAGES);
				State = 2099;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2098;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2103;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 2101;
					Match(DEFAULT);
					}
					break;
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					State = 2102;
					decimalLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 32:
				_localctx = new TableOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 2105;
				Match(TABLESPACE);
				State = 2106;
				uid();
				State = 2108;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
				case 1:
					{
					State = 2107;
					tablespaceStorage();
					}
					break;
				}
				}
				break;
			case 33:
				_localctx = new TableOptionTableTypeContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 2110;
				Match(TABLE_TYPE);
				State = 2111;
				Match(EQUAL_SYMBOL);
				State = 2112;
				tableType();
				}
				break;
			case 34:
				_localctx = new TableOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 2113;
				tablespaceStorage();
				}
				break;
			case 35:
				_localctx = new TableOptionTransactionalContext(_localctx);
				EnterOuterAlt(_localctx, 35);
				{
				State = 2114;
				Match(TRANSACTIONAL);
				State = 2116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2115;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2118;
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 36:
				_localctx = new TableOptionUnionContext(_localctx);
				EnterOuterAlt(_localctx, 36);
				{
				State = 2119;
				Match(UNION);
				State = 2121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2120;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2123;
				Match(LR_BRACKET);
				State = 2124;
				tables();
				State = 2125;
				Match(RR_BRACKET);
				}
				break;
			case 37:
				_localctx = new TableOptionWithSystemVersioningContext(_localctx);
				EnterOuterAlt(_localctx, 37);
				{
				State = 2127;
				Match(WITH);
				State = 2128;
				Match(SYSTEM);
				State = 2129;
				Match(VERSIONING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MariaDBParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ODBC() { return GetToken(MariaDBParser.ODBC, 0); }
		public TableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableTypeContext tableType() {
		TableTypeContext _localctx = new TableTypeContext(Context, State);
		EnterRule(_localctx, 114, RULE_tableType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2132;
			_la = TokenStream.LA(1);
			if ( !(_la==MYSQL || _la==ODBC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceStorageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MariaDBParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MariaDBParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MariaDBParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceStorage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTablespaceStorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTablespaceStorage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablespaceStorage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceStorageContext tablespaceStorage() {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(Context, State);
		EnterRule(_localctx, 116, RULE_tablespaceStorage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2134;
			Match(STORAGE);
			State = 2135;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionsContext : ParserRuleContext {
		public DecimalLiteralContext count;
		public DecimalLiteralContext subCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BY() { return GetTokens(MariaDBParser.BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY(int i) {
			return GetToken(MariaDBParser.BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
			return GetRuleContext<PartitionFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MariaDBParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MariaDBParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
			return GetRuleContext<SubpartitionFunctionDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS() { return GetToken(MariaDBParser.SUBPARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionsContext partitionDefinitions() {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(Context, State);
		EnterRule(_localctx, 118, RULE_partitionDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2137;
			Match(PARTITION);
			State = 2138;
			Match(BY);
			State = 2139;
			partitionFunctionDefinition();
			State = 2142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITIONS) {
				{
				State = 2140;
				Match(PARTITIONS);
				State = 2141;
				_localctx.count = decimalLiteral();
				}
			}

			State = 2151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUBPARTITION) {
				{
				State = 2144;
				Match(SUBPARTITION);
				State = 2145;
				Match(BY);
				State = 2146;
				subpartitionFunctionDefinition();
				State = 2149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUBPARTITIONS) {
					{
					State = 2147;
					Match(SUBPARTITIONS);
					State = 2148;
					_localctx.subCount = decimalLiteral();
					}
				}

				}
			}

			State = 2164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
			case 1:
				{
				State = 2153;
				Match(LR_BRACKET);
				State = 2154;
				partitionDefinition();
				State = 2159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2155;
					Match(COMMA);
					State = 2156;
					partitionDefinition();
					}
					}
					State = 2161;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2162;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionFunctionDefinitionContext : ParserRuleContext {
		public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionFunctionDefinition; } }
	 
		public PartitionFunctionDefinitionContext() { }
		public virtual void CopyFrom(PartitionFunctionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionFunctionKeyContext : PartitionFunctionDefinitionContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MariaDBParser.LINEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MariaDBParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MariaDBParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MariaDBParser.TWO_DECIMAL, 0); }
		public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionHashContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MariaDBParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MariaDBParser.LINEAR, 0); }
		public PartitionFunctionHashContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionHash(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionListContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(MariaDBParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MariaDBParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public PartitionFunctionListContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionFunctionRangeContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(MariaDBParser.RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MariaDBParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionFunctionRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionFunctionRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionFunctionRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionSystemVersionContext : PartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_TIME() { return GetToken(MariaDBParser.SYSTEM_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MariaDBParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS() { return GetToken(MariaDBParser.STARTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(MariaDBParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSystemVersionDefinitionsContext partitionSystemVersionDefinitions() {
			return GetRuleContext<PartitionSystemVersionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MariaDBParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimestampValueContext timestampValue() {
			return GetRuleContext<TimestampValueContext>(0);
		}
		public PartitionSystemVersionContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionSystemVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionSystemVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionSystemVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionFunctionDefinitionContext partitionFunctionDefinition() {
		PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 120, RULE_partitionFunctionDefinition);
		int _la;
		try {
			State = 2231;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				_localctx = new PartitionFunctionHashContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 2166;
					Match(LINEAR);
					}
				}

				State = 2169;
				Match(HASH);
				State = 2170;
				Match(LR_BRACKET);
				State = 2171;
				expression(0);
				State = 2172;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new PartitionFunctionKeyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 2174;
					Match(LINEAR);
					}
				}

				State = 2177;
				Match(KEY);
				State = 2181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM) {
					{
					State = 2178;
					Match(ALGORITHM);
					State = 2179;
					Match(EQUAL_SYMBOL);
					State = 2180;
					((PartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((PartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2183;
				Match(LR_BRACKET);
				State = 2184;
				uidList();
				State = 2185;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new PartitionFunctionRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2187;
				Match(RANGE);
				State = 2197;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 2188;
					Match(LR_BRACKET);
					State = 2189;
					expression(0);
					State = 2190;
					Match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					State = 2192;
					Match(COLUMNS);
					State = 2193;
					Match(LR_BRACKET);
					State = 2194;
					uidList();
					State = 2195;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new PartitionFunctionListContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2199;
				Match(LIST);
				State = 2209;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_BRACKET:
					{
					State = 2200;
					Match(LR_BRACKET);
					State = 2201;
					expression(0);
					State = 2202;
					Match(RR_BRACKET);
					}
					break;
				case COLUMNS:
					{
					State = 2204;
					Match(COLUMNS);
					State = 2205;
					Match(LR_BRACKET);
					State = 2206;
					uidList();
					State = 2207;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				_localctx = new PartitionSystemVersionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2211;
				Match(SYSTEM_TIME);
				State = 2215;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
				case 1:
					{
					State = 2212;
					expression(0);
					}
					break;
				case 2:
					{
					State = 2213;
					Match(LIMIT);
					State = 2214;
					expression(0);
					}
					break;
				}
				State = 2223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTS) {
					{
					State = 2217;
					Match(STARTS);
					State = 2221;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
					case 1:
						{
						State = 2218;
						Match(TIMESTAMP);
						State = 2219;
						timestampValue();
						}
						break;
					case 2:
						{
						State = 2220;
						timestampValue();
						}
						break;
					}
					}
				}

				State = 2226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AUTO) {
					{
					State = 2225;
					Match(AUTO);
					}
				}

				State = 2229;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
				case 1:
					{
					State = 2228;
					partitionSystemVersionDefinitions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionSystemVersionDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSystemVersionDefinitionContext[] partitionSystemVersionDefinition() {
			return GetRuleContexts<PartitionSystemVersionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSystemVersionDefinitionContext partitionSystemVersionDefinition(int i) {
			return GetRuleContext<PartitionSystemVersionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public PartitionSystemVersionDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionSystemVersionDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionSystemVersionDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionSystemVersionDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionSystemVersionDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionSystemVersionDefinitionsContext partitionSystemVersionDefinitions() {
		PartitionSystemVersionDefinitionsContext _localctx = new PartitionSystemVersionDefinitionsContext(Context, State);
		EnterRule(_localctx, 122, RULE_partitionSystemVersionDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2233;
			Match(LR_BRACKET);
			State = 2234;
			partitionSystemVersionDefinition();
			State = 2239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2235;
				Match(COMMA);
				State = 2236;
				partitionSystemVersionDefinition();
				}
				}
				State = 2241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2242;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionSystemVersionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY() { return GetToken(MariaDBParser.HISTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MariaDBParser.CURRENT, 0); }
		public PartitionSystemVersionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionSystemVersionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionSystemVersionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionSystemVersionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionSystemVersionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionSystemVersionDefinitionContext partitionSystemVersionDefinition() {
		PartitionSystemVersionDefinitionContext _localctx = new PartitionSystemVersionDefinitionContext(Context, State);
		EnterRule(_localctx, 124, RULE_partitionSystemVersionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2244;
			Match(PARTITION);
			State = 2245;
			uid();
			State = 2246;
			_la = TokenStream.LA(1);
			if ( !(_la==CURRENT || _la==HISTORY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionFunctionDefinitionContext : ParserRuleContext {
		public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionFunctionDefinition; } }
	 
		public SubpartitionFunctionDefinitionContext() { }
		public virtual void CopyFrom(SubpartitionFunctionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubPartitionFunctionHashContext : SubpartitionFunctionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MariaDBParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MariaDBParser.LINEAR, 0); }
		public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSubPartitionFunctionHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSubPartitionFunctionHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubPartitionFunctionHash(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubPartitionFunctionKeyContext : SubpartitionFunctionDefinitionContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR() { return GetToken(MariaDBParser.LINEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MariaDBParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MariaDBParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MariaDBParser.TWO_DECIMAL, 0); }
		public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSubPartitionFunctionKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSubPartitionFunctionKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubPartitionFunctionKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition() {
		SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 126, RULE_subpartitionFunctionDefinition);
		int _la;
		try {
			State = 2269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				_localctx = new SubPartitionFunctionHashContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 2248;
					Match(LINEAR);
					}
				}

				State = 2251;
				Match(HASH);
				State = 2252;
				Match(LR_BRACKET);
				State = 2253;
				expression(0);
				State = 2254;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new SubPartitionFunctionKeyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR) {
					{
					State = 2256;
					Match(LINEAR);
					}
				}

				State = 2259;
				Match(KEY);
				State = 2263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM) {
					{
					State = 2260;
					Match(ALGORITHM);
					State = 2261;
					Match(EQUAL_SYMBOL);
					State = 2262;
					((SubPartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ONE_DECIMAL || _la==TWO_DECIMAL) ) {
						((SubPartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2265;
				Match(LR_BRACKET);
				State = 2266;
				uidList();
				State = 2267;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionContext : ParserRuleContext {
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinition; } }
	 
		public PartitionDefinitionContext() { }
		public virtual void CopyFrom(PartitionDefinitionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionComparisonContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MariaDBParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MariaDBParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN() { return GetToken(MariaDBParser.THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionComparisonContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionListAtomContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MariaDBParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MariaDBParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionListAtomContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionListAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionListAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionListAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionListVectorContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MariaDBParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MariaDBParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerVectorContext[] partitionDefinerVector() {
			return GetRuleContexts<PartitionDefinerVectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerVectorContext partitionDefinerVector(int i) {
			return GetRuleContext<PartitionDefinerVectorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		public PartitionListVectorContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionListVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionListVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionListVector(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionSimpleContext : PartitionDefinitionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public PartitionSimpleContext(PartitionDefinitionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionSimple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionSimple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionContext partitionDefinition() {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 128, RULE_partitionDefinition);
		int _la;
		try {
			State = 2417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				_localctx = new PartitionComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2271;
				Match(PARTITION);
				State = 2272;
				uid();
				State = 2273;
				Match(VALUES);
				State = 2274;
				Match(LESS);
				State = 2275;
				Match(THAN);
				State = 2276;
				Match(LR_BRACKET);
				State = 2277;
				partitionDefinerAtom();
				State = 2282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2278;
					Match(COMMA);
					State = 2279;
					partitionDefinerAtom();
					}
					}
					State = 2284;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2285;
				Match(RR_BRACKET);
				State = 2289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & 2199024304129L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 268436481L) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2286;
					partitionOption();
					}
					}
					State = 2291;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2292;
					Match(LR_BRACKET);
					State = 2293;
					subpartitionDefinition();
					State = 2298;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2294;
						Match(COMMA);
						State = 2295;
						subpartitionDefinition();
						}
						}
						State = 2300;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2301;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				_localctx = new PartitionComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2305;
				Match(PARTITION);
				State = 2306;
				uid();
				State = 2307;
				Match(VALUES);
				State = 2308;
				Match(LESS);
				State = 2309;
				Match(THAN);
				State = 2310;
				partitionDefinerAtom();
				State = 2314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & 2199024304129L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 268436481L) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2311;
					partitionOption();
					}
					}
					State = 2316;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2317;
					Match(LR_BRACKET);
					State = 2318;
					subpartitionDefinition();
					State = 2323;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2319;
						Match(COMMA);
						State = 2320;
						subpartitionDefinition();
						}
						}
						State = 2325;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2326;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 3:
				_localctx = new PartitionListAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2330;
				Match(PARTITION);
				State = 2331;
				uid();
				State = 2332;
				Match(VALUES);
				State = 2333;
				Match(IN);
				State = 2334;
				Match(LR_BRACKET);
				State = 2335;
				partitionDefinerAtom();
				State = 2340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2336;
					Match(COMMA);
					State = 2337;
					partitionDefinerAtom();
					}
					}
					State = 2342;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2343;
				Match(RR_BRACKET);
				State = 2347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & 2199024304129L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 268436481L) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2344;
					partitionOption();
					}
					}
					State = 2349;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2350;
					Match(LR_BRACKET);
					State = 2351;
					subpartitionDefinition();
					State = 2356;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2352;
						Match(COMMA);
						State = 2353;
						subpartitionDefinition();
						}
						}
						State = 2358;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2359;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				_localctx = new PartitionListVectorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2363;
				Match(PARTITION);
				State = 2364;
				uid();
				State = 2365;
				Match(VALUES);
				State = 2366;
				Match(IN);
				State = 2367;
				Match(LR_BRACKET);
				State = 2368;
				partitionDefinerVector();
				State = 2373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2369;
					Match(COMMA);
					State = 2370;
					partitionDefinerVector();
					}
					}
					State = 2375;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2376;
				Match(RR_BRACKET);
				State = 2380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & 2199024304129L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 268436481L) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2377;
					partitionOption();
					}
					}
					State = 2382;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2383;
					Match(LR_BRACKET);
					State = 2384;
					subpartitionDefinition();
					State = 2389;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2385;
						Match(COMMA);
						State = 2386;
						subpartitionDefinition();
						}
						}
						State = 2391;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2392;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 5:
				_localctx = new PartitionSimpleContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2396;
				Match(PARTITION);
				State = 2397;
				uid();
				State = 2401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DEFAULT || _la==INDEX || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & 2199024304129L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 268436481L) != 0) || _la==STORAGE || _la==TABLESPACE) {
					{
					{
					State = 2398;
					partitionOption();
					}
					}
					State = 2403;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 2404;
					Match(LR_BRACKET);
					State = 2405;
					subpartitionDefinition();
					State = 2410;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2406;
						Match(COMMA);
						State = 2407;
						subpartitionDefinition();
						}
						}
						State = 2412;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 2413;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinerAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(MariaDBParser.MAXVALUE, 0); }
		public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinerAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinerAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinerAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinerAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinerAtomContext partitionDefinerAtom() {
		PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(Context, State);
		EnterRule(_localctx, 130, RULE_partitionDefinerAtom);
		try {
			State = 2422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2419;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2420;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2421;
				Match(MAXVALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinerVectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext[] partitionDefinerAtom() {
			return GetRuleContexts<PartitionDefinerAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinerAtomContext partitionDefinerAtom(int i) {
			return GetRuleContext<PartitionDefinerAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinerVector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinerVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinerVector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionDefinerVector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinerVectorContext partitionDefinerVector() {
		PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(Context, State);
		EnterRule(_localctx, 132, RULE_partitionDefinerVector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2424;
			Match(LR_BRACKET);
			State = 2425;
			partitionDefinerAtom();
			State = 2428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2426;
				Match(COMMA);
				State = 2427;
				partitionDefinerAtom();
				}
				}
				State = 2430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 2432;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MariaDBParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSubpartitionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSubpartitionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubpartitionDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionDefinitionContext subpartitionDefinition() {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 134, RULE_subpartitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2434;
			Match(SUBPARTITION);
			State = 2435;
			uid();
			State = 2439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT || _la==INDEX || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & 2199024304129L) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & 268436481L) != 0) || _la==STORAGE || _la==TABLESPACE) {
				{
				{
				State = 2436;
				partitionOption();
				}
				}
				State = 2441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionOptionContext : ParserRuleContext {
		public PartitionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionOption; } }
	 
		public PartitionOptionContext() { }
		public virtual void CopyFrom(PartitionOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionOptionCommentContext : PartitionOptionContext {
		public IToken comment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MariaDBParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionCommentContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionComment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionNodeGroupContext : PartitionOptionContext {
		public UidContext nodegroup;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MariaDBParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionNodeGroupContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionNodeGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionNodeGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionNodeGroup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionIndexDirectoryContext : PartitionOptionContext {
		public IToken indexDirectory;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MariaDBParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionIndexDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionIndexDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionIndexDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionIndexDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionMaxRowsContext : PartitionOptionContext {
		public DecimalLiteralContext maxRows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MariaDBParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMaxRowsContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionMaxRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionMaxRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionMaxRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionTablespaceContext : PartitionOptionContext {
		public UidContext tablespace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MariaDBParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionTablespaceContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionEngineContext : PartitionOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MariaDBParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MariaDBParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionEngineContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionMinRowsContext : PartitionOptionContext {
		public DecimalLiteralContext minRows;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MariaDBParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionMinRowsContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionMinRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionMinRows(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionMinRows(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PartitionOptionDataDirectoryContext : PartitionOptionContext {
		public IToken dataDirectory;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MariaDBParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MariaDBParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public PartitionOptionDataDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionOptionDataDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionOptionDataDirectory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionOptionDataDirectory(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionOptionContext partitionOption() {
		PartitionOptionContext _localctx = new PartitionOptionContext(Context, State);
		EnterRule(_localctx, 136, RULE_partitionOption);
		int _la;
		try {
			State = 2490;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEFAULT:
			case ENGINE:
			case STORAGE:
				_localctx = new PartitionOptionEngineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 2442;
					Match(DEFAULT);
					}
				}

				State = 2446;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 2445;
					Match(STORAGE);
					}
				}

				State = 2448;
				Match(ENGINE);
				State = 2450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2449;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2452;
				engineName();
				}
				break;
			case COMMENT:
				_localctx = new PartitionOptionCommentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2453;
				Match(COMMENT);
				State = 2455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2454;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2457;
				((PartitionOptionCommentContext)_localctx).comment = Match(STRING_LITERAL);
				}
				break;
			case DATA:
				_localctx = new PartitionOptionDataDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2458;
				Match(DATA);
				State = 2459;
				Match(DIRECTORY);
				State = 2461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2460;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2463;
				((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = Match(STRING_LITERAL);
				}
				break;
			case INDEX:
				_localctx = new PartitionOptionIndexDirectoryContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2464;
				Match(INDEX);
				State = 2465;
				Match(DIRECTORY);
				State = 2467;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2466;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2469;
				((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = Match(STRING_LITERAL);
				}
				break;
			case MAX_ROWS:
				_localctx = new PartitionOptionMaxRowsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2470;
				Match(MAX_ROWS);
				State = 2472;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2471;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2474;
				((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
				}
				break;
			case MIN_ROWS:
				_localctx = new PartitionOptionMinRowsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2475;
				Match(MIN_ROWS);
				State = 2477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2476;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2479;
				((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
				}
				break;
			case TABLESPACE:
				_localctx = new PartitionOptionTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2480;
				Match(TABLESPACE);
				State = 2482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2481;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2484;
				((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
				}
				break;
			case NODEGROUP:
				_localctx = new PartitionOptionNodeGroupContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2485;
				Match(NODEGROUP);
				State = 2487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2486;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2489;
				((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseContext : ParserRuleContext {
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabase; } }
	 
		public AlterDatabaseContext() { }
		public virtual void CopyFrom(AlterDatabaseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterUpgradeNameContext : AlterDatabaseContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MariaDBParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MariaDBParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MariaDBParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MariaDBParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MariaDBParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MariaDBParser.SCHEMA, 0); }
		public AlterUpgradeNameContext(AlterDatabaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterUpgradeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterUpgradeName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUpgradeName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterSimpleDatabaseContext : AlterDatabaseContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MariaDBParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MariaDBParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public AlterSimpleDatabaseContext(AlterDatabaseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterSimpleDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterSimpleDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterSimpleDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseContext alterDatabase() {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(Context, State);
		EnterRule(_localctx, 138, RULE_alterDatabase);
		int _la;
		try {
			State = 2510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				_localctx = new AlterSimpleDatabaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2492;
				Match(ALTER);
				State = 2493;
				((AlterSimpleDatabaseContext)_localctx).dbFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterSimpleDatabaseContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2495;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
				case 1:
					{
					State = 2494;
					uid();
					}
					break;
				}
				State = 2498;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2497;
					createDatabaseOption();
					}
					}
					State = 2500;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 8796428566528L) != 0) || _la==READ || _la==CHAR || _la==ENCRYPTION || _la==CHARSET );
				}
				break;
			case 2:
				_localctx = new AlterUpgradeNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2502;
				Match(ALTER);
				State = 2503;
				((AlterUpgradeNameContext)_localctx).dbFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((AlterUpgradeNameContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2504;
				uid();
				State = 2505;
				Match(UPGRADE);
				State = 2506;
				Match(DATA);
				State = 2507;
				Match(DIRECTORY);
				State = 2508;
				Match(NAME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MariaDBParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MariaDBParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MariaDBParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MariaDBParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleExpressionContext scheduleExpression() {
			return GetRuleContext<ScheduleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MariaDBParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MariaDBParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MariaDBParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MariaDBParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnableTypeContext enableType() {
			return GetRuleContext<EnableTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MariaDBParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MariaDBParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterEventContext alterEvent() {
		AlterEventContext _localctx = new AlterEventContext(Context, State);
		EnterRule(_localctx, 140, RULE_alterEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2512;
			Match(ALTER);
			State = 2514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 2513;
				ownerStatement();
				}
			}

			State = 2516;
			Match(EVENT);
			State = 2517;
			fullId();
			State = 2521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
			case 1:
				{
				State = 2518;
				Match(ON);
				State = 2519;
				Match(SCHEDULE);
				State = 2520;
				scheduleExpression();
				}
				break;
			}
			State = 2529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 2523;
				Match(ON);
				State = 2524;
				Match(COMPLETION);
				State = 2526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 2525;
					Match(NOT);
					}
				}

				State = 2528;
				Match(PRESERVE);
				}
			}

			State = 2534;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
			case 1:
				{
				State = 2531;
				Match(RENAME);
				State = 2532;
				Match(TO);
				State = 2533;
				fullId();
				}
				break;
			}
			State = 2537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				State = 2536;
				enableType();
				}
			}

			State = 2541;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 2539;
				Match(COMMENT);
				State = 2540;
				Match(STRING_LITERAL);
				}
			}

			State = 2545;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				{
				State = 2543;
				Match(DO);
				State = 2544;
				routineBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MariaDBParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterFunctionContext alterFunction() {
		AlterFunctionContext _localctx = new AlterFunctionContext(Context, State);
		EnterRule(_localctx, 142, RULE_alterFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2547;
			Match(ALTER);
			State = 2548;
			Match(FUNCTION);
			State = 2549;
			fullId();
			State = 2553;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 281474993487877L) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				State = 2550;
				routineOption();
				}
				}
				State = 2555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterInstanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE() { return GetToken(MariaDBParser.INSTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE() { return GetToken(MariaDBParser.ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB() { return GetToken(MariaDBParser.INNODB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MariaDBParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		public AlterInstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterInstance; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterInstance(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterInstanceContext alterInstance() {
		AlterInstanceContext _localctx = new AlterInstanceContext(Context, State);
		EnterRule(_localctx, 144, RULE_alterInstance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2556;
			Match(ALTER);
			State = 2557;
			Match(INSTANCE);
			State = 2558;
			Match(ROTATE);
			State = 2559;
			Match(INNODB);
			State = 2560;
			Match(MASTER);
			State = 2561;
			Match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MariaDBParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MariaDBParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MariaDBParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MariaDBParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MariaDBParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MariaDBParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupContext alterLogfileGroup() {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(Context, State);
		EnterRule(_localctx, 146, RULE_alterLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2563;
			Match(ALTER);
			State = 2564;
			Match(LOGFILE);
			State = 2565;
			Match(GROUP);
			State = 2566;
			uid();
			State = 2567;
			Match(ADD);
			State = 2568;
			Match(UNDOFILE);
			State = 2569;
			Match(STRING_LITERAL);
			State = 2575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 2570;
				Match(INITIAL_SIZE);
				State = 2572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2571;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2574;
				fileSizeLiteral();
				}
			}

			State = 2578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 2577;
				Match(WAIT);
				}
			}

			State = 2580;
			Match(ENGINE);
			State = 2582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 2581;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 2584;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MariaDBParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext[] routineOption() {
			return GetRuleContexts<RoutineOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption(int i) {
			return GetRuleContext<RoutineOptionContext>(i);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterProcedureContext alterProcedure() {
		AlterProcedureContext _localctx = new AlterProcedureContext(Context, State);
		EnterRule(_localctx, 148, RULE_alterProcedure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2586;
			Match(ALTER);
			State = 2587;
			Match(PROCEDURE);
			State = 2588;
			fullId();
			State = 2592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DETERMINISTIC || ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & 281474993487877L) != 0) || _la==COMMENT || _la==CONTAINS || _la==LANGUAGE || _la==NO) {
				{
				{
				State = 2589;
				routineOption();
				}
				}
				State = 2594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MariaDBParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MariaDBParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterServerContext alterServer() {
		AlterServerContext _localctx = new AlterServerContext(Context, State);
		EnterRule(_localctx, 150, RULE_alterServer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2595;
			Match(ALTER);
			State = 2596;
			Match(SERVER);
			State = 2597;
			uid();
			State = 2598;
			Match(OPTIONS);
			State = 2599;
			Match(LR_BRACKET);
			State = 2600;
			serverOption();
			State = 2605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2601;
				Match(COMMA);
				State = 2602;
				serverOption();
				}
				}
				State = 2607;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2608;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		public IToken intimeAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MariaDBParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterSpecificationContext[] alterSpecification() {
			return GetRuleContexts<AlterSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterSpecificationContext alterSpecification(int i) {
			return GetRuleContext<AlterSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MariaDBParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MariaDBParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(Context, State);
		EnterRule(_localctx, 152, RULE_alterTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2610;
			Match(ALTER);
			State = 2612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE || _la==ONLINE) {
				{
				State = 2611;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 2614;
				Match(IGNORE);
				}
			}

			State = 2617;
			Match(TABLE);
			State = 2619;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,323,Context) ) {
			case 1:
				{
				State = 2618;
				ifExists();
				}
				break;
			}
			State = 2621;
			tableName();
			State = 2623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 2622;
				waitNowaitClause();
				}
			}

			State = 2633;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,326,Context) ) {
			case 1:
				{
				State = 2625;
				alterSpecification();
				State = 2630;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2626;
					Match(COMMA);
					State = 2627;
					alterSpecification();
					}
					}
					State = 2632;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 2636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 2635;
				partitionDefinitions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceContext : ParserRuleContext {
		public IToken objectAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MariaDBParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MariaDBParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MariaDBParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MariaDBParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileSizeLiteralContext fileSizeLiteral() {
			return GetRuleContext<FileSizeLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MariaDBParser.WAIT, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceContext alterTablespace() {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(Context, State);
		EnterRule(_localctx, 154, RULE_alterTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2638;
			Match(ALTER);
			State = 2639;
			Match(TABLESPACE);
			State = 2640;
			uid();
			State = 2641;
			_localctx.objectAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
				_localctx.objectAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2642;
			Match(DATAFILE);
			State = 2643;
			Match(STRING_LITERAL);
			State = 2647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INITIAL_SIZE) {
				{
				State = 2644;
				Match(INITIAL_SIZE);
				State = 2645;
				Match(EQUAL_SYMBOL);
				State = 2646;
				fileSizeLiteral();
				}
			}

			State = 2650;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WAIT) {
				{
				State = 2649;
				Match(WAIT);
				}
			}

			State = 2652;
			Match(ENGINE);
			State = 2654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_SYMBOL) {
				{
				State = 2653;
				Match(EQUAL_SYMBOL);
				}
			}

			State = 2656;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterViewContext : ParserRuleContext {
		public IToken algType;
		public IToken secContext;
		public IToken checkOpt;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MariaDBParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MariaDBParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OwnerStatementContext ownerStatement() {
			return GetRuleContext<OwnerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL() { return GetToken(MariaDBParser.SQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MariaDBParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MariaDBParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MariaDBParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MariaDBParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MariaDBParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MariaDBParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MariaDBParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MariaDBParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MariaDBParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MariaDBParser.LOCAL, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterViewContext alterView() {
		AlterViewContext _localctx = new AlterViewContext(Context, State);
		EnterRule(_localctx, 156, RULE_alterView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2658;
			Match(ALTER);
			State = 2662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM) {
				{
				State = 2659;
				Match(ALGORITHM);
				State = 2660;
				Match(EQUAL_SYMBOL);
				State = 2661;
				_localctx.algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MERGE || _la==TEMPTABLE || _la==UNDEFINED) ) {
					_localctx.algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2665;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER) {
				{
				State = 2664;
				ownerStatement();
				}
			}

			State = 2670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL) {
				{
				State = 2667;
				Match(SQL);
				State = 2668;
				Match(SECURITY);
				State = 2669;
				_localctx.secContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					_localctx.secContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2672;
			Match(VIEW);
			State = 2673;
			fullId();
			State = 2678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 2674;
				Match(LR_BRACKET);
				State = 2675;
				uidList();
				State = 2676;
				Match(RR_BRACKET);
				}
			}

			State = 2680;
			Match(AS);
			State = 2681;
			selectStatement();
			State = 2688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 2682;
				Match(WITH);
				State = 2684;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADED || _la==LOCAL) {
					{
					State = 2683;
					_localctx.checkOpt = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CASCADED || _la==LOCAL) ) {
						_localctx.checkOpt = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2686;
				Match(CHECK);
				State = 2687;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(MariaDBParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceSpecContext[] sequenceSpec() {
			return GetRuleContexts<SequenceSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceSpecContext sequenceSpec(int i) {
			return GetRuleContext<SequenceSpecContext>(i);
		}
		public AlterSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterSequenceContext alterSequence() {
		AlterSequenceContext _localctx = new AlterSequenceContext(Context, State);
		EnterRule(_localctx, 158, RULE_alterSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2690;
			Match(ALTER);
			State = 2691;
			Match(SEQUENCE);
			State = 2693;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,337,Context) ) {
			case 1:
				{
				State = 2692;
				ifExists();
				}
				break;
			}
			State = 2695;
			fullId();
			State = 2697;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2696;
					sequenceSpec();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2699;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterSpecificationContext : ParserRuleContext {
		public AlterSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterSpecification; } }
	 
		public AlterSpecificationContext() { }
		public virtual void CopyFrom(AlterSpecificationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterByDisableKeysContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MariaDBParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MariaDBParser.KEYS, 0); }
		public AlterByDisableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByDisableKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByDisableKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDisableKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDefaultCharsetContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MariaDBParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MariaDBParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public AlterByDefaultCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByDefaultCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByDefaultCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDefaultCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRenameColumnContext : AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MariaDBParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MariaDBParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MariaDBParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByRenameColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByRenameColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByRenameColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRenameColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByConvertCharsetContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MariaDBParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MariaDBParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MariaDBParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MariaDBParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public AlterByConvertCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByConvertCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByConvertCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByConvertCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddForeignKeyContext : AlterSpecificationContext {
		public UidContext name;
		public UidContext indexName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MariaDBParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferenceDefinitionContext referenceDefinition() {
			return GetRuleContext<ReferenceDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MariaDBParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByAddForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddForeignKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddForeignKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddForeignKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRenameIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MariaDBParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MariaDBParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		public AlterByRenameIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByRenameIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByRenameIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRenameIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRenameContext : AlterSpecificationContext {
		public IToken renameFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MariaDBParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MariaDBParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		public AlterByRenameContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByRename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByRename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRename(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByImportTablespaceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MariaDBParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MariaDBParser.TABLESPACE, 0); }
		public AlterByImportTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByImportTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByImportTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByImportTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddDefinitionsContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext[] createDefinition() {
			return GetRuleContexts<CreateDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDefinitionContext createDefinition(int i) {
			return GetRuleContext<CreateDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MariaDBParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public AlterByAddDefinitionsContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddDefinitions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropConstraintCheckContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MariaDBParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MariaDBParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterByDropConstraintCheckContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropConstraintCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropConstraintCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropConstraintCheck(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddColumnsContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext[] columnDefinition() {
			return GetRuleContexts<ColumnDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition(int i) {
			return GetRuleContext<ColumnDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MariaDBParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public AlterByAddColumnsContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddColumns(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAlterIndexVisibilityContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MariaDBParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MariaDBParser.INVISIBLE, 0); }
		public AlterByAlterIndexVisibilityContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByAlterIndexVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByAlterIndexVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAlterIndexVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropForeignKeyContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN() { return GetToken(MariaDBParser.FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext dottedId() {
			return GetRuleContext<DottedIdContext>(0);
		}
		public AlterByDropForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropForeignKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropForeignKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropForeignKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddCheckTableConstraintContext : AlterSpecificationContext {
		public UidContext name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MariaDBParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MariaDBParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public AlterByAddCheckTableConstraintContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddCheckTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddCheckTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddCheckTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterPartitionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterPartitionSpecificationContext alterPartitionSpecification() {
			return GetRuleContext<AlterPartitionSpecificationContext>(0);
		}
		public AlterPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		public AlterByAddIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MariaDBParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MariaDBParser.RESTRICT, 0); }
		public AlterByDropColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByChangeDefaultContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MariaDBParser.COLUMN, 0); }
		public AlterByChangeDefaultContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByChangeDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByChangeDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByChangeDefault(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByForceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(MariaDBParser.FORCE, 0); }
		public AlterByForceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByForce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByForce(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByForce(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddSpecialIndexContext : AlterSpecificationContext {
		public IToken keyType;
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT() { return GetToken(MariaDBParser.FULLTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL() { return GetToken(MariaDBParser.SPATIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		public AlterByAddSpecialIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddSpecialIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddSpecialIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddSpecialIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByModifyColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(MariaDBParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MariaDBParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MariaDBParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MariaDBParser.AFTER, 0); }
		public AlterByModifyColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByModifyColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByModifyColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByModifyColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByTableOptionContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext[] tableOption() {
			return GetRuleContexts<TableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOptionContext tableOption(int i) {
			return GetRuleContext<TableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public AlterByTableOptionContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropPrimaryKeyContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MariaDBParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		public AlterByDropPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropPrimaryKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropPrimaryKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropPrimaryKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByLockContext : AlterSpecificationContext {
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MariaDBParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MariaDBParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(MariaDBParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(MariaDBParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public AlterByLockContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByLock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByLock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByLock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDiscardTablespaceContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MariaDBParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MariaDBParser.TABLESPACE, 0); }
		public AlterByDiscardTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByDiscardTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByDiscardTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDiscardTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByValidateContext : AlterSpecificationContext {
		public IToken validationFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MariaDBParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MariaDBParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		public AlterByValidateContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByValidate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByValidate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByValidate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddPrimaryKeyContext : AlterSpecificationContext {
		public UidContext name;
		public UidContext index;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MariaDBParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MariaDBParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		public AlterByAddPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddPrimaryKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddPrimaryKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddPrimaryKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByEnableKeysContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MariaDBParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MariaDBParser.KEYS, 0); }
		public AlterByEnableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByEnableKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByEnableKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByEnableKeys(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterBySetAlgorithmContext : AlterSpecificationContext {
		public IToken algType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MariaDBParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANT() { return GetToken(MariaDBParser.INSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE() { return GetToken(MariaDBParser.INPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MariaDBParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCOPY() { return GetToken(MariaDBParser.NOCOPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public AlterBySetAlgorithmContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterBySetAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterBySetAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterBySetAlgorithm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByChangeColumnContext : AlterSpecificationContext {
		public UidContext oldColumn;
		public UidContext newColumn;
		public UidContext afterColumn;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MariaDBParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MariaDBParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MariaDBParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MariaDBParser.AFTER, 0); }
		public AlterByChangeColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByChangeColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByChangeColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByChangeColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddUniqueKeyContext : AlterSpecificationContext {
		public UidContext name;
		public IToken indexFormat;
		public UidContext indexName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE() { return GetToken(MariaDBParser.UNIQUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNamesContext indexColumnNames() {
			return GetRuleContext<IndexColumnNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT() { return GetToken(MariaDBParser.CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		public AlterByAddUniqueKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddUniqueKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddUniqueKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddUniqueKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropIndexContext : AlterSpecificationContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterByDropIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddColumnContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN() { return GetToken(MariaDBParser.COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MariaDBParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MariaDBParser.AFTER, 0); }
		public AlterByAddColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddColumn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByOrderContext : AlterSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MariaDBParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MariaDBParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		public AlterByOrderContext(AlterSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterSpecificationContext alterSpecification() {
		AlterSpecificationContext _localctx = new AlterSpecificationContext(Context, State);
		EnterRule(_localctx, 160, RULE_alterSpecification);
		int _la;
		try {
			int _alt;
			State = 3024;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,397,Context) ) {
			case 1:
				_localctx = new AlterByTableOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2701;
				tableOption();
				State = 2708;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,340,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2703;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==COMMA) {
							{
							State = 2702;
							Match(COMMA);
							}
						}

						State = 2705;
						tableOption();
						}
						} 
					}
					State = 2710;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,340,Context);
				}
				}
				break;
			case 2:
				_localctx = new AlterByAddColumnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2711;
				Match(ADD);
				State = 2713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2712;
					Match(COLUMN);
					}
				}

				State = 2716;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,342,Context) ) {
				case 1:
					{
					State = 2715;
					ifNotExists();
					}
					break;
				}
				State = 2718;
				uid();
				State = 2719;
				columnDefinition();
				State = 2723;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2720;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2721;
					Match(AFTER);
					State = 2722;
					uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				_localctx = new AlterByAddColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2725;
				Match(ADD);
				State = 2727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2726;
					Match(COLUMN);
					}
				}

				State = 2730;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 2729;
					ifNotExists();
					}
				}

				State = 2732;
				Match(LR_BRACKET);
				State = 2733;
				uid();
				State = 2734;
				columnDefinition();
				State = 2741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2735;
					Match(COMMA);
					State = 2736;
					uid();
					State = 2737;
					columnDefinition();
					}
					}
					State = 2743;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2744;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new AlterByAddIndexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2746;
				Match(ADD);
				State = 2747;
				((AlterByAddIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByAddIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2749;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,347,Context) ) {
				case 1:
					{
					State = 2748;
					ifNotExists();
					}
					break;
				}
				State = 2752;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
					{
					State = 2751;
					uid();
					}
				}

				State = 2755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2754;
					indexType();
					}
				}

				State = 2757;
				indexColumnNames();
				State = 2761;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2758;
					indexOption();
					}
					}
					State = 2763;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 5:
				_localctx = new AlterByAddPrimaryKeyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2764;
				Match(ADD);
				State = 2769;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2765;
					Match(CONSTRAINT);
					State = 2767;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,351,Context) ) {
					case 1:
						{
						State = 2766;
						((AlterByAddPrimaryKeyContext)_localctx).name = uid();
						}
						break;
					}
					}
				}

				State = 2771;
				Match(PRIMARY);
				State = 2772;
				Match(KEY);
				State = 2774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
					{
					State = 2773;
					((AlterByAddPrimaryKeyContext)_localctx).index = uid();
					}
				}

				State = 2777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2776;
					indexType();
					}
				}

				State = 2779;
				indexColumnNames();
				State = 2783;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2780;
					indexOption();
					}
					}
					State = 2785;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new AlterByAddUniqueKeyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2786;
				Match(ADD);
				State = 2791;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2787;
					Match(CONSTRAINT);
					State = 2789;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
						{
						State = 2788;
						((AlterByAddUniqueKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2793;
				Match(UNIQUE);
				State = 2795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 2794;
					((AlterByAddUniqueKeyContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddUniqueKeyContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2798;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,359,Context) ) {
				case 1:
					{
					State = 2797;
					ifNotExists();
					}
					break;
				}
				State = 2801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
					{
					State = 2800;
					((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
					}
				}

				State = 2804;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 2803;
					indexType();
					}
				}

				State = 2806;
				indexColumnNames();
				State = 2810;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2807;
					indexOption();
					}
					}
					State = 2812;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new AlterByAddSpecialIndexContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2813;
				Match(ADD);
				State = 2814;
				((AlterByAddSpecialIndexContext)_localctx).keyType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
					((AlterByAddSpecialIndexContext)_localctx).keyType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 2815;
					((AlterByAddSpecialIndexContext)_localctx).indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((AlterByAddSpecialIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
					{
					State = 2818;
					uid();
					}
				}

				State = 2821;
				indexColumnNames();
				State = 2825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					State = 2822;
					indexOption();
					}
					}
					State = 2827;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new AlterByAddForeignKeyContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2828;
				Match(ADD);
				State = 2833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2829;
					Match(CONSTRAINT);
					State = 2831;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
						{
						State = 2830;
						((AlterByAddForeignKeyContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2835;
				Match(FOREIGN);
				State = 2836;
				Match(KEY);
				State = 2838;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
				case 1:
					{
					State = 2837;
					ifNotExists();
					}
					break;
				}
				State = 2841;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
					{
					State = 2840;
					((AlterByAddForeignKeyContext)_localctx).indexName = uid();
					}
				}

				State = 2843;
				indexColumnNames();
				State = 2844;
				referenceDefinition();
				}
				break;
			case 9:
				_localctx = new AlterByAddCheckTableConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2846;
				Match(ADD);
				State = 2851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT) {
					{
					State = 2847;
					Match(CONSTRAINT);
					State = 2849;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
						{
						State = 2848;
						((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				State = 2853;
				Match(CHECK);
				State = 2854;
				Match(LR_BRACKET);
				State = 2855;
				expression(0);
				State = 2856;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new AlterBySetAlgorithmContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2858;
				Match(ALGORITHM);
				State = 2860;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2859;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2862;
				((AlterBySetAlgorithmContext)_localctx).algType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE || _la==INSTANT || _la==NOCOPY) ) {
					((AlterBySetAlgorithmContext)_localctx).algType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				_localctx = new AlterByChangeDefaultContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2863;
				Match(ALTER);
				State = 2865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2864;
					Match(COLUMN);
					}
				}

				State = 2867;
				uid();
				State = 2873;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SET:
					{
					State = 2868;
					Match(SET);
					State = 2869;
					Match(DEFAULT);
					State = 2870;
					defaultValue();
					}
					break;
				case DROP:
					{
					State = 2871;
					Match(DROP);
					State = 2872;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 12:
				_localctx = new AlterByChangeColumnContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2875;
				Match(CHANGE);
				State = 2877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2876;
					Match(COLUMN);
					}
				}

				State = 2880;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,376,Context) ) {
				case 1:
					{
					State = 2879;
					ifExists();
					}
					break;
				}
				State = 2882;
				((AlterByChangeColumnContext)_localctx).oldColumn = uid();
				State = 2883;
				((AlterByChangeColumnContext)_localctx).newColumn = uid();
				State = 2884;
				columnDefinition();
				State = 2888;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2885;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2886;
					Match(AFTER);
					State = 2887;
					((AlterByChangeColumnContext)_localctx).afterColumn = uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 13:
				_localctx = new AlterByRenameColumnContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2890;
				Match(RENAME);
				State = 2891;
				Match(COLUMN);
				State = 2892;
				((AlterByRenameColumnContext)_localctx).oldColumn = uid();
				State = 2893;
				Match(TO);
				State = 2894;
				((AlterByRenameColumnContext)_localctx).newColumn = uid();
				}
				break;
			case 14:
				_localctx = new AlterByLockContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2896;
				Match(LOCK);
				State = 2898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 2897;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 2900;
				((AlterByLockContext)_localctx).lockType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
					((AlterByLockContext)_localctx).lockType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				_localctx = new AlterByModifyColumnContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2901;
				Match(MODIFY);
				State = 2903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2902;
					Match(COLUMN);
					}
				}

				State = 2906;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,380,Context) ) {
				case 1:
					{
					State = 2905;
					ifExists();
					}
					break;
				}
				State = 2908;
				uid();
				State = 2909;
				columnDefinition();
				State = 2913;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST:
					{
					State = 2910;
					Match(FIRST);
					}
					break;
				case AFTER:
					{
					State = 2911;
					Match(AFTER);
					State = 2912;
					uid();
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PARTITION:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 16:
				_localctx = new AlterByDropColumnContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2915;
				Match(DROP);
				State = 2917;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 2916;
					Match(COLUMN);
					}
				}

				State = 2920;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,383,Context) ) {
				case 1:
					{
					State = 2919;
					ifExists();
					}
					break;
				}
				State = 2922;
				uid();
				State = 2924;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RESTRICT) {
					{
					State = 2923;
					Match(RESTRICT);
					}
				}

				}
				break;
			case 17:
				_localctx = new AlterByDropConstraintCheckContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2926;
				Match(DROP);
				State = 2927;
				_la = TokenStream.LA(1);
				if ( !(_la==CHECK || _la==CONSTRAINT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2929;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,385,Context) ) {
				case 1:
					{
					State = 2928;
					ifExists();
					}
					break;
				}
				State = 2931;
				uid();
				}
				break;
			case 18:
				_localctx = new AlterByDropPrimaryKeyContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2932;
				Match(DROP);
				State = 2933;
				Match(PRIMARY);
				State = 2934;
				Match(KEY);
				}
				break;
			case 19:
				_localctx = new AlterByDropIndexContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2935;
				Match(DROP);
				State = 2936;
				((AlterByDropIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByDropIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2938;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,386,Context) ) {
				case 1:
					{
					State = 2937;
					ifExists();
					}
					break;
				}
				State = 2940;
				uid();
				}
				break;
			case 20:
				_localctx = new AlterByRenameIndexContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2941;
				Match(RENAME);
				State = 2942;
				((AlterByRenameIndexContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((AlterByRenameIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2943;
				uid();
				State = 2944;
				Match(TO);
				State = 2945;
				uid();
				}
				break;
			case 21:
				_localctx = new AlterByAlterIndexVisibilityContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2947;
				Match(ALTER);
				State = 2948;
				Match(INDEX);
				State = 2949;
				uid();
				State = 2950;
				_la = TokenStream.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 22:
				_localctx = new AlterByDropForeignKeyContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2952;
				Match(DROP);
				State = 2953;
				Match(FOREIGN);
				State = 2954;
				Match(KEY);
				State = 2956;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,387,Context) ) {
				case 1:
					{
					State = 2955;
					ifExists();
					}
					break;
				}
				State = 2958;
				uid();
				State = 2960;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT || _la==DOT_ID) {
					{
					State = 2959;
					dottedId();
					}
				}

				}
				break;
			case 23:
				_localctx = new AlterByDisableKeysContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2962;
				Match(DISABLE);
				State = 2963;
				Match(KEYS);
				}
				break;
			case 24:
				_localctx = new AlterByEnableKeysContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2964;
				Match(ENABLE);
				State = 2965;
				Match(KEYS);
				}
				break;
			case 25:
				_localctx = new AlterByRenameContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2966;
				Match(RENAME);
				State = 2968;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS || _la==TO) {
					{
					State = 2967;
					((AlterByRenameContext)_localctx).renameFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==AS || _la==TO) ) {
						((AlterByRenameContext)_localctx).renameFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 2972;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,390,Context) ) {
				case 1:
					{
					State = 2970;
					uid();
					}
					break;
				case 2:
					{
					State = 2971;
					fullId();
					}
					break;
				}
				}
				break;
			case 26:
				_localctx = new AlterByOrderContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2974;
				Match(ORDER);
				State = 2975;
				Match(BY);
				State = 2976;
				uidList();
				}
				break;
			case 27:
				_localctx = new AlterByConvertCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2977;
				Match(CONVERT);
				State = 2978;
				Match(TO);
				State = 2979;
				Match(CHARACTER);
				State = 2980;
				Match(SET);
				State = 2981;
				charsetName();
				State = 2984;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2982;
					Match(COLLATE);
					State = 2983;
					collationName();
					}
				}

				}
				break;
			case 28:
				_localctx = new AlterByDefaultCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT) {
					{
					State = 2986;
					Match(DEFAULT);
					}
				}

				State = 2989;
				Match(CHARACTER);
				State = 2990;
				Match(SET);
				State = 2991;
				Match(EQUAL_SYMBOL);
				State = 2992;
				charsetName();
				State = 2996;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE) {
					{
					State = 2993;
					Match(COLLATE);
					State = 2994;
					Match(EQUAL_SYMBOL);
					State = 2995;
					collationName();
					}
				}

				}
				break;
			case 29:
				_localctx = new AlterByDiscardTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2998;
				Match(DISCARD);
				State = 2999;
				Match(TABLESPACE);
				}
				break;
			case 30:
				_localctx = new AlterByImportTablespaceContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 3000;
				Match(IMPORT);
				State = 3001;
				Match(TABLESPACE);
				}
				break;
			case 31:
				_localctx = new AlterByForceContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 3002;
				Match(FORCE);
				}
				break;
			case 32:
				_localctx = new AlterByValidateContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 3003;
				((AlterByValidateContext)_localctx).validationFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
					((AlterByValidateContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3004;
				Match(VALIDATION);
				}
				break;
			case 33:
				_localctx = new AlterByAddDefinitionsContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 3005;
				Match(ADD);
				State = 3007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLUMN) {
					{
					State = 3006;
					Match(COLUMN);
					}
				}

				State = 3010;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 3009;
					ifNotExists();
					}
				}

				State = 3012;
				Match(LR_BRACKET);
				State = 3013;
				createDefinition();
				State = 3018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3014;
					Match(COMMA);
					State = 3015;
					createDefinition();
					}
					}
					State = 3020;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3021;
				Match(RR_BRACKET);
				}
				break;
			case 34:
				_localctx = new AlterPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 3023;
				alterPartitionSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionSpecificationContext : ParserRuleContext {
		public AlterPartitionSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartitionSpecification; } }
	 
		public AlterPartitionSpecificationContext() { }
		public virtual void CopyFrom(AlterPartitionSpecificationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterByImportPartitionContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MariaDBParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MariaDBParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		public AlterByImportPartitionContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByImportPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByImportPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByImportPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDropPartitionContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterByDropPartitionContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByDropPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByDropPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDropPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByDiscardPartitionContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MariaDBParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MariaDBParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		public AlterByDiscardPartitionContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByDiscardPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByDiscardPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByDiscardPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAddPartitionContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(MariaDBParser.ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public AlterByAddPartitionContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByAddPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByAddPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAddPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRemovePartitioningContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(MariaDBParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MariaDBParser.PARTITIONING, 0); }
		public AlterByRemovePartitioningContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByRemovePartitioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByRemovePartitioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRemovePartitioning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByOptimizePartitionContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(MariaDBParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		public AlterByOptimizePartitionContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByOptimizePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByOptimizePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByOptimizePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByCheckPartitionContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MariaDBParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		public AlterByCheckPartitionContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByCheckPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByCheckPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByCheckPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByCoalescePartitionContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(MariaDBParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public AlterByCoalescePartitionContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByCoalescePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByCoalescePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByCoalescePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByReorganizePartitionContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE() { return GetToken(MariaDBParser.REORGANIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MariaDBParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public AlterByReorganizePartitionContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByReorganizePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByReorganizePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByReorganizePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByAnalyzePartitionContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(MariaDBParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		public AlterByAnalyzePartitionContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByAnalyzePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByAnalyzePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByAnalyzePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRebuildPartitionContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(MariaDBParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		public AlterByRebuildPartitionContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByRebuildPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByRebuildPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRebuildPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByUpgradePartitioningContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MariaDBParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MariaDBParser.PARTITIONING, 0); }
		public AlterByUpgradePartitioningContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByUpgradePartitioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByUpgradePartitioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByUpgradePartitioning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByTruncatePartitionContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MariaDBParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		public AlterByTruncatePartitionContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByTruncatePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByTruncatePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByTruncatePartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByRepairPartitionContext : AlterPartitionSpecificationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MariaDBParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		public AlterByRepairPartitionContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByRepairPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByRepairPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByRepairPartition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterByExchangePartitionContext : AlterPartitionSpecificationContext {
		public IToken validationFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE() { return GetToken(MariaDBParser.EXCHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(MariaDBParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(MariaDBParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MariaDBParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MariaDBParser.WITHOUT, 0); }
		public AlterByExchangePartitionContext(AlterPartitionSpecificationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterByExchangePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterByExchangePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterByExchangePartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionSpecificationContext alterPartitionSpecification() {
		AlterPartitionSpecificationContext _localctx = new AlterPartitionSpecificationContext(Context, State);
		EnterRule(_localctx, 162, RULE_alterPartitionSpecification);
		int _la;
		try {
			State = 3130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				_localctx = new AlterByAddPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3026;
				Match(ADD);
				State = 3027;
				Match(PARTITION);
				State = 3029;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 3028;
					ifNotExists();
					}
				}

				State = 3031;
				Match(LR_BRACKET);
				State = 3032;
				partitionDefinition();
				State = 3037;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3033;
					Match(COMMA);
					State = 3034;
					partitionDefinition();
					}
					}
					State = 3039;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3040;
				Match(RR_BRACKET);
				}
				break;
			case DROP:
				_localctx = new AlterByDropPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3042;
				Match(DROP);
				State = 3043;
				Match(PARTITION);
				State = 3045;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,400,Context) ) {
				case 1:
					{
					State = 3044;
					ifExists();
					}
					break;
				}
				State = 3047;
				uidList();
				}
				break;
			case DISCARD:
				_localctx = new AlterByDiscardPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3048;
				Match(DISCARD);
				State = 3049;
				Match(PARTITION);
				State = 3052;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BODY:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_ROLE:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case PACKAGE:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case STATEMENT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTED:
				case ENCRYPTION:
				case ENCRYPTION_KEY_ID:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOCALES:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUERY_RESPONSE_TIME:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLAVES:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case TYPES:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WSREP_MEMBERSHIP:
				case WSREP_STATUS:
				case X509:
				case XA:
				case XML:
				case YES:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case USER_STATISTICS:
				case CLIENT_STATISTICS:
				case INDEX_STATISTICS:
				case TABLE_STATISTICS:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICAS:
				case REPLICATION_MASTER_ADMIN:
				case MONITOR:
				case READ_ONLY:
				case REPLAY:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
					{
					State = 3050;
					uidList();
					}
					break;
				case ALL:
					{
					State = 3051;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3054;
				Match(TABLESPACE);
				}
				break;
			case IMPORT:
				_localctx = new AlterByImportPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3055;
				Match(IMPORT);
				State = 3056;
				Match(PARTITION);
				State = 3059;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BODY:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_ROLE:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case PACKAGE:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case STATEMENT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTED:
				case ENCRYPTION:
				case ENCRYPTION_KEY_ID:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOCALES:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUERY_RESPONSE_TIME:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLAVES:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case TYPES:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WSREP_MEMBERSHIP:
				case WSREP_STATUS:
				case X509:
				case XA:
				case XML:
				case YES:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case USER_STATISTICS:
				case CLIENT_STATISTICS:
				case INDEX_STATISTICS:
				case TABLE_STATISTICS:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICAS:
				case REPLICATION_MASTER_ADMIN:
				case MONITOR:
				case READ_ONLY:
				case REPLAY:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
					{
					State = 3057;
					uidList();
					}
					break;
				case ALL:
					{
					State = 3058;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3061;
				Match(TABLESPACE);
				}
				break;
			case TRUNCATE:
				_localctx = new AlterByTruncatePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3062;
				Match(TRUNCATE);
				State = 3063;
				Match(PARTITION);
				State = 3066;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BODY:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_ROLE:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case PACKAGE:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case STATEMENT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTED:
				case ENCRYPTION:
				case ENCRYPTION_KEY_ID:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOCALES:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUERY_RESPONSE_TIME:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLAVES:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case TYPES:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WSREP_MEMBERSHIP:
				case WSREP_STATUS:
				case X509:
				case XA:
				case XML:
				case YES:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case USER_STATISTICS:
				case CLIENT_STATISTICS:
				case INDEX_STATISTICS:
				case TABLE_STATISTICS:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICAS:
				case REPLICATION_MASTER_ADMIN:
				case MONITOR:
				case READ_ONLY:
				case REPLAY:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
					{
					State = 3064;
					uidList();
					}
					break;
				case ALL:
					{
					State = 3065;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case COALESCE:
				_localctx = new AlterByCoalescePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 3068;
				Match(COALESCE);
				State = 3069;
				Match(PARTITION);
				State = 3070;
				decimalLiteral();
				}
				break;
			case REORGANIZE:
				_localctx = new AlterByReorganizePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 3071;
				Match(REORGANIZE);
				State = 3072;
				Match(PARTITION);
				State = 3073;
				uidList();
				State = 3074;
				Match(INTO);
				State = 3075;
				Match(LR_BRACKET);
				State = 3076;
				partitionDefinition();
				State = 3081;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3077;
					Match(COMMA);
					State = 3078;
					partitionDefinition();
					}
					}
					State = 3083;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3084;
				Match(RR_BRACKET);
				}
				break;
			case EXCHANGE:
				_localctx = new AlterByExchangePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 3086;
				Match(EXCHANGE);
				State = 3087;
				Match(PARTITION);
				State = 3088;
				uid();
				State = 3089;
				Match(WITH);
				State = 3090;
				Match(TABLE);
				State = 3091;
				tableName();
				State = 3094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH || _la==WITHOUT) {
					{
					State = 3092;
					((AlterByExchangePartitionContext)_localctx).validationFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
						((AlterByExchangePartitionContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3093;
					Match(VALIDATION);
					}
				}

				}
				break;
			case ANALYZE:
				_localctx = new AlterByAnalyzePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 3096;
				Match(ANALYZE);
				State = 3097;
				Match(PARTITION);
				State = 3100;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BODY:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_ROLE:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case PACKAGE:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case STATEMENT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTED:
				case ENCRYPTION:
				case ENCRYPTION_KEY_ID:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOCALES:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUERY_RESPONSE_TIME:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLAVES:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case TYPES:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WSREP_MEMBERSHIP:
				case WSREP_STATUS:
				case X509:
				case XA:
				case XML:
				case YES:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case USER_STATISTICS:
				case CLIENT_STATISTICS:
				case INDEX_STATISTICS:
				case TABLE_STATISTICS:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICAS:
				case REPLICATION_MASTER_ADMIN:
				case MONITOR:
				case READ_ONLY:
				case REPLAY:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
					{
					State = 3098;
					uidList();
					}
					break;
				case ALL:
					{
					State = 3099;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CHECK:
				_localctx = new AlterByCheckPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 3102;
				Match(CHECK);
				State = 3103;
				Match(PARTITION);
				State = 3106;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BODY:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_ROLE:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case PACKAGE:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case STATEMENT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTED:
				case ENCRYPTION:
				case ENCRYPTION_KEY_ID:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOCALES:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUERY_RESPONSE_TIME:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLAVES:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case TYPES:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WSREP_MEMBERSHIP:
				case WSREP_STATUS:
				case X509:
				case XA:
				case XML:
				case YES:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case USER_STATISTICS:
				case CLIENT_STATISTICS:
				case INDEX_STATISTICS:
				case TABLE_STATISTICS:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICAS:
				case REPLICATION_MASTER_ADMIN:
				case MONITOR:
				case READ_ONLY:
				case REPLAY:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
					{
					State = 3104;
					uidList();
					}
					break;
				case ALL:
					{
					State = 3105;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case OPTIMIZE:
				_localctx = new AlterByOptimizePartitionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 3108;
				Match(OPTIMIZE);
				State = 3109;
				Match(PARTITION);
				State = 3112;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BODY:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_ROLE:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case PACKAGE:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case STATEMENT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTED:
				case ENCRYPTION:
				case ENCRYPTION_KEY_ID:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOCALES:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUERY_RESPONSE_TIME:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLAVES:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case TYPES:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WSREP_MEMBERSHIP:
				case WSREP_STATUS:
				case X509:
				case XA:
				case XML:
				case YES:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case USER_STATISTICS:
				case CLIENT_STATISTICS:
				case INDEX_STATISTICS:
				case TABLE_STATISTICS:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICAS:
				case REPLICATION_MASTER_ADMIN:
				case MONITOR:
				case READ_ONLY:
				case REPLAY:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
					{
					State = 3110;
					uidList();
					}
					break;
				case ALL:
					{
					State = 3111;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case REBUILD:
				_localctx = new AlterByRebuildPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 3114;
				Match(REBUILD);
				State = 3115;
				Match(PARTITION);
				State = 3118;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BODY:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_ROLE:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case PACKAGE:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case STATEMENT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTED:
				case ENCRYPTION:
				case ENCRYPTION_KEY_ID:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOCALES:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUERY_RESPONSE_TIME:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLAVES:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case TYPES:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WSREP_MEMBERSHIP:
				case WSREP_STATUS:
				case X509:
				case XA:
				case XML:
				case YES:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case USER_STATISTICS:
				case CLIENT_STATISTICS:
				case INDEX_STATISTICS:
				case TABLE_STATISTICS:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICAS:
				case REPLICATION_MASTER_ADMIN:
				case MONITOR:
				case READ_ONLY:
				case REPLAY:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
					{
					State = 3116;
					uidList();
					}
					break;
				case ALL:
					{
					State = 3117;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case REPAIR:
				_localctx = new AlterByRepairPartitionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 3120;
				Match(REPAIR);
				State = 3121;
				Match(PARTITION);
				State = 3124;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BODY:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_ROLE:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case PACKAGE:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case STATEMENT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTED:
				case ENCRYPTION:
				case ENCRYPTION_KEY_ID:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOCALES:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUERY_RESPONSE_TIME:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLAVES:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case TYPES:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WSREP_MEMBERSHIP:
				case WSREP_STATUS:
				case X509:
				case XA:
				case XML:
				case YES:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case USER_STATISTICS:
				case CLIENT_STATISTICS:
				case INDEX_STATISTICS:
				case TABLE_STATISTICS:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICAS:
				case REPLICATION_MASTER_ADMIN:
				case MONITOR:
				case READ_ONLY:
				case REPLAY:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
					{
					State = 3122;
					uidList();
					}
					break;
				case ALL:
					{
					State = 3123;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case REMOVE:
				_localctx = new AlterByRemovePartitioningContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 3126;
				Match(REMOVE);
				State = 3127;
				Match(PARTITIONING);
				}
				break;
			case UPGRADE:
				_localctx = new AlterByUpgradePartitioningContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 3128;
				Match(UPGRADE);
				State = 3129;
				Match(PARTITIONING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropDatabaseContext : ParserRuleContext {
		public IToken dbFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MariaDBParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MariaDBParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropDatabaseContext dropDatabase() {
		DropDatabaseContext _localctx = new DropDatabaseContext(Context, State);
		EnterRule(_localctx, 164, RULE_dropDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3132;
			Match(DROP);
			State = 3133;
			_localctx.dbFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				_localctx.dbFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,412,Context) ) {
			case 1:
				{
				State = 3134;
				ifExists();
				}
				break;
			}
			State = 3137;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MariaDBParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropEvent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropEventContext dropEvent() {
		DropEventContext _localctx = new DropEventContext(Context, State);
		EnterRule(_localctx, 166, RULE_dropEvent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3139;
			Match(DROP);
			State = 3140;
			Match(EVENT);
			State = 3142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,413,Context) ) {
			case 1:
				{
				State = 3141;
				ifExists();
				}
				break;
			}
			State = 3144;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public IToken intimeAction;
		public IToken algType;
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALGORITHM() { return GetTokens(MariaDBParser.ALGORITHM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM(int i) {
			return GetToken(MariaDBParser.ALGORITHM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCK() { return GetTokens(MariaDBParser.LOCK); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK(int i) {
			return GetToken(MariaDBParser.LOCK, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MariaDBParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MariaDBParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT() { return GetTokens(MariaDBParser.DEFAULT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT(int i) {
			return GetToken(MariaDBParser.DEFAULT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INPLACE() { return GetTokens(MariaDBParser.INPLACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE(int i) {
			return GetToken(MariaDBParser.INPLACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COPY() { return GetTokens(MariaDBParser.COPY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY(int i) {
			return GetToken(MariaDBParser.COPY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NONE() { return GetTokens(MariaDBParser.NONE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE(int i) {
			return GetToken(MariaDBParser.NONE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SHARED() { return GetTokens(MariaDBParser.SHARED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED(int i) {
			return GetToken(MariaDBParser.SHARED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCLUSIVE() { return GetTokens(MariaDBParser.EXCLUSIVE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE(int i) {
			return GetToken(MariaDBParser.EXCLUSIVE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(Context, State);
		EnterRule(_localctx, 168, RULE_dropIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3146;
			Match(DROP);
			State = 3147;
			Match(INDEX);
			State = 3149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,414,Context) ) {
			case 1:
				{
				State = 3148;
				ifExists();
				}
				break;
			}
			State = 3152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,415,Context) ) {
			case 1:
				{
				State = 3151;
				_localctx.intimeAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==OFFLINE || _la==ONLINE) ) {
					_localctx.intimeAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 3154;
			uid();
			State = 3155;
			Match(ON);
			State = 3156;
			tableName();
			State = 3169;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,419,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 3167;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case ALGORITHM:
						{
						State = 3157;
						Match(ALGORITHM);
						State = 3159;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 3158;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 3161;
						_localctx.algType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==COPY || _la==INPLACE) ) {
							_localctx.algType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case LOCK:
						{
						State = 3162;
						Match(LOCK);
						State = 3164;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==EQUAL_SYMBOL) {
							{
							State = 3163;
							Match(EQUAL_SYMBOL);
							}
						}

						State = 3166;
						_localctx.lockType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT || _la==EXCLUSIVE || _la==NONE || _la==SHARED) ) {
							_localctx.lockType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 3171;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,419,Context);
			}
			State = 3173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 3172;
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MariaDBParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MariaDBParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MariaDBParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropLogfileGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupContext dropLogfileGroup() {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(Context, State);
		EnterRule(_localctx, 170, RULE_dropLogfileGroup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3175;
			Match(DROP);
			State = 3176;
			Match(LOGFILE);
			State = 3177;
			Match(GROUP);
			State = 3178;
			uid();
			State = 3179;
			Match(ENGINE);
			State = 3180;
			Match(EQUAL_SYMBOL);
			State = 3181;
			engineName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MariaDBParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropProcedure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(Context, State);
		EnterRule(_localctx, 172, RULE_dropProcedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3183;
			Match(DROP);
			State = 3184;
			Match(PROCEDURE);
			State = 3186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,421,Context) ) {
			case 1:
				{
				State = 3185;
				ifExists();
				}
				break;
			}
			State = 3188;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MariaDBParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropFunctionContext dropFunction() {
		DropFunctionContext _localctx = new DropFunctionContext(Context, State);
		EnterRule(_localctx, 174, RULE_dropFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3190;
			Match(DROP);
			State = 3191;
			Match(FUNCTION);
			State = 3193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,422,Context) ) {
			case 1:
				{
				State = 3192;
				ifExists();
				}
				break;
			}
			State = 3195;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MariaDBParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropServer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropServerContext dropServer() {
		DropServerContext _localctx = new DropServerContext(Context, State);
		EnterRule(_localctx, 176, RULE_dropServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3197;
			Match(DROP);
			State = 3198;
			Match(SERVER);
			State = 3200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,423,Context) ) {
			case 1:
				{
				State = 3199;
				ifExists();
				}
				break;
			}
			State = 3202;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public IToken dropType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MariaDBParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MariaDBParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MariaDBParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(Context, State);
		EnterRule(_localctx, 178, RULE_dropTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3204;
			Match(DROP);
			State = 3206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY) {
				{
				State = 3205;
				Match(TEMPORARY);
				}
			}

			State = 3208;
			Match(TABLE);
			State = 3210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,425,Context) ) {
			case 1:
				{
				State = 3209;
				ifExists();
				}
				break;
			}
			State = 3212;
			tables();
			State = 3214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 3213;
				waitNowaitClause();
				}
			}

			State = 3217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 3216;
				_localctx.dropType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_localctx.dropType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MariaDBParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MariaDBParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTablespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTablespaceContext dropTablespace() {
		DropTablespaceContext _localctx = new DropTablespaceContext(Context, State);
		EnterRule(_localctx, 180, RULE_dropTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3219;
			Match(DROP);
			State = 3220;
			Match(TABLESPACE);
			State = 3221;
			uid();
			State = 3227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE) {
				{
				State = 3222;
				Match(ENGINE);
				State = 3224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					State = 3223;
					Match(EQUAL_SYMBOL);
					}
				}

				State = 3226;
				engineName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MariaDBParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTriggerContext dropTrigger() {
		DropTriggerContext _localctx = new DropTriggerContext(Context, State);
		EnterRule(_localctx, 182, RULE_dropTrigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3229;
			Match(DROP);
			State = 3230;
			Match(TRIGGER);
			State = 3232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,430,Context) ) {
			case 1:
				{
				State = 3231;
				ifExists();
				}
				break;
			}
			State = 3234;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropViewContext : ParserRuleContext {
		public IToken dropType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MariaDBParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT() { return GetToken(MariaDBParser.RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE() { return GetToken(MariaDBParser.CASCADE, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropViewContext dropView() {
		DropViewContext _localctx = new DropViewContext(Context, State);
		EnterRule(_localctx, 184, RULE_dropView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3236;
			Match(DROP);
			State = 3237;
			Match(VIEW);
			State = 3239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,431,Context) ) {
			case 1:
				{
				State = 3238;
				ifExists();
				}
				break;
			}
			State = 3241;
			fullId();
			State = 3246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3242;
				Match(COMMA);
				State = 3243;
				fullId();
				}
				}
				State = 3248;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				State = 3249;
				_localctx.dropType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_localctx.dropType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MariaDBParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext[] roleName() {
			return GetRuleContexts<RoleNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext roleName(int i) {
			return GetRuleContext<RoleNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropRoleContext dropRole() {
		DropRoleContext _localctx = new DropRoleContext(Context, State);
		EnterRule(_localctx, 186, RULE_dropRole);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3252;
			Match(DROP);
			State = 3253;
			Match(ROLE);
			State = 3255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,434,Context) ) {
			case 1:
				{
				State = 3254;
				ifExists();
				}
				break;
			}
			State = 3257;
			roleName();
			State = 3262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3258;
				Match(COMMA);
				State = 3259;
				roleName();
				}
				}
				State = 3264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MariaDBParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MariaDBParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MariaDBParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext[] roleName() {
			return GetRuleContexts<RoleNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleNameContext roleName(int i) {
			return GetRuleContext<RoleNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOptionContext roleOption() {
			return GetRuleContext<RoleOptionContext>(0);
		}
		public SetRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSetRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSetRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetRoleContext setRole() {
		SetRoleContext _localctx = new SetRoleContext(Context, State);
		EnterRule(_localctx, 188, RULE_setRole);
		int _la;
		try {
			State = 3298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,441,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3265;
				Match(SET);
				State = 3266;
				Match(DEFAULT);
				State = 3267;
				Match(ROLE);
				State = 3278;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,437,Context) ) {
				case 1:
					{
					State = 3268;
					Match(NONE);
					}
					break;
				case 2:
					{
					State = 3269;
					Match(ALL);
					}
					break;
				case 3:
					{
					State = 3270;
					roleName();
					State = 3275;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 3271;
						Match(COMMA);
						State = 3272;
						roleName();
						}
						}
						State = 3277;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				}
				State = 3280;
				Match(TO);
				State = 3283;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,438,Context) ) {
				case 1:
					{
					State = 3281;
					userName();
					}
					break;
				case 2:
					{
					State = 3282;
					uid();
					}
					break;
				}
				State = 3292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3285;
					Match(COMMA);
					State = 3288;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,439,Context) ) {
					case 1:
						{
						State = 3286;
						userName();
						}
						break;
					case 2:
						{
						State = 3287;
						uid();
						}
						break;
					}
					}
					}
					State = 3294;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3295;
				Match(SET);
				State = 3296;
				Match(ROLE);
				State = 3297;
				roleOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(MariaDBParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MariaDBParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_INPUT() { return GetToken(MariaDBParser.COMMENT_INPUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public DropSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropSequenceContext dropSequence() {
		DropSequenceContext _localctx = new DropSequenceContext(Context, State);
		EnterRule(_localctx, 190, RULE_dropSequence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3300;
			Match(DROP);
			State = 3302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY) {
				{
				State = 3301;
				Match(TEMPORARY);
				}
			}

			State = 3304;
			Match(SEQUENCE);
			State = 3306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
			case 1:
				{
				State = 3305;
				ifExists();
				}
				break;
			}
			State = 3309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_INPUT) {
				{
				State = 3308;
				Match(COMMENT_INPUT);
				}
			}

			State = 3311;
			fullId();
			State = 3316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3312;
				Match(COMMA);
				State = 3313;
				fullId();
				}
				}
				State = 3318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MariaDBParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableClauseContext[] renameTableClause() {
			return GetRuleContexts<RenameTableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableClauseContext renameTableClause(int i) {
			return GetRuleContext<RenameTableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRenameTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRenameTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableContext renameTable() {
		RenameTableContext _localctx = new RenameTableContext(Context, State);
		EnterRule(_localctx, 192, RULE_renameTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3319;
			Match(RENAME);
			State = 3320;
			Match(TABLE);
			State = 3322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,446,Context) ) {
			case 1:
				{
				State = 3321;
				ifExists();
				}
				break;
			}
			State = 3324;
			renameTableClause();
			State = 3329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3325;
				Match(COMMA);
				State = 3326;
				renameTableClause();
				}
				}
				State = 3331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MariaDBParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTableClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRenameTableClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRenameTableClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameTableClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableClauseContext renameTableClause() {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(Context, State);
		EnterRule(_localctx, 194, RULE_renameTableClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3332;
			tableName();
			State = 3334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 3333;
				waitNowaitClause();
				}
			}

			State = 3336;
			Match(TO);
			State = 3337;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MariaDBParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		public TruncateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTruncateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTruncateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableContext truncateTable() {
		TruncateTableContext _localctx = new TruncateTableContext(Context, State);
		EnterRule(_localctx, 196, RULE_truncateTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3339;
			Match(TRUNCATE);
			State = 3341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLE) {
				{
				State = 3340;
				Match(TABLE);
				}
			}

			State = 3343;
			tableName();
			State = 3345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 3344;
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL() { return GetToken(MariaDBParser.CALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 198, RULE_callStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3347;
			Match(CALL);
			State = 3348;
			fullId();
			State = 3355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,452,Context) ) {
			case 1:
				{
				State = 3349;
				Match(LR_BRACKET);
				State = 3352;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,451,Context) ) {
				case 1:
					{
					State = 3350;
					constants();
					}
					break;
				case 2:
					{
					State = 3351;
					expressions();
					}
					break;
				}
				State = 3354;
				Match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleDeleteStatementContext singleDeleteStatement() {
			return GetRuleContext<SingleDeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultipleDeleteStatementContext multipleDeleteStatement() {
			return GetRuleContext<MultipleDeleteStatementContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 200, RULE_deleteStatement);
		try {
			State = 3359;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,453,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3357;
				singleDeleteStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3358;
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MariaDBParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 202, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3361;
			Match(DO);
			State = 3362;
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HandlerOpenStatementContext handlerOpenStatement() {
			return GetRuleContext<HandlerOpenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return GetRuleContext<HandlerReadIndexStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerReadStatementContext handlerReadStatement() {
			return GetRuleContext<HandlerReadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerCloseStatementContext handlerCloseStatement() {
			return GetRuleContext<HandlerCloseStatementContext>(0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHandlerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHandlerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerStatementContext handlerStatement() {
		HandlerStatementContext _localctx = new HandlerStatementContext(Context, State);
		EnterRule(_localctx, 204, RULE_handlerStatement);
		try {
			State = 3368;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,454,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3364;
				handlerOpenStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3365;
				handlerReadIndexStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3366;
				handlerReadStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3367;
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		public IToken priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext _updatedElement;
		public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public IList<UpdatedElementContext> _duplicatedElements = new List<UpdatedElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MariaDBParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementValueContext insertStatementValue() {
			return GetRuleContext<InsertStatementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MariaDBParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MariaDBParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE() { return GetToken(MariaDBParser.DUPLICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MariaDBParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MariaDBParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED() { return GetToken(MariaDBParser.DELAYED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY() { return GetToken(MariaDBParser.HIGH_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 206, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3370;
			Match(INSERT);
			State = 3372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & 4611686020574871553L) != 0)) {
				{
				State = 3371;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & 4611686020574871553L) != 0)) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3374;
				Match(IGNORE);
				}
			}

			State = 3378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 3377;
				Match(INTO);
				}
			}

			State = 3380;
			tableName();
			State = 3387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3381;
				Match(PARTITION);
				State = 3382;
				Match(LR_BRACKET);
				State = 3384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
					{
					State = 3383;
					_localctx.partitions = uidList();
					}
				}

				State = 3386;
				Match(RR_BRACKET);
				}
			}

			State = 3405;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				State = 3393;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,460,Context) ) {
				case 1:
					{
					State = 3389;
					Match(LR_BRACKET);
					State = 3390;
					_localctx.columns = uidList();
					State = 3391;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 3395;
				insertStatementValue();
				}
				break;
			case SET:
				{
				State = 3396;
				Match(SET);
				State = 3397;
				_localctx.setFirst = updatedElement();
				State = 3402;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3398;
					Match(COMMA);
					State = 3399;
					_localctx._updatedElement = updatedElement();
					_localctx._setElements.Add(_localctx._updatedElement);
					}
					}
					State = 3404;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON) {
				{
				State = 3407;
				Match(ON);
				State = 3408;
				Match(DUPLICATE);
				State = 3409;
				Match(KEY);
				State = 3410;
				Match(UPDATE);
				State = 3411;
				_localctx.duplicatedFirst = updatedElement();
				State = 3416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3412;
					Match(COMMA);
					State = 3413;
					_localctx._updatedElement = updatedElement();
					_localctx._duplicatedElements.Add(_localctx._updatedElement);
					}
					}
					State = 3418;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataStatementContext : ParserRuleContext {
		public IToken priority;
		public IToken filename;
		public IToken violation;
		public CharsetNameContext charset;
		public IToken fieldsFormat;
		public IToken linesFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MariaDBParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MariaDBParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFILE() { return GetToken(MariaDBParser.INFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MariaDBParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MariaDBParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MariaDBParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(MariaDBParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(MariaDBParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LINES() { return GetTokens(MariaDBParser.LINES); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES(int i) {
			return GetToken(MariaDBParser.LINES, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IGNORE() { return GetTokens(MariaDBParser.IGNORE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE(int i) {
			return GetToken(MariaDBParser.IGNORE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MariaDBParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MariaDBParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MariaDBParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MariaDBParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MariaDBParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MariaDBParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext[] selectFieldsInto() {
			return GetRuleContexts<SelectFieldsIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext selectFieldsInto(int i) {
			return GetRuleContext<SelectFieldsIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext[] selectLinesInto() {
			return GetRuleContexts<SelectLinesIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext selectLinesInto(int i) {
			return GetRuleContext<SelectLinesIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLoadDataStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLoadDataStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadDataStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataStatementContext loadDataStatement() {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(Context, State);
		EnterRule(_localctx, 208, RULE_loadDataStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3421;
			Match(LOAD);
			State = 3422;
			Match(DATA);
			State = 3424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				State = 3423;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3427;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 3426;
				Match(LOCAL);
				}
			}

			State = 3429;
			Match(INFILE);
			State = 3430;
			_localctx.filename = Match(STRING_LITERAL);
			State = 3432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				State = 3431;
				_localctx.violation = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					_localctx.violation = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3434;
			Match(INTO);
			State = 3435;
			Match(TABLE);
			State = 3436;
			tableName();
			State = 3442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3437;
				Match(PARTITION);
				State = 3438;
				Match(LR_BRACKET);
				State = 3439;
				uidList();
				State = 3440;
				Match(RR_BRACKET);
				}
			}

			State = 3447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARACTER) {
				{
				State = 3444;
				Match(CHARACTER);
				State = 3445;
				Match(SET);
				State = 3446;
				_localctx.charset = charsetName();
				}
			}

			State = 3455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				State = 3449;
				_localctx.fieldsFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					_localctx.fieldsFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3450;
					selectFieldsInto();
					}
					}
					State = 3453;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			State = 3463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINES) {
				{
				State = 3457;
				Match(LINES);
				State = 3459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3458;
					selectLinesInto();
					}
					}
					State = 3461;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			State = 3469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3465;
				Match(IGNORE);
				State = 3466;
				decimalLiteral();
				State = 3467;
				_localctx.linesFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					_localctx.linesFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,476,Context) ) {
			case 1:
				{
				State = 3471;
				Match(LR_BRACKET);
				State = 3472;
				assignmentField();
				State = 3477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3473;
					Match(COMMA);
					State = 3474;
					assignmentField();
					}
					}
					State = 3479;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3480;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 3493;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,478,Context) ) {
			case 1:
				{
				State = 3484;
				Match(SET);
				State = 3485;
				updatedElement();
				State = 3490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3486;
					Match(COMMA);
					State = 3487;
					updatedElement();
					}
					}
					State = 3492;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadXmlStatementContext : ParserRuleContext {
		public IToken priority;
		public IToken filename;
		public IToken violation;
		public CharsetNameContext charset;
		public IToken tag;
		public IToken linesFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MariaDBParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(MariaDBParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFILE() { return GetToken(MariaDBParser.INFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MariaDBParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MariaDBParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MariaDBParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MariaDBParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MariaDBParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SET() { return GetTokens(MariaDBParser.SET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET(int i) {
			return GetToken(MariaDBParser.SET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROWS() { return GetTokens(MariaDBParser.ROWS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS(int i) {
			return GetToken(MariaDBParser.ROWS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MariaDBParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MariaDBParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MariaDBParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL() { return GetToken(MariaDBParser.GREATER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IGNORE() { return GetTokens(MariaDBParser.IGNORE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE(int i) {
			return GetToken(MariaDBParser.IGNORE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MariaDBParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MariaDBParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MariaDBParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES() { return GetToken(MariaDBParser.LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadXmlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLoadXmlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLoadXmlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadXmlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadXmlStatementContext loadXmlStatement() {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(Context, State);
		EnterRule(_localctx, 210, RULE_loadXmlStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3495;
			Match(LOAD);
			State = 3496;
			Match(XML);
			State = 3498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				State = 3497;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOCAL) {
				{
				State = 3500;
				Match(LOCAL);
				}
			}

			State = 3503;
			Match(INFILE);
			State = 3504;
			_localctx.filename = Match(STRING_LITERAL);
			State = 3506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				State = 3505;
				_localctx.violation = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					_localctx.violation = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3508;
			Match(INTO);
			State = 3509;
			Match(TABLE);
			State = 3510;
			tableName();
			State = 3514;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHARACTER) {
				{
				State = 3511;
				Match(CHARACTER);
				State = 3512;
				Match(SET);
				State = 3513;
				_localctx.charset = charsetName();
				}
			}

			State = 3522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ROWS) {
				{
				State = 3516;
				Match(ROWS);
				State = 3517;
				Match(IDENTIFIED);
				State = 3518;
				Match(BY);
				State = 3519;
				Match(LESS_SYMBOL);
				State = 3520;
				_localctx.tag = Match(STRING_LITERAL);
				State = 3521;
				Match(GREATER_SYMBOL);
				}
			}

			State = 3528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3524;
				Match(IGNORE);
				State = 3525;
				decimalLiteral();
				State = 3526;
				_localctx.linesFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					_localctx.linesFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3541;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,486,Context) ) {
			case 1:
				{
				State = 3530;
				Match(LR_BRACKET);
				State = 3531;
				assignmentField();
				State = 3536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3532;
					Match(COMMA);
					State = 3533;
					assignmentField();
					}
					}
					State = 3538;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3539;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 3552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,488,Context) ) {
			case 1:
				{
				State = 3543;
				Match(SET);
				State = 3544;
				updatedElement();
				State = 3549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3545;
					Match(COMMA);
					State = 3546;
					updatedElement();
					}
					}
					State = 3551;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplaceStatementContext : ParserRuleContext {
		public IToken priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext _updatedElement;
		public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MariaDBParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementValueContext insertStatementValue() {
			return GetRuleContext<InsertStatementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MariaDBParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MariaDBParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED() { return GetToken(MariaDBParser.DELAYED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterReplaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitReplaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplaceStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplaceStatementContext replaceStatement() {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(Context, State);
		EnterRule(_localctx, 212, RULE_replaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3554;
			Match(REPLACE);
			State = 3556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				State = 3555;
				_localctx.priority = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					_localctx.priority = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 3558;
				Match(INTO);
				}
			}

			State = 3561;
			tableName();
			State = 3567;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3562;
				Match(PARTITION);
				State = 3563;
				Match(LR_BRACKET);
				State = 3564;
				_localctx.partitions = uidList();
				State = 3565;
				Match(RR_BRACKET);
				}
			}

			State = 3585;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				State = 3573;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,492,Context) ) {
				case 1:
					{
					State = 3569;
					Match(LR_BRACKET);
					State = 3570;
					_localctx.columns = uidList();
					State = 3571;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 3575;
				insertStatementValue();
				}
				break;
			case SET:
				{
				State = 3576;
				Match(SET);
				State = 3577;
				_localctx.setFirst = updatedElement();
				State = 3582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3578;
					Match(COMMA);
					State = 3579;
					_localctx._updatedElement = updatedElement();
					_localctx._setElements.Add(_localctx._updatedElement);
					}
					}
					State = 3584;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
	 
		public SelectStatementContext() { }
		public virtual void CopyFrom(SelectStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnionSelectContext : SelectStatementContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionStatementContext[] unionStatement() {
			return GetRuleContexts<UnionStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionStatementContext unionStatement(int i) {
			return GetRuleContext<UnionStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MariaDBParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MariaDBParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUnionSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUnionSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnionParenthesisSelectContext : SelectStatementContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionParenthesisContext[] unionParenthesis() {
			return GetRuleContexts<UnionParenthesisContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionParenthesisContext unionParenthesis(int i) {
			return GetRuleContext<UnionParenthesisContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MariaDBParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MariaDBParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUnionParenthesisSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUnionParenthesisSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionParenthesisSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleSelectContext : SelectStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public SimpleSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSimpleSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSimpleSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisSelectContext : SelectStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockClauseContext lockClause() {
			return GetRuleContext<LockClauseContext>(0);
		}
		public ParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterParenthesisSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitParenthesisSelect(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisSelect(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithLateralStatementContext : SelectStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LateralStatementContext[] lateralStatement() {
			return GetRuleContexts<LateralStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LateralStatementContext lateralStatement(int i) {
			return GetRuleContext<LateralStatementContext>(i);
		}
		public WithLateralStatementContext(SelectStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterWithLateralStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitWithLateralStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithLateralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 214, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			State = 3649;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,511,Context) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3587;
				querySpecification();
				State = 3589;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,495,Context) ) {
				case 1:
					{
					State = 3588;
					lockClause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3591;
				queryExpression();
				State = 3593;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,496,Context) ) {
				case 1:
					{
					State = 3592;
					lockClause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3595;
				querySpecificationNointo();
				State = 3597;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3596;
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3599;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,497,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 3609;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNION) {
					{
					State = 3601;
					Match(UNION);
					State = 3603;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						State = 3602;
						((UnionSelectContext)_localctx).unionType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 3607;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SELECT:
						{
						State = 3605;
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						State = 3606;
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 3612;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,501,Context) ) {
				case 1:
					{
					State = 3611;
					orderByClause();
					}
					break;
				}
				State = 3615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 3614;
					limitClause();
					}
				}

				State = 3618;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,503,Context) ) {
				case 1:
					{
					State = 3617;
					lockClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3620;
				queryExpressionNointo();
				State = 3622;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3621;
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3624;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,504,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 3631;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNION) {
					{
					State = 3626;
					Match(UNION);
					State = 3628;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						State = 3627;
						((UnionParenthesisSelectContext)_localctx).unionType = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 3630;
					queryExpression();
					}
				}

				State = 3634;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,507,Context) ) {
				case 1:
					{
					State = 3633;
					orderByClause();
					}
					break;
				}
				State = 3637;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 3636;
					limitClause();
					}
				}

				State = 3640;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,509,Context) ) {
				case 1:
					{
					State = 3639;
					lockClause();
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new WithLateralStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3642;
				querySpecificationNointo();
				State = 3645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3643;
					Match(COMMA);
					State = 3644;
					lateralStatement();
					}
					}
					State = 3647;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleUpdateStatementContext singleUpdateStatement() {
			return GetRuleContext<SingleUpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultipleUpdateStatementContext multipleUpdateStatement() {
			return GetRuleContext<MultipleUpdateStatementContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 216, RULE_updateStatement);
		try {
			State = 3653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,512,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3651;
				singleUpdateStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3652;
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MariaDBParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsWithDefaultsContext[] expressionsWithDefaults() {
			return GetRuleContexts<ExpressionsWithDefaultsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return GetRuleContext<ExpressionsWithDefaultsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public ValuesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterValuesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitValuesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesStatementContext valuesStatement() {
		ValuesStatementContext _localctx = new ValuesStatementContext(Context, State);
		EnterRule(_localctx, 218, RULE_valuesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3655;
			Match(VALUES);
			State = 3656;
			Match(LR_BRACKET);
			State = 3658;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,513,Context) ) {
			case 1:
				{
				State = 3657;
				expressionsWithDefaults();
				}
				break;
			}
			State = 3660;
			Match(RR_BRACKET);
			State = 3669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3661;
				Match(COMMA);
				State = 3662;
				Match(LR_BRACKET);
				State = 3664;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,514,Context) ) {
				case 1:
					{
					State = 3663;
					expressionsWithDefaults();
					}
					break;
				}
				State = 3666;
				Match(RR_BRACKET);
				}
				}
				State = 3671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementValueContext : ParserRuleContext {
		public IToken insertFormat;
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MariaDBParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MariaDBParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsWithDefaultsContext[] expressionsWithDefaults() {
			return GetRuleContexts<ExpressionsWithDefaultsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return GetRuleContext<ExpressionsWithDefaultsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatementValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterInsertStatementValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitInsertStatementValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertStatementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementValueContext insertStatementValue() {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(Context, State);
		EnterRule(_localctx, 220, RULE_insertStatementValue);
		int _la;
		try {
			State = 3690;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3672;
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3673;
				_localctx.insertFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					_localctx.insertFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3674;
				Match(LR_BRACKET);
				State = 3676;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,516,Context) ) {
				case 1:
					{
					State = 3675;
					expressionsWithDefaults();
					}
					break;
				}
				State = 3678;
				Match(RR_BRACKET);
				State = 3687;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3679;
					Match(COMMA);
					State = 3680;
					Match(LR_BRACKET);
					State = 3682;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,517,Context) ) {
					case 1:
						{
						State = 3681;
						expressionsWithDefaults();
						}
						break;
					}
					State = 3684;
					Match(RR_BRACKET);
					}
					}
					State = 3689;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdatedElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updatedElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUpdatedElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUpdatedElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdatedElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdatedElementContext updatedElement() {
		UpdatedElementContext _localctx = new UpdatedElementContext(Context, State);
		EnterRule(_localctx, 222, RULE_updatedElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3692;
			fullColumnName();
			State = 3693;
			Match(EQUAL_SYMBOL);
			State = 3696;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,520,Context) ) {
			case 1:
				{
				State = 3694;
				expression(0);
				}
				break;
			case 2:
				{
				State = 3695;
				Match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MariaDBParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAssignmentField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAssignmentField(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentFieldContext assignmentField() {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(Context, State);
		EnterRule(_localctx, 224, RULE_assignmentField);
		try {
			State = 3700;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTRIBUTE:
			case BODY:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_ROLE:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case PACKAGE:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case STATEMENT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTED:
			case ENCRYPTION:
			case ENCRYPTION_KEY_ID:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOCALES:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUERY_RESPONSE_TIME:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLAVES:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case TYPES:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WSREP_MEMBERSHIP:
			case WSREP_STATUS:
			case X509:
			case XA:
			case XML:
			case YES:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case USER_STATISTICS:
			case CLIENT_STATISTICS:
			case INDEX_STATISTICS:
			case TABLE_STATISTICS:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICAS:
			case REPLICATION_MASTER_ADMIN:
			case MONITOR:
			case READ_ONLY:
			case REPLAY:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3698;
				uid();
				}
				break;
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3699;
				Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MariaDBParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MariaDBParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MariaDBParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(MariaDBParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(MariaDBParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockOptionContext lockOption() {
			return GetRuleContext<LockOptionContext>(0);
		}
		public LockClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLockClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLockClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockClauseContext lockClause() {
		LockClauseContext _localctx = new LockClauseContext(Context, State);
		EnterRule(_localctx, 226, RULE_lockClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3708;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				{
				State = 3702;
				Match(FOR);
				State = 3703;
				Match(UPDATE);
				}
				break;
			case LOCK:
				{
				State = 3704;
				Match(LOCK);
				State = 3705;
				Match(IN);
				State = 3706;
				Match(SHARE);
				State = 3707;
				Match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,523,Context) ) {
			case 1:
				{
				State = 3710;
				lockOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleDeleteStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MariaDBParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MariaDBParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MariaDBParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MariaDBParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MariaDBParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MariaDBParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleDeleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSingleDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSingleDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleDeleteStatementContext singleDeleteStatement() {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(Context, State);
		EnterRule(_localctx, 228, RULE_singleDeleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3713;
			Match(DELETE);
			State = 3715;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3714;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3718;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUICK) {
				{
				State = 3717;
				Match(QUICK);
				}
			}

			State = 3721;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3720;
				Match(IGNORE);
				}
			}

			State = 3723;
			Match(FROM);
			State = 3724;
			tableName();
			State = 3730;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 3725;
				Match(PARTITION);
				State = 3726;
				Match(LR_BRACKET);
				State = 3727;
				uidList();
				State = 3728;
				Match(RR_BRACKET);
				}
			}

			State = 3734;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3732;
				Match(WHERE);
				State = 3733;
				expression(0);
				}
			}

			State = 3737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3736;
				orderByClause();
				}
			}

			State = 3741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3739;
				Match(LIMIT);
				State = 3740;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleDeleteStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MariaDBParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MariaDBParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MariaDBParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MariaDBParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MariaDBParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MariaDBParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MariaDBParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MariaDBParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(MariaDBParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(MariaDBParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleDeleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterMultipleDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitMultipleDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleDeleteStatementContext multipleDeleteStatement() {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(Context, State);
		EnterRule(_localctx, 230, RULE_multipleDeleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3743;
			Match(DELETE);
			State = 3745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3744;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3748;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,532,Context) ) {
			case 1:
				{
				State = 3747;
				Match(QUICK);
				}
				break;
			}
			State = 3751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3750;
				Match(IGNORE);
				}
			}

			State = 3792;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTRIBUTE:
			case BODY:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_ROLE:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case PACKAGE:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case STATEMENT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTED:
			case ENCRYPTION:
			case ENCRYPTION_KEY_ID:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOCALES:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUERY_RESPONSE_TIME:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLAVES:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case TYPES:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WSREP_MEMBERSHIP:
			case WSREP_STATUS:
			case X509:
			case XA:
			case XML:
			case YES:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case USER_STATISTICS:
			case CLIENT_STATISTICS:
			case INDEX_STATISTICS:
			case TABLE_STATISTICS:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICAS:
			case REPLICATION_MASTER_ADMIN:
			case MONITOR:
			case READ_ONLY:
			case REPLAY:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
				{
				State = 3753;
				tableName();
				State = 3756;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 3754;
					Match(DOT);
					State = 3755;
					Match(STAR);
					}
				}

				State = 3766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3758;
					Match(COMMA);
					State = 3759;
					tableName();
					State = 3762;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT) {
						{
						State = 3760;
						Match(DOT);
						State = 3761;
						Match(STAR);
						}
					}

					}
					}
					State = 3768;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3769;
				Match(FROM);
				State = 3770;
				tableSources();
				}
				break;
			case FROM:
				{
				State = 3772;
				Match(FROM);
				State = 3773;
				tableName();
				State = 3776;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 3774;
					Match(DOT);
					State = 3775;
					Match(STAR);
					}
				}

				State = 3786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3778;
					Match(COMMA);
					State = 3779;
					tableName();
					State = 3782;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT) {
						{
						State = 3780;
						Match(DOT);
						State = 3781;
						Match(STAR);
						}
					}

					}
					}
					State = 3788;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3789;
				Match(USING);
				State = 3790;
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3794;
				Match(WHERE);
				State = 3795;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerOpenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MariaDBParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MariaDBParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerOpenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHandlerOpenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHandlerOpenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerOpenStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerOpenStatementContext handlerOpenStatement() {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(Context, State);
		EnterRule(_localctx, 232, RULE_handlerOpenStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3798;
			Match(HANDLER);
			State = 3799;
			tableName();
			State = 3800;
			Match(OPEN);
			State = 3805;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,543,Context) ) {
			case 1:
				{
				State = 3802;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3801;
					Match(AS);
					}
				}

				State = 3804;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadIndexStatementContext : ParserRuleContext {
		public UidContext index;
		public IToken moveOrder;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MariaDBParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MariaDBParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantsContext constants() {
			return GetRuleContext<ConstantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MariaDBParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MariaDBParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MariaDBParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MariaDBParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV() { return GetToken(MariaDBParser.PREV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MariaDBParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadIndexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHandlerReadIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHandlerReadIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerReadIndexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadIndexStatementContext handlerReadIndexStatement() {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(Context, State);
		EnterRule(_localctx, 234, RULE_handlerReadIndexStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3807;
			Match(HANDLER);
			State = 3808;
			tableName();
			State = 3809;
			Match(READ);
			State = 3810;
			_localctx.index = uid();
			State = 3817;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				State = 3811;
				comparisonOperator();
				State = 3812;
				Match(LR_BRACKET);
				State = 3813;
				constants();
				State = 3814;
				Match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				State = 3816;
				_localctx.moveOrder = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					_localctx.moveOrder = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3819;
				Match(WHERE);
				State = 3820;
				expression(0);
				}
			}

			State = 3825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3823;
				Match(LIMIT);
				State = 3824;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadStatementContext : ParserRuleContext {
		public IToken moveOrder;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MariaDBParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MariaDBParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MariaDBParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MariaDBParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MariaDBParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MariaDBParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom() {
			return GetRuleContext<LimitClauseAtomContext>(0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHandlerReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHandlerReadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerReadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadStatementContext handlerReadStatement() {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(Context, State);
		EnterRule(_localctx, 236, RULE_handlerReadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3827;
			Match(HANDLER);
			State = 3828;
			tableName();
			State = 3829;
			Match(READ);
			State = 3830;
			_localctx.moveOrder = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				_localctx.moveOrder = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3833;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3831;
				Match(WHERE);
				State = 3832;
				expression(0);
				}
			}

			State = 3837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3835;
				Match(LIMIT);
				State = 3836;
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerCloseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MariaDBParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MariaDBParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerCloseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHandlerCloseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHandlerCloseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerCloseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerCloseStatementContext handlerCloseStatement() {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(Context, State);
		EnterRule(_localctx, 238, RULE_handlerCloseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3839;
			Match(HANDLER);
			State = 3840;
			tableName();
			State = 3841;
			Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleUpdateStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MariaDBParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MariaDBParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MariaDBParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MariaDBParser.LOW_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleUpdateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSingleUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSingleUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleUpdateStatementContext singleUpdateStatement() {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(Context, State);
		EnterRule(_localctx, 240, RULE_singleUpdateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3843;
			Match(UPDATE);
			State = 3845;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3844;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3848;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3847;
				Match(IGNORE);
				}
			}

			State = 3850;
			tableName();
			State = 3855;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010177536L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
				{
				State = 3852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3851;
					Match(AS);
					}
				}

				State = 3854;
				uid();
				}
			}

			State = 3857;
			Match(SET);
			State = 3858;
			updatedElement();
			State = 3863;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3859;
				Match(COMMA);
				State = 3860;
				updatedElement();
				}
				}
				State = 3865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3868;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3866;
				Match(WHERE);
				State = 3867;
				expression(0);
				}
			}

			State = 3871;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 3870;
				orderByClause();
				}
			}

			State = 3874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 3873;
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultipleUpdateStatementContext : ParserRuleContext {
		public IToken priority;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MariaDBParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext[] updatedElement() {
			return GetRuleContexts<UpdatedElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdatedElementContext updatedElement(int i) {
			return GetRuleContext<UpdatedElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MariaDBParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MariaDBParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MariaDBParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multipleUpdateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterMultipleUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitMultipleUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultipleUpdateStatementContext multipleUpdateStatement() {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(Context, State);
		EnterRule(_localctx, 242, RULE_multipleUpdateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3876;
			Match(UPDATE);
			State = 3878;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				State = 3877;
				_localctx.priority = Match(LOW_PRIORITY);
				}
			}

			State = 3881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 3880;
				Match(IGNORE);
				}
			}

			State = 3883;
			tableSources();
			State = 3884;
			Match(SET);
			State = 3885;
			updatedElement();
			State = 3890;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3886;
				Match(COMMA);
				State = 3887;
				updatedElement();
				}
				}
				State = 3892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 3893;
				Match(WHERE);
				State = 3894;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MariaDBParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MariaDBParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext[] orderByExpression() {
			return GetRuleContexts<OrderByExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext orderByExpression(int i) {
			return GetRuleContext<OrderByExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterOrderByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitOrderByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByClauseContext orderByClause() {
		OrderByClauseContext _localctx = new OrderByClauseContext(Context, State);
		EnterRule(_localctx, 244, RULE_orderByClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3897;
			Match(ORDER);
			State = 3898;
			Match(BY);
			State = 3899;
			orderByExpression();
			State = 3904;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,561,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3900;
					Match(COMMA);
					State = 3901;
					orderByExpression();
					}
					} 
				}
				State = 3906;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,561,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByExpressionContext : ParserRuleContext {
		public IToken order;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MariaDBParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MariaDBParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterOrderByExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitOrderByExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByExpressionContext orderByExpression() {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(Context, State);
		EnterRule(_localctx, 246, RULE_orderByExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3907;
			expression(0);
			State = 3909;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,562,Context) ) {
			case 1:
				{
				State = 3908;
				_localctx.order = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.order = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourcesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceContext[] tableSource() {
			return GetRuleContexts<TableSourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceContext tableSource(int i) {
			return GetRuleContext<TableSourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSources; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableSources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableSources(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourcesContext tableSources() {
		TableSourcesContext _localctx = new TableSourcesContext(Context, State);
		EnterRule(_localctx, 248, RULE_tableSources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3911;
			tableSource();
			State = 3916;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,563,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3912;
					Match(COMMA);
					State = 3913;
					tableSource();
					}
					} 
				}
				State = 3918;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,563,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceContext : ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSource; } }
	 
		public TableSourceContext() { }
		public virtual void CopyFrom(TableSourceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableJsonContext : TableSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonTableContext jsonTable() {
			return GetRuleContext<JsonTableContext>(0);
		}
		public TableJsonContext(TableSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableJson(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableJson(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableJson(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableSourceNestedContext : TableSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext[] joinPart() {
			return GetRuleContexts<JoinPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext joinPart(int i) {
			return GetRuleContext<JoinPartContext>(i);
		}
		public TableSourceNestedContext(TableSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableSourceNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableSourceNested(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceNested(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableSourceBaseContext : TableSourceContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext[] joinPart() {
			return GetRuleContexts<JoinPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinPartContext joinPart(int i) {
			return GetRuleContext<JoinPartContext>(i);
		}
		public TableSourceBaseContext(TableSourceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableSourceBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableSourceBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourceBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceContext tableSource() {
		TableSourceContext _localctx = new TableSourceContext(Context, State);
		EnterRule(_localctx, 250, RULE_tableSource);
		int _la;
		try {
			int _alt;
			State = 3937;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,566,Context) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3919;
				tableSourceItem();
				State = 3923;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,564,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3920;
						joinPart();
						}
						} 
					}
					State = 3925;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,564,Context);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3926;
				Match(LR_BRACKET);
				State = 3927;
				tableSourceItem();
				State = 3931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & 4647996290423062529L) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & 288230444871188481L) != 0)) {
					{
					{
					State = 3928;
					joinPart();
					}
					}
					State = 3933;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3934;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new TableJsonContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3936;
				jsonTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceItemContext : ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSourceItem; } }
	 
		public TableSourceItemContext() { }
		public virtual void CopyFrom(TableSourceItemContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubqueryTableItemContext : TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSubqueryTableItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSubqueryTableItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryTableItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomTableItemContext : TableSourceItemContext {
		public UidContext alias;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext[] indexHint() {
			return GetRuleContexts<IndexHintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext indexHint(int i) {
			return GetRuleContext<IndexHintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAtomTableItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAtomTableItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomTableItem(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TableSourcesItemContext : TableSourceItemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableSourcesItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableSourcesItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSourcesItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceItemContext tableSourceItem() {
		TableSourceItemContext _localctx = new TableSourceItemContext(Context, State);
		EnterRule(_localctx, 252, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			State = 3979;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,574,Context) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3939;
				tableName();
				State = 3945;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PARTITION) {
					{
					State = 3940;
					Match(PARTITION);
					State = 3941;
					Match(LR_BRACKET);
					State = 3942;
					uidList();
					State = 3943;
					Match(RR_BRACKET);
					}
				}

				State = 3951;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,569,Context) ) {
				case 1:
					{
					State = 3948;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 3947;
						Match(AS);
						}
					}

					State = 3950;
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				State = 3961;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,571,Context) ) {
				case 1:
					{
					State = 3953;
					indexHint();
					State = 3958;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,570,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3954;
							Match(COMMA);
							State = 3955;
							indexHint();
							}
							} 
						}
						State = 3960;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,570,Context);
					}
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3968;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,572,Context) ) {
				case 1:
					{
					State = 3963;
					selectStatement();
					}
					break;
				case 2:
					{
					State = 3964;
					Match(LR_BRACKET);
					State = 3965;
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					State = 3966;
					Match(RR_BRACKET);
					}
					break;
				}
				State = 3971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 3970;
					Match(AS);
					}
				}

				State = 3973;
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3975;
				Match(LR_BRACKET);
				State = 3976;
				tableSources();
				State = 3977;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintContext : ParserRuleContext {
		public IToken indexHintAction;
		public IToken keyFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MariaDBParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MariaDBParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE() { return GetToken(MariaDBParser.FORCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintTypeContext indexHintType() {
			return GetRuleContext<IndexHintTypeContext>(0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIndexHint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIndexHint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintContext indexHint() {
		IndexHintContext _localctx = new IndexHintContext(Context, State);
		EnterRule(_localctx, 254, RULE_indexHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3981;
			_localctx.indexHintAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				_localctx.indexHintAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3982;
			_localctx.keyFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				_localctx.keyFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 3983;
				Match(FOR);
				State = 3984;
				indexHintType();
				}
			}

			State = 3987;
			Match(LR_BRACKET);
			State = 3988;
			uidList();
			State = 3989;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MariaDBParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MariaDBParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MariaDBParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MariaDBParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIndexHintType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIndexHintType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexHintType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintTypeContext indexHintType() {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(Context, State);
		EnterRule(_localctx, 256, RULE_indexHintType);
		try {
			State = 3996;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JOIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3991;
				Match(JOIN);
				}
				break;
			case ORDER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3992;
				Match(ORDER);
				State = 3993;
				Match(BY);
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3994;
				Match(GROUP);
				State = 3995;
				Match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinPartContext : ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinPart; } }
	 
		public JoinPartContext() { }
		public virtual void CopyFrom(JoinPartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InnerJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MariaDBParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(MariaDBParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MariaDBParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER() { return GetToken(MariaDBParser.INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS() { return GetToken(MariaDBParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterInnerJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitInnerJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NaturalJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL() { return GetToken(MariaDBParser.NATURAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MariaDBParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MariaDBParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MariaDBParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(MariaDBParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterNaturalJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitNaturalJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNaturalJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OuterJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MariaDBParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MariaDBParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MariaDBParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MariaDBParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER() { return GetToken(MariaDBParser.OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(MariaDBParser.LATERAL, 0); }
		public OuterJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterOuterJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitOuterJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOuterJoin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StraightJoinContext : JoinPartContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN() { return GetToken(MariaDBParser.STRAIGHT_JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceItemContext tableSourceItem() {
			return GetRuleContext<TableSourceItemContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StraightJoinContext(JoinPartContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterStraightJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitStraightJoin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStraightJoin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinPartContext joinPart() {
		JoinPartContext _localctx = new JoinPartContext(Context, State);
		EnterRule(_localctx, 258, RULE_joinPart);
		int _la;
		try {
			State = 4048;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3999;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					State = 3998;
					_la = TokenStream.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 4001;
				Match(JOIN);
				State = 4003;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,578,Context) ) {
				case 1:
					{
					State = 4002;
					Match(LATERAL);
					}
					break;
				}
				State = 4005;
				tableSourceItem();
				State = 4013;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,579,Context) ) {
				case 1:
					{
					State = 4006;
					Match(ON);
					State = 4007;
					expression(0);
					}
					break;
				case 2:
					{
					State = 4008;
					Match(USING);
					State = 4009;
					Match(LR_BRACKET);
					State = 4010;
					uidList();
					State = 4011;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4015;
				Match(STRAIGHT_JOIN);
				State = 4016;
				tableSourceItem();
				State = 4019;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,580,Context) ) {
				case 1:
					{
					State = 4017;
					Match(ON);
					State = 4018;
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4021;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER) {
					{
					State = 4022;
					Match(OUTER);
					}
				}

				State = 4025;
				Match(JOIN);
				State = 4027;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,582,Context) ) {
				case 1:
					{
					State = 4026;
					Match(LATERAL);
					}
					break;
				}
				State = 4029;
				tableSourceItem();
				State = 4037;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON:
					{
					State = 4030;
					Match(ON);
					State = 4031;
					expression(0);
					}
					break;
				case USING:
					{
					State = 4032;
					Match(USING);
					State = 4033;
					Match(LR_BRACKET);
					State = 4034;
					uidList();
					State = 4035;
					Match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4039;
				Match(NATURAL);
				State = 4044;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					State = 4040;
					_la = TokenStream.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 4042;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OUTER) {
						{
						State = 4041;
						Match(OUTER);
						}
					}

					}
				}

				State = 4046;
				Match(JOIN);
				State = 4047;
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionContext queryExpression() {
		QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
		EnterRule(_localctx, 260, RULE_queryExpression);
		try {
			State = 4058;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,587,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4050;
				Match(LR_BRACKET);
				State = 4051;
				querySpecification();
				State = 4052;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4054;
				Match(LR_BRACKET);
				State = 4055;
				queryExpression();
				State = 4056;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionNointoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionNointo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionNointo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionNointo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpressionNointo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionNointoContext queryExpressionNointo() {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(Context, State);
		EnterRule(_localctx, 262, RULE_queryExpressionNointo);
		try {
			State = 4068;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,588,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4060;
				Match(LR_BRACKET);
				State = 4061;
				querySpecificationNointo();
				State = 4062;
				Match(RR_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4064;
				Match(LR_BRACKET);
				State = 4065;
				queryExpressionNointo();
				State = 4066;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MariaDBParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementsContext selectElements() {
			return GetRuleContext<SelectElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext[] selectSpec() {
			return GetRuleContexts<SelectSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext selectSpec(int i) {
			return GetRuleContext<SelectSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectIntoExpressionContext selectIntoExpression() {
			return GetRuleContext<SelectIntoExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 264, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			State = 4128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,605,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4070;
				Match(SELECT);
				State = 4074;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,589,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4071;
						selectSpec();
						}
						} 
					}
					State = 4076;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,589,Context);
				}
				State = 4077;
				selectElements();
				State = 4079;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 4078;
					selectIntoExpression();
					}
				}

				State = 4082;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,591,Context) ) {
				case 1:
					{
					State = 4081;
					fromClause();
					}
					break;
				}
				State = 4085;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,592,Context) ) {
				case 1:
					{
					State = 4084;
					groupByClause();
					}
					break;
				}
				State = 4088;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 4087;
					havingClause();
					}
				}

				State = 4091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW) {
					{
					State = 4090;
					windowClause();
					}
				}

				State = 4094;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,595,Context) ) {
				case 1:
					{
					State = 4093;
					orderByClause();
					}
					break;
				}
				State = 4097;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,596,Context) ) {
				case 1:
					{
					State = 4096;
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4099;
				Match(SELECT);
				State = 4103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,597,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4100;
						selectSpec();
						}
						} 
					}
					State = 4105;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,597,Context);
				}
				State = 4106;
				selectElements();
				State = 4108;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,598,Context) ) {
				case 1:
					{
					State = 4107;
					fromClause();
					}
					break;
				}
				State = 4111;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,599,Context) ) {
				case 1:
					{
					State = 4110;
					groupByClause();
					}
					break;
				}
				State = 4114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 4113;
					havingClause();
					}
				}

				State = 4117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WINDOW) {
					{
					State = 4116;
					windowClause();
					}
				}

				State = 4120;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,602,Context) ) {
				case 1:
					{
					State = 4119;
					orderByClause();
					}
					break;
				}
				State = 4123;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,603,Context) ) {
				case 1:
					{
					State = 4122;
					limitClause();
					}
					break;
				}
				State = 4126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTO) {
					{
					State = 4125;
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationNointoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MariaDBParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementsContext selectElements() {
			return GetRuleContext<SelectElementsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext[] selectSpec() {
			return GetRuleContexts<SelectSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectSpecContext selectSpec(int i) {
			return GetRuleContext<SelectSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecificationNointo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecificationNointo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecificationNointo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySpecificationNointo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationNointoContext querySpecificationNointo() {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(Context, State);
		EnterRule(_localctx, 266, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4130;
			Match(SELECT);
			State = 4134;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,606,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4131;
					selectSpec();
					}
					} 
				}
				State = 4136;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,606,Context);
			}
			State = 4137;
			selectElements();
			State = 4139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,607,Context) ) {
			case 1:
				{
				State = 4138;
				fromClause();
				}
				break;
			}
			State = 4142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,608,Context) ) {
			case 1:
				{
				State = 4141;
				groupByClause();
				}
				break;
			}
			State = 4145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING) {
				{
				State = 4144;
				havingClause();
				}
			}

			State = 4148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WINDOW) {
				{
				State = 4147;
				windowClause();
				}
			}

			State = 4151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,611,Context) ) {
			case 1:
				{
				State = 4150;
				orderByClause();
				}
				break;
			}
			State = 4154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,612,Context) ) {
			case 1:
				{
				State = 4153;
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionParenthesisContext : ParserRuleContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MariaDBParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MariaDBParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionParenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUnionParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUnionParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionParenthesisContext unionParenthesis() {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(Context, State);
		EnterRule(_localctx, 268, RULE_unionParenthesis);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4156;
			Match(UNION);
			State = 4158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 4157;
				_localctx.unionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.unionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4160;
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionStatementContext : ParserRuleContext {
		public IToken unionType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION() { return GetToken(MariaDBParser.UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MariaDBParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUnionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUnionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionStatementContext unionStatement() {
		UnionStatementContext _localctx = new UnionStatementContext(Context, State);
		EnterRule(_localctx, 270, RULE_unionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4162;
			Match(UNION);
			State = 4164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				State = 4163;
				_localctx.unionType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					_localctx.unionType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4168;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 4166;
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				State = 4167;
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LateralStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(MariaDBParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationNointoContext querySpecificationNointo() {
			return GetRuleContext<QuerySpecificationNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionNointoContext queryExpressionNointo() {
			return GetRuleContext<QueryExpressionNointoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		public LateralStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lateralStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLateralStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLateralStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLateralStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LateralStatementContext lateralStatement() {
		LateralStatementContext _localctx = new LateralStatementContext(Context, State);
		EnterRule(_localctx, 272, RULE_lateralStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4170;
			Match(LATERAL);
			State = 4185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,619,Context) ) {
			case 1:
				{
				State = 4171;
				querySpecificationNointo();
				}
				break;
			case 2:
				{
				State = 4172;
				queryExpressionNointo();
				}
				break;
			case 3:
				{
				{
				State = 4173;
				Match(LR_BRACKET);
				State = 4176;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SELECT:
					{
					State = 4174;
					querySpecificationNointo();
					}
					break;
				case LR_BRACKET:
					{
					State = 4175;
					queryExpressionNointo();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4178;
				Match(RR_BRACKET);
				State = 4183;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,618,Context) ) {
				case 1:
					{
					State = 4180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 4179;
						Match(AS);
						}
					}

					State = 4182;
					uid();
					}
					break;
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TABLE() { return GetToken(MariaDBParser.JSON_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MariaDBParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MariaDBParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MariaDBParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MariaDBParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonColumnListContext jsonColumnList() {
			return GetRuleContext<JsonColumnListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		public JsonTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterJsonTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitJsonTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonTableContext jsonTable() {
		JsonTableContext _localctx = new JsonTableContext(Context, State);
		EnterRule(_localctx, 274, RULE_jsonTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4187;
			Match(JSON_TABLE);
			State = 4188;
			Match(LR_BRACKET);
			State = 4189;
			Match(STRING_LITERAL);
			State = 4190;
			Match(COMMA);
			State = 4191;
			Match(STRING_LITERAL);
			State = 4192;
			Match(COLUMNS);
			State = 4193;
			Match(LR_BRACKET);
			State = 4194;
			jsonColumnList();
			State = 4195;
			Match(RR_BRACKET);
			State = 4196;
			Match(RR_BRACKET);
			State = 4201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,621,Context) ) {
			case 1:
				{
				State = 4198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 4197;
					Match(AS);
					}
				}

				State = 4200;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonColumnListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonColumnContext[] jsonColumn() {
			return GetRuleContexts<JsonColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonColumnContext jsonColumn(int i) {
			return GetRuleContext<JsonColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public JsonColumnListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonColumnList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterJsonColumnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitJsonColumnList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonColumnList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonColumnListContext jsonColumnList() {
		JsonColumnListContext _localctx = new JsonColumnListContext(Context, State);
		EnterRule(_localctx, 276, RULE_jsonColumnList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4203;
			jsonColumn();
			State = 4208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4204;
				Match(COMMA);
				State = 4205;
				jsonColumn();
				}
				}
				State = 4210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(MariaDBParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(MariaDBParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MariaDBParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonOnEmptyContext jsonOnEmpty() {
			return GetRuleContext<JsonOnEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonOnErrorContext jsonOnError() {
			return GetRuleContext<JsonOnErrorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED() { return GetToken(MariaDBParser.NESTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MariaDBParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonColumnListContext jsonColumnList() {
			return GetRuleContext<JsonColumnListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public JsonColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterJsonColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitJsonColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonColumnContext jsonColumn() {
		JsonColumnContext _localctx = new JsonColumnContext(Context, State);
		EnterRule(_localctx, 278, RULE_jsonColumn);
		int _la;
		try {
			State = 4240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,628,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4211;
				fullColumnName();
				State = 4228;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FOR:
					{
					State = 4212;
					Match(FOR);
					State = 4213;
					Match(ORDINALITY);
					}
					break;
				case CHARACTER:
				case SET:
				case TINYINT:
				case SMALLINT:
				case MEDIUMINT:
				case MIDDLEINT:
				case INT:
				case INT1:
				case INT2:
				case INT3:
				case INT4:
				case INT8:
				case INTEGER:
				case BIGINT:
				case REAL:
				case DOUBLE:
				case FLOAT:
				case FLOAT4:
				case FLOAT8:
				case DECIMAL:
				case DEC:
				case NUMERIC:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case CHAR:
				case VARCHAR:
				case NVARCHAR:
				case NATIONAL:
				case BINARY:
				case VARBINARY:
				case TINYBLOB:
				case BLOB:
				case MEDIUMBLOB:
				case LONG:
				case LONGBLOB:
				case TINYTEXT:
				case TEXT:
				case MEDIUMTEXT:
				case LONGTEXT:
				case ENUM:
				case SERIAL:
				case BIT:
				case BOOL:
				case BOOLEAN:
				case FIXED:
				case JSON:
				case NCHAR:
				case GEOMETRYCOLLECTION:
				case GEOMCOLLECTION:
				case GEOMETRY:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case UUID:
					{
					State = 4214;
					dataType();
					State = 4226;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PATH:
						{
						State = 4215;
						Match(PATH);
						State = 4216;
						Match(STRING_LITERAL);
						State = 4218;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,623,Context) ) {
						case 1:
							{
							State = 4217;
							jsonOnEmpty();
							}
							break;
						}
						State = 4221;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
							{
							State = 4220;
							jsonOnError();
							}
						}

						}
						break;
					case EXISTS:
						{
						State = 4223;
						Match(EXISTS);
						State = 4224;
						Match(PATH);
						State = 4225;
						Match(STRING_LITERAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4230;
				Match(NESTED);
				State = 4232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PATH) {
					{
					State = 4231;
					Match(PATH);
					}
				}

				State = 4234;
				Match(STRING_LITERAL);
				State = 4235;
				Match(COLUMNS);
				State = 4236;
				Match(LR_BRACKET);
				State = 4237;
				jsonColumnList();
				State = 4238;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOnEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(MariaDBParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MariaDBParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(MariaDBParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public JsonOnEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOnEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterJsonOnEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitJsonOnEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonOnEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonOnEmptyContext jsonOnEmpty() {
		JsonOnEmptyContext _localctx = new JsonOnEmptyContext(Context, State);
		EnterRule(_localctx, 280, RULE_jsonOnEmpty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4246;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL_LITERAL:
				{
				State = 4242;
				Match(NULL_LITERAL);
				}
				break;
			case ERROR:
				{
				State = 4243;
				Match(ERROR);
				}
				break;
			case DEFAULT:
				{
				State = 4244;
				Match(DEFAULT);
				State = 4245;
				defaultValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4248;
			Match(ON);
			State = 4249;
			Match(EMPTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOnErrorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ERROR() { return GetTokens(MariaDBParser.ERROR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR(int i) {
			return GetToken(MariaDBParser.ERROR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MariaDBParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public JsonOnErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOnError; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterJsonOnError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitJsonOnError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonOnError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonOnErrorContext jsonOnError() {
		JsonOnErrorContext _localctx = new JsonOnErrorContext(Context, State);
		EnterRule(_localctx, 282, RULE_jsonOnError);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4255;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL_LITERAL:
				{
				State = 4251;
				Match(NULL_LITERAL);
				}
				break;
			case ERROR:
				{
				State = 4252;
				Match(ERROR);
				}
				break;
			case DEFAULT:
				{
				State = 4253;
				Match(DEFAULT);
				State = 4254;
				defaultValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4257;
			Match(ON);
			State = 4258;
			Match(ERROR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MariaDBParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCTROW() { return GetToken(MariaDBParser.DISTINCTROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY() { return GetToken(MariaDBParser.HIGH_PRIORITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN() { return GetToken(MariaDBParser.STRAIGHT_JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SMALL_RESULT() { return GetToken(MariaDBParser.SQL_SMALL_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BIG_RESULT() { return GetToken(MariaDBParser.SQL_BIG_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MariaDBParser.SQL_BUFFER_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CACHE() { return GetToken(MariaDBParser.SQL_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE() { return GetToken(MariaDBParser.SQL_NO_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CALC_FOUND_ROWS() { return GetToken(MariaDBParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSelectSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSelectSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectSpecContext selectSpec() {
		SelectSpecContext _localctx = new SelectSpecContext(Context, State);
		EnterRule(_localctx, 284, RULE_selectSpec);
		int _la;
		try {
			State = 4268;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4260;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3377699720527936L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4261;
				Match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4262;
				Match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4263;
				Match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4264;
				Match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4265;
				Match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4266;
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4267;
				Match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectElementsContext : ParserRuleContext {
		public IToken star;
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementContext[] selectElement() {
			return GetRuleContexts<SelectElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectElementContext selectElement(int i) {
			return GetRuleContext<SelectElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MariaDBParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectElements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSelectElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSelectElements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectElements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectElementsContext selectElements() {
		SelectElementsContext _localctx = new SelectElementsContext(Context, State);
		EnterRule(_localctx, 286, RULE_selectElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,632,Context) ) {
			case 1:
				{
				State = 4270;
				_localctx.star = Match(STAR);
				}
				break;
			case 2:
				{
				State = 4271;
				selectElement();
				}
				break;
			}
			State = 4278;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,633,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4274;
					Match(COMMA);
					State = 4275;
					selectElement();
					}
					} 
				}
				State = 4280;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,633,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectElementContext : ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectElement; } }
	 
		public SelectElementContext() { }
		public virtual void CopyFrom(SelectElementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectExpressionElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MariaDBParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN() { return GetToken(MariaDBParser.VAR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSelectExpressionElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSelectExpressionElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpressionElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectFunctionElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSelectFunctionElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSelectFunctionElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFunctionElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectStarElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MariaDBParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MariaDBParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSelectStarElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSelectStarElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStarElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectColumnElementContext : SelectElementContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSelectColumnElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSelectColumnElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectColumnElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectElementContext selectElement() {
		SelectElementContext _localctx = new SelectElementContext(Context, State);
		EnterRule(_localctx, 288, RULE_selectElement);
		int _la;
		try {
			State = 4310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,641,Context) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4281;
				fullId();
				State = 4282;
				Match(DOT);
				State = 4283;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4285;
				fullColumnName();
				State = 4290;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,635,Context) ) {
				case 1:
					{
					State = 4287;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 4286;
						Match(AS);
						}
					}

					State = 4289;
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4292;
				functionCall();
				State = 4297;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,637,Context) ) {
				case 1:
					{
					State = 4294;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 4293;
						Match(AS);
						}
					}

					State = 4296;
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4301;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,638,Context) ) {
				case 1:
					{
					State = 4299;
					Match(LOCAL_ID);
					State = 4300;
					Match(VAR_ASSIGN);
					}
					break;
				}
				State = 4303;
				expression(0);
				State = 4308;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,640,Context) ) {
				case 1:
					{
					State = 4305;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 4304;
						Match(AS);
						}
					}

					State = 4307;
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectIntoExpressionContext : ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectIntoExpression; } }
	 
		public SelectIntoExpressionContext() { }
		public virtual void CopyFrom(SelectIntoExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SelectIntoVariablesContext : SelectIntoExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MariaDBParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext[] assignmentField() {
			return GetRuleContexts<AssignmentFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentFieldContext assignmentField(int i) {
			return GetRuleContext<AssignmentFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSelectIntoVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSelectIntoVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoVariables(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectIntoTextFileContext : SelectIntoExpressionContext {
		public IToken filename;
		public CharsetNameContext charset;
		public IToken fieldsFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MariaDBParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTFILE() { return GetToken(MariaDBParser.OUTFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MariaDBParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES() { return GetToken(MariaDBParser.LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MariaDBParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MariaDBParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext[] selectFieldsInto() {
			return GetRuleContexts<SelectFieldsIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectFieldsIntoContext selectFieldsInto(int i) {
			return GetRuleContext<SelectFieldsIntoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext[] selectLinesInto() {
			return GetRuleContexts<SelectLinesIntoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectLinesIntoContext selectLinesInto(int i) {
			return GetRuleContext<SelectLinesIntoContext>(i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSelectIntoTextFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSelectIntoTextFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoTextFile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SelectIntoDumpFileContext : SelectIntoExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MariaDBParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE() { return GetToken(MariaDBParser.DUMPFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSelectIntoDumpFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSelectIntoDumpFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectIntoDumpFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectIntoExpressionContext selectIntoExpression() {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(Context, State);
		EnterRule(_localctx, 290, RULE_selectIntoExpression);
		int _la;
		try {
			State = 4348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,648,Context) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4312;
				Match(INTO);
				State = 4313;
				assignmentField();
				State = 4318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4314;
					Match(COMMA);
					State = 4315;
					assignmentField();
					}
					}
					State = 4320;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4321;
				Match(INTO);
				State = 4322;
				Match(DUMPFILE);
				State = 4323;
				Match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 4324;
				Match(INTO);
				State = 4325;
				Match(OUTFILE);
				State = 4326;
				((SelectIntoTextFileContext)_localctx).filename = Match(STRING_LITERAL);
				State = 4330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER) {
					{
					State = 4327;
					Match(CHARACTER);
					State = 4328;
					Match(SET);
					State = 4329;
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				State = 4338;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,645,Context) ) {
				case 1:
					{
					State = 4332;
					((SelectIntoTextFileContext)_localctx).fieldsFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 4334;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4333;
						selectFieldsInto();
						}
						}
						State = 4336;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				State = 4346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINES) {
					{
					State = 4340;
					Match(LINES);
					State = 4342;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 4341;
						selectLinesInto();
						}
						}
						State = 4344;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectFieldsIntoContext : ParserRuleContext {
		public IToken terminationField;
		public IToken enclosion;
		public IToken escaping;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(MariaDBParser.TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MariaDBParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCLOSED() { return GetToken(MariaDBParser.ENCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONALLY() { return GetToken(MariaDBParser.OPTIONALLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPED() { return GetToken(MariaDBParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectFieldsInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSelectFieldsInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSelectFieldsInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectFieldsInto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectFieldsIntoContext selectFieldsInto() {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(Context, State);
		EnterRule(_localctx, 292, RULE_selectFieldsInto);
		int _la;
		try {
			State = 4362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINATED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4350;
				Match(TERMINATED);
				State = 4351;
				Match(BY);
				State = 4352;
				_localctx.terminationField = Match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONALLY) {
					{
					State = 4353;
					Match(OPTIONALLY);
					}
				}

				State = 4356;
				Match(ENCLOSED);
				State = 4357;
				Match(BY);
				State = 4358;
				_localctx.enclosion = Match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4359;
				Match(ESCAPED);
				State = 4360;
				Match(BY);
				State = 4361;
				_localctx.escaping = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectLinesIntoContext : ParserRuleContext {
		public IToken starting;
		public IToken terminationLine;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTING() { return GetToken(MariaDBParser.STARTING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MariaDBParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED() { return GetToken(MariaDBParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectLinesInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSelectLinesInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSelectLinesInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectLinesInto(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectLinesIntoContext selectLinesInto() {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(Context, State);
		EnterRule(_localctx, 294, RULE_selectLinesInto);
		try {
			State = 4370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STARTING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4364;
				Match(STARTING);
				State = 4365;
				Match(BY);
				State = 4366;
				_localctx.starting = Match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4367;
				Match(TERMINATED);
				State = 4368;
				Match(BY);
				State = 4369;
				_localctx.terminationLine = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public ExpressionContext whereExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableSourcesContext tableSources() {
			return GetRuleContext<TableSourcesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MariaDBParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 296, RULE_fromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 4372;
				Match(FROM);
				State = 4373;
				tableSources();
				}
			}

			State = 4378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 4376;
				Match(WHERE);
				State = 4377;
				_localctx.whereExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MariaDBParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MariaDBParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupByItemContext[] groupByItem() {
			return GetRuleContexts<GroupByItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByItemContext groupByItem(int i) {
			return GetRuleContext<GroupByItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(MariaDBParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(Context, State);
		EnterRule(_localctx, 298, RULE_groupByClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4380;
			Match(GROUP);
			State = 4381;
			Match(BY);
			State = 4382;
			groupByItem();
			State = 4387;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,654,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4383;
					Match(COMMA);
					State = 4384;
					groupByItem();
					}
					} 
				}
				State = 4389;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,654,Context);
			}
			State = 4392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,655,Context) ) {
			case 1:
				{
				State = 4390;
				Match(WITH);
				State = 4391;
				Match(ROLLUP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		public ExpressionContext havingExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING() { return GetToken(MariaDBParser.HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 300, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4394;
			Match(HAVING);
			State = 4395;
			_localctx.havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW() { return GetToken(MariaDBParser.WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext[] windowName() {
			return GetRuleContexts<WindowNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName(int i) {
			return GetRuleContext<WindowNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AS() { return GetTokens(MariaDBParser.AS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS(int i) {
			return GetToken(MariaDBParser.AS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext[] windowSpec() {
			return GetRuleContexts<WindowSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec(int i) {
			return GetRuleContext<WindowSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterWindowClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitWindowClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowClauseContext windowClause() {
		WindowClauseContext _localctx = new WindowClauseContext(Context, State);
		EnterRule(_localctx, 302, RULE_windowClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4397;
			Match(WINDOW);
			State = 4398;
			windowName();
			State = 4399;
			Match(AS);
			State = 4400;
			Match(LR_BRACKET);
			State = 4401;
			windowSpec();
			State = 4402;
			Match(RR_BRACKET);
			State = 4412;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,656,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4403;
					Match(COMMA);
					State = 4404;
					windowName();
					State = 4405;
					Match(AS);
					State = 4406;
					Match(LR_BRACKET);
					State = 4407;
					windowSpec();
					State = 4408;
					Match(RR_BRACKET);
					}
					} 
				}
				State = 4414;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,656,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByItemContext : ParserRuleContext {
		public IToken order;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MariaDBParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MariaDBParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterGroupByItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitGroupByItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByItemContext groupByItem() {
		GroupByItemContext _localctx = new GroupByItemContext(Context, State);
		EnterRule(_localctx, 304, RULE_groupByItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4415;
			expression(0);
			State = 4417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,657,Context) ) {
			case 1:
				{
				State = 4416;
				_localctx.order = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.order = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT() { return GetToken(MariaDBParser.LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(MariaDBParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext[] limitClauseAtom() {
			return GetRuleContexts<LimitClauseAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseAtomContext limitClauseAtom(int i) {
			return GetRuleContext<LimitClauseAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MariaDBParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(Context, State);
		EnterRule(_localctx, 306, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4419;
			Match(LIMIT);
			State = 4430;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,659,Context) ) {
			case 1:
				{
				State = 4423;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,658,Context) ) {
				case 1:
					{
					State = 4420;
					_localctx.offset = limitClauseAtom();
					State = 4421;
					Match(COMMA);
					}
					break;
				}
				State = 4425;
				_localctx.limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				State = 4426;
				_localctx.limit = limitClauseAtom();
				State = 4427;
				Match(OFFSET);
				State = 4428;
				_localctx.offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClauseAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLimitClauseAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLimitClauseAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClauseAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseAtomContext limitClauseAtom() {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(Context, State);
		EnterRule(_localctx, 308, RULE_limitClauseAtom);
		try {
			State = 4435;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4432;
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4433;
				mysqlVariable();
				}
				break;
			case ATTRIBUTE:
			case BODY:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_ROLE:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case PACKAGE:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case STATEMENT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTED:
			case ENCRYPTION:
			case ENCRYPTION_KEY_ID:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOCALES:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUERY_RESPONSE_TIME:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLAVES:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case TYPES:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WSREP_MEMBERSHIP:
			case WSREP_STATUS:
			case X509:
			case XA:
			case XML:
			case YES:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case USER_STATISTICS:
			case CLIENT_STATISTICS:
			case INDEX_STATISTICS:
			case TABLE_STATISTICS:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICAS:
			case REPLICATION_MASTER_ADMIN:
			case MONITOR:
			case READ_ONLY:
			case REPLAY:
			case MOD:
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4434;
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartTransactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MariaDBParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MariaDBParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext[] transactionMode() {
			return GetRuleContexts<TransactionModeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext transactionMode(int i) {
			return GetRuleContext<TransactionModeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public StartTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterStartTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitStartTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartTransactionContext startTransaction() {
		StartTransactionContext _localctx = new StartTransactionContext(Context, State);
		EnterRule(_localctx, 310, RULE_startTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4437;
			Match(START);
			State = 4438;
			Match(TRANSACTION);
			State = 4447;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READ || _la==WITH) {
				{
				State = 4439;
				transactionMode();
				State = 4444;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4440;
					Match(COMMA);
					State = 4441;
					transactionMode();
					}
					}
					State = 4446;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MariaDBParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MariaDBParser.WORK, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterBeginWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitBeginWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeginWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeginWorkContext beginWork() {
		BeginWorkContext _localctx = new BeginWorkContext(Context, State);
		EnterRule(_localctx, 312, RULE_beginWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4449;
			Match(BEGIN);
			State = 4451;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 4450;
				Match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommitWorkContext : ParserRuleContext {
		public IToken nochain;
		public IToken norelease;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MariaDBParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MariaDBParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MariaDBParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MariaDBParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MariaDBParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(MariaDBParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(MariaDBParser.NO, i);
		}
		public CommitWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commitWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCommitWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCommitWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommitWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommitWorkContext commitWork() {
		CommitWorkContext _localctx = new CommitWorkContext(Context, State);
		EnterRule(_localctx, 314, RULE_commitWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4453;
			Match(COMMIT);
			State = 4455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 4454;
				Match(WORK);
				}
			}

			State = 4462;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 4457;
				Match(AND);
				State = 4459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 4458;
					_localctx.nochain = Match(NO);
					}
				}

				State = 4461;
				Match(CHAIN);
				}
			}

			State = 4468;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,668,Context) ) {
			case 1:
				{
				State = 4465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 4464;
					_localctx.norelease = Match(NO);
					}
				}

				State = 4467;
				Match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackWorkContext : ParserRuleContext {
		public IToken nochain;
		public IToken norelease;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MariaDBParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MariaDBParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MariaDBParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MariaDBParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MariaDBParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO() { return GetTokens(MariaDBParser.NO); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO(int i) {
			return GetToken(MariaDBParser.NO, i);
		}
		public RollbackWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRollbackWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRollbackWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollbackWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollbackWorkContext rollbackWork() {
		RollbackWorkContext _localctx = new RollbackWorkContext(Context, State);
		EnterRule(_localctx, 316, RULE_rollbackWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4470;
			Match(ROLLBACK);
			State = 4472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 4471;
				Match(WORK);
				}
			}

			State = 4479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AND) {
				{
				State = 4474;
				Match(AND);
				State = 4476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 4475;
					_localctx.nochain = Match(NO);
					}
				}

				State = 4478;
				Match(CHAIN);
				}
			}

			State = 4485;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,673,Context) ) {
			case 1:
				{
				State = 4482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO) {
					{
					State = 4481;
					_localctx.norelease = Match(NO);
					}
				}

				State = 4484;
				Match(RELEASE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepointStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MariaDBParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepointStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSavepointStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSavepointStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepointStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepointStatementContext savepointStatement() {
		SavepointStatementContext _localctx = new SavepointStatementContext(Context, State);
		EnterRule(_localctx, 318, RULE_savepointStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4487;
			Match(SAVEPOINT);
			State = 4488;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MariaDBParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MariaDBParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MariaDBParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MariaDBParser.SAVEPOINT, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRollbackStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRollbackStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollbackStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollbackStatementContext rollbackStatement() {
		RollbackStatementContext _localctx = new RollbackStatementContext(Context, State);
		EnterRule(_localctx, 320, RULE_rollbackStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4490;
			Match(ROLLBACK);
			State = 4492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK) {
				{
				State = 4491;
				Match(WORK);
				}
			}

			State = 4494;
			Match(TO);
			State = 4496;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,675,Context) ) {
			case 1:
				{
				State = 4495;
				Match(SAVEPOINT);
				}
				break;
			}
			State = 4498;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReleaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE() { return GetToken(MariaDBParser.RELEASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MariaDBParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public ReleaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_releaseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterReleaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitReleaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReleaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReleaseStatementContext releaseStatement() {
		ReleaseStatementContext _localctx = new ReleaseStatementContext(Context, State);
		EnterRule(_localctx, 322, RULE_releaseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4500;
			Match(RELEASE);
			State = 4501;
			Match(SAVEPOINT);
			State = 4502;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MariaDBParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockTableElementContext[] lockTableElement() {
			return GetRuleContexts<LockTableElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockTableElementContext lockTableElement(int i) {
			return GetRuleContext<LockTableElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MariaDBParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		public LockTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLockTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLockTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockTablesContext lockTables() {
		LockTablesContext _localctx = new LockTablesContext(Context, State);
		EnterRule(_localctx, 324, RULE_lockTables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4504;
			Match(LOCK);
			State = 4505;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4506;
			lockTableElement();
			State = 4511;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4507;
				Match(COMMA);
				State = 4508;
				lockTableElement();
				}
				}
				State = 4513;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 4514;
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK() { return GetToken(MariaDBParser.UNLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MariaDBParser.TABLES, 0); }
		public UnlockTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUnlockTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUnlockTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockTablesContext unlockTables() {
		UnlockTablesContext _localctx = new UnlockTablesContext(Context, State);
		EnterRule(_localctx, 326, RULE_unlockTables);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4517;
			Match(UNLOCK);
			State = 4518;
			Match(TABLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAutocommitStatementContext : ParserRuleContext {
		public IToken autocommitValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOCOMMIT() { return GetToken(MariaDBParser.AUTOCOMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MariaDBParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MariaDBParser.ONE_DECIMAL, 0); }
		public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAutocommitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSetAutocommitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSetAutocommitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAutocommitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetAutocommitStatementContext setAutocommitStatement() {
		SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(Context, State);
		EnterRule(_localctx, 328, RULE_setAutocommitStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4520;
			Match(SET);
			State = 4521;
			Match(AUTOCOMMIT);
			State = 4522;
			Match(EQUAL_SYMBOL);
			State = 4523;
			_localctx.autocommitValue = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
				_localctx.autocommitValue = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetTransactionStatementContext : ParserRuleContext {
		public IToken transactionContext;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MariaDBParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionOptionContext[] transactionOption() {
			return GetRuleContexts<TransactionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionOptionContext transactionOption(int i) {
			return GetRuleContext<TransactionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MariaDBParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MariaDBParser.SESSION, 0); }
		public SetTransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setTransactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSetTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSetTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetTransactionStatementContext setTransactionStatement() {
		SetTransactionStatementContext _localctx = new SetTransactionStatementContext(Context, State);
		EnterRule(_localctx, 330, RULE_setTransactionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4525;
			Match(SET);
			State = 4527;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				State = 4526;
				_localctx.transactionContext = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
					_localctx.transactionContext = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 4529;
			Match(TRANSACTION);
			State = 4530;
			transactionOption();
			State = 4535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4531;
				Match(COMMA);
				State = 4532;
				transactionOption();
				}
				}
				State = 4537;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT() { return GetToken(MariaDBParser.CONSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(MariaDBParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MariaDBParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MariaDBParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MariaDBParser.ONLY, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTransactionMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTransactionMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionModeContext transactionMode() {
		TransactionModeContext _localctx = new TransactionModeContext(Context, State);
		EnterRule(_localctx, 332, RULE_transactionMode);
		try {
			State = 4545;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,680,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4538;
				Match(WITH);
				State = 4539;
				Match(CONSISTENT);
				State = 4540;
				Match(SNAPSHOT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4541;
				Match(READ);
				State = 4542;
				Match(WRITE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4543;
				Match(READ);
				State = 4544;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockTableElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockActionContext lockAction() {
			return GetRuleContext<LockActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		public LockTableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockTableElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLockTableElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLockTableElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockTableElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockTableElementContext lockTableElement() {
		LockTableElementContext _localctx = new LockTableElementContext(Context, State);
		EnterRule(_localctx, 334, RULE_lockTableElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4547;
			tableName();
			State = 4552;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010177536L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
				{
				State = 4549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 4548;
					Match(AS);
					}
				}

				State = 4551;
				uid();
				}
			}

			State = 4554;
			lockAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MariaDBParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MariaDBParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MariaDBParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY() { return GetToken(MariaDBParser.LOW_PRIORITY, 0); }
		public LockActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLockAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLockAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockActionContext lockAction() {
		LockActionContext _localctx = new LockActionContext(Context, State);
		EnterRule(_localctx, 336, RULE_lockAction);
		int _la;
		try {
			State = 4564;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4556;
				Match(READ);
				State = 4558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL) {
					{
					State = 4557;
					Match(LOCAL);
					}
				}

				}
				break;
			case LOW_PRIORITY:
			case WRITE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOW_PRIORITY) {
					{
					State = 4560;
					Match(LOW_PRIORITY);
					}
				}

				State = 4563;
				Match(WRITE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(MariaDBParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MariaDBParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionLevelContext transactionLevel() {
			return GetRuleContext<TransactionLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MariaDBParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE() { return GetToken(MariaDBParser.WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MariaDBParser.ONLY, 0); }
		public TransactionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTransactionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTransactionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionOptionContext transactionOption() {
		TransactionOptionContext _localctx = new TransactionOptionContext(Context, State);
		EnterRule(_localctx, 338, RULE_transactionOption);
		try {
			State = 4573;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,686,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4566;
				Match(ISOLATION);
				State = 4567;
				Match(LEVEL);
				State = 4568;
				transactionLevel();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4569;
				Match(READ);
				State = 4570;
				Match(WRITE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4571;
				Match(READ);
				State = 4572;
				Match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(MariaDBParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MariaDBParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(MariaDBParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(MariaDBParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(MariaDBParser.SERIALIZABLE, 0); }
		public TransactionLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTransactionLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTransactionLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionLevelContext transactionLevel() {
		TransactionLevelContext _localctx = new TransactionLevelContext(Context, State);
		EnterRule(_localctx, 340, RULE_transactionLevel);
		try {
			State = 4582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,687,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4575;
				Match(REPEATABLE);
				State = 4576;
				Match(READ);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4577;
				Match(READ);
				State = 4578;
				Match(COMMITTED);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4579;
				Match(READ);
				State = 4580;
				Match(UNCOMMITTED);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4581;
				Match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeMasterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MariaDBParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MariaDBParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MariaDBParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MasterOptionContext[] masterOption() {
			return GetRuleContexts<MasterOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MasterOptionContext masterOption(int i) {
			return GetRuleContext<MasterOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeMaster; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterChangeMaster(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitChangeMaster(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeMaster(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeMasterContext changeMaster() {
		ChangeMasterContext _localctx = new ChangeMasterContext(Context, State);
		EnterRule(_localctx, 342, RULE_changeMaster);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4584;
			Match(CHANGE);
			State = 4585;
			Match(MASTER);
			State = 4586;
			Match(TO);
			State = 4587;
			masterOption();
			State = 4592;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4588;
				Match(COMMA);
				State = 4589;
				masterOption();
				}
				}
				State = 4594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4595;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE() { return GetToken(MariaDBParser.CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MariaDBParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(MariaDBParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationFilterContext[] replicationFilter() {
			return GetRuleContexts<ReplicationFilterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationFilterContext replicationFilter(int i) {
			return GetRuleContext<ReplicationFilterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChangeReplicationFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationFilterContext changeReplicationFilter() {
		ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(Context, State);
		EnterRule(_localctx, 344, RULE_changeReplicationFilter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4598;
			Match(CHANGE);
			State = 4599;
			Match(REPLICATION);
			State = 4600;
			Match(FILTER);
			State = 4601;
			replicationFilter();
			State = 4606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4602;
				Match(COMMA);
				State = 4603;
				replicationFilter();
				}
				}
				State = 4608;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurgeBinaryLogsContext : ParserRuleContext {
		public IToken purgeFormat;
		public IToken fileName;
		public IToken timeValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURGE() { return GetToken(MariaDBParser.PURGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MariaDBParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MariaDBParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MariaDBParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MariaDBParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE() { return GetToken(MariaDBParser.BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purgeBinaryLogs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPurgeBinaryLogs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPurgeBinaryLogs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPurgeBinaryLogs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PurgeBinaryLogsContext purgeBinaryLogs() {
		PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(Context, State);
		EnterRule(_localctx, 346, RULE_purgeBinaryLogs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4609;
			Match(PURGE);
			State = 4610;
			_localctx.purgeFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
				_localctx.purgeFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4611;
			Match(LOGS);
			State = 4616;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO:
				{
				State = 4612;
				Match(TO);
				State = 4613;
				_localctx.fileName = Match(STRING_LITERAL);
				}
				break;
			case BEFORE:
				{
				State = 4614;
				Match(BEFORE);
				State = 4615;
				_localctx.timeValue = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetMasterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MariaDBParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MariaDBParser.MASTER, 0); }
		public ResetMasterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetMaster; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterResetMaster(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitResetMaster(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetMaster(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetMasterContext resetMaster() {
		ResetMasterContext _localctx = new ResetMasterContext(Context, State);
		EnterRule(_localctx, 348, RULE_resetMaster);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4618;
			Match(RESET);
			State = 4619;
			Match(MASTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MariaDBParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MariaDBParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ResetSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterResetSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitResetSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetSlaveContext resetSlave() {
		ResetSlaveContext _localctx = new ResetSlaveContext(Context, State);
		EnterRule(_localctx, 350, RULE_resetSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4621;
			Match(RESET);
			State = 4622;
			Match(SLAVE);
			State = 4624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL) {
				{
				State = 4623;
				Match(ALL);
				}
			}

			State = 4627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4626;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MariaDBParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MariaDBParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext[] threadType() {
			return GetRuleContexts<ThreadTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext threadType(int i) {
			return GetRuleContext<ThreadTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MariaDBParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UntilOptionContext untilOption() {
			return GetRuleContext<UntilOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionOptionContext[] connectionOption() {
			return GetRuleContexts<ConnectionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectionOptionContext connectionOption(int i) {
			return GetRuleContext<ConnectionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public StartSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterStartSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitStartSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartSlaveContext startSlave() {
		StartSlaveContext _localctx = new StartSlaveContext(Context, State);
		EnterRule(_localctx, 352, RULE_startSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4629;
			Match(START);
			State = 4630;
			Match(SLAVE);
			State = 4639;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				State = 4631;
				threadType();
				State = 4636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4632;
					Match(COMMA);
					State = 4633;
					threadType();
					}
					}
					State = 4638;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 4643;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL) {
				{
				State = 4641;
				Match(UNTIL);
				State = 4642;
				untilOption();
				}
			}

			State = 4648;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DEFAULT_AUTH || _la==PASSWORD || _la==PLUGIN_DIR || _la==USER) {
				{
				{
				State = 4645;
				connectionOption();
				}
				}
				State = 4650;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4652;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 4651;
				channelOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopSlaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MariaDBParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MariaDBParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext[] threadType() {
			return GetRuleContexts<ThreadTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThreadTypeContext threadType(int i) {
			return GetRuleContext<ThreadTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public StopSlaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopSlave; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterStopSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitStopSlave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopSlave(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopSlaveContext stopSlave() {
		StopSlaveContext _localctx = new StopSlaveContext(Context, State);
		EnterRule(_localctx, 354, RULE_stopSlave);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4654;
			Match(STOP);
			State = 4655;
			Match(SLAVE);
			State = 4664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IO_THREAD || _la==SQL_THREAD) {
				{
				State = 4656;
				threadType();
				State = 4661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4657;
					Match(COMMA);
					State = 4658;
					threadType();
					}
					}
					State = 4663;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartGroupReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MariaDBParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MariaDBParser.GROUP_REPLICATION, 0); }
		public StartGroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startGroupReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterStartGroupReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitStartGroupReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartGroupReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartGroupReplicationContext startGroupReplication() {
		StartGroupReplicationContext _localctx = new StartGroupReplicationContext(Context, State);
		EnterRule(_localctx, 356, RULE_startGroupReplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4666;
			Match(START);
			State = 4667;
			Match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopGroupReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MariaDBParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MariaDBParser.GROUP_REPLICATION, 0); }
		public StopGroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopGroupReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterStopGroupReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitStopGroupReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopGroupReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopGroupReplicationContext stopGroupReplication() {
		StopGroupReplicationContext _localctx = new StopGroupReplicationContext(Context, State);
		EnterRule(_localctx, 358, RULE_stopGroupReplication);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4669;
			Match(STOP);
			State = 4670;
			Match(GROUP_REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterOptionContext : ParserRuleContext {
		public MasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterOption; } }
	 
		public MasterOptionContext() { }
		public virtual void CopyFrom(MasterOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MasterStringOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringMasterOptionContext stringMasterOption() {
			return GetRuleContext<StringMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public MasterStringOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterMasterStringOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitMasterStringOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterStringOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterRealOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MariaDBParser.MASTER_HEARTBEAT_PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MariaDBParser.REAL_LITERAL, 0); }
		public MasterRealOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterMasterRealOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitMasterRealOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterRealOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterBoolOptionContext : MasterOptionContext {
		public IToken boolVal;
		[System.Diagnostics.DebuggerNonUserCode] public BoolMasterOptionContext boolMasterOption() {
			return GetRuleContext<BoolMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MariaDBParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MariaDBParser.ONE_DECIMAL, 0); }
		public MasterBoolOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterMasterBoolOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitMasterBoolOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterBoolOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterUidListOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MariaDBParser.IGNORE_SERVER_IDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public MasterUidListOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterMasterUidListOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitMasterUidListOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterUidListOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterDecimalOptionContext : MasterOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalMasterOptionContext decimalMasterOption() {
			return GetRuleContext<DecimalMasterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public MasterDecimalOptionContext(MasterOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterMasterDecimalOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitMasterDecimalOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterDecimalOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MasterOptionContext masterOption() {
		MasterOptionContext _localctx = new MasterOptionContext(Context, State);
		EnterRule(_localctx, 360, RULE_masterOption);
		int _la;
		try {
			State = 4701;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_BIND:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_PASSWORD:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case RELAY_LOG_FILE:
				_localctx = new MasterStringOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4672;
				stringMasterOption();
				State = 4673;
				Match(EQUAL_SYMBOL);
				State = 4674;
				Match(STRING_LITERAL);
				}
				break;
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_LOG_POS:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case RELAY_LOG_POS:
				_localctx = new MasterDecimalOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4676;
				decimalMasterOption();
				State = 4677;
				Match(EQUAL_SYMBOL);
				State = 4678;
				decimalLiteral();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT:
			case MASTER_AUTO_POSITION:
			case MASTER_SSL:
				_localctx = new MasterBoolOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4680;
				boolMasterOption();
				State = 4681;
				Match(EQUAL_SYMBOL);
				State = 4682;
				((MasterBoolOptionContext)_localctx).boolVal = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ZERO_DECIMAL || _la==ONE_DECIMAL) ) {
					((MasterBoolOptionContext)_localctx).boolVal = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case MASTER_HEARTBEAT_PERIOD:
				_localctx = new MasterRealOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4684;
				Match(MASTER_HEARTBEAT_PERIOD);
				State = 4685;
				Match(EQUAL_SYMBOL);
				State = 4686;
				Match(REAL_LITERAL);
				}
				break;
			case IGNORE_SERVER_IDS:
				_localctx = new MasterUidListOptionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4687;
				Match(IGNORE_SERVER_IDS);
				State = 4688;
				Match(EQUAL_SYMBOL);
				State = 4689;
				Match(LR_BRACKET);
				State = 4698;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
					{
					State = 4690;
					uid();
					State = 4695;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 4691;
						Match(COMMA);
						State = 4692;
						uid();
						}
						}
						State = 4697;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 4700;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_BIND() { return GetToken(MariaDBParser.MASTER_BIND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST() { return GetToken(MariaDBParser.MASTER_HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER() { return GetToken(MariaDBParser.MASTER_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD() { return GetToken(MariaDBParser.MASTER_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MariaDBParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MariaDBParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA() { return GetToken(MariaDBParser.MASTER_SSL_CA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MariaDBParser.MASTER_SSL_CAPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT() { return GetToken(MariaDBParser.MASTER_SSL_CERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL() { return GetToken(MariaDBParser.MASTER_SSL_CRL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MariaDBParser.MASTER_SSL_CRLPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY() { return GetToken(MariaDBParser.MASTER_SSL_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MariaDBParser.MASTER_SSL_CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MariaDBParser.MASTER_TLS_VERSION, 0); }
		public StringMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterStringMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitStringMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringMasterOptionContext stringMasterOption() {
		StringMasterOptionContext _localctx = new StringMasterOptionContext(Context, State);
		EnterRule(_localctx, 362, RULE_stringMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4703;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_BIND || ((((_la - 487)) & ~0x3f) == 0 && ((1L << (_la - 487)) & 65419L) != 0) || _la==RELAY_LOG_FILE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT() { return GetToken(MariaDBParser.MASTER_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MariaDBParser.MASTER_CONNECT_RETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MariaDBParser.MASTER_RETRY_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY() { return GetToken(MariaDBParser.MASTER_DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MariaDBParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MariaDBParser.RELAY_LOG_POS, 0); }
		public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDecimalMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDecimalMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalMasterOptionContext decimalMasterOption() {
		DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(Context, State);
		EnterRule(_localctx, 364, RULE_decimalMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4705;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & 419L) != 0) || _la==RELAY_LOG_POS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolMasterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MariaDBParser.MASTER_AUTO_POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL() { return GetToken(MariaDBParser.MASTER_SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return GetToken(MariaDBParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
		public BoolMasterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolMasterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterBoolMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitBoolMasterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolMasterOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolMasterOptionContext boolMasterOption() {
		BoolMasterOptionContext _localctx = new BoolMasterOptionContext(Context, State);
		EnterRule(_localctx, 366, RULE_boolMasterOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4707;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT || _la==MASTER_AUTO_POSITION || _la==MASTER_SSL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MariaDBParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public ChannelOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channelOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterChannelOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitChannelOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelOptionContext channelOption() {
		ChannelOptionContext _localctx = new ChannelOptionContext(Context, State);
		EnterRule(_localctx, 368, RULE_channelOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4709;
			Match(FOR);
			State = 4710;
			Match(CHANNEL);
			State = 4711;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationFilterContext : ParserRuleContext {
		public ReplicationFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationFilter; } }
	 
		public ReplicationFilterContext() { }
		public virtual void CopyFrom(ReplicationFilterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WildIgnoreTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MariaDBParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStringsContext simpleStrings() {
			return GetRuleContext<SimpleStringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public WildIgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterWildIgnoreTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitWildIgnoreTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildIgnoreTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MariaDBParser.REPLICATE_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public DoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDoTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDoTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgnoreTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MariaDBParser.REPLICATE_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public IgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIgnoreTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIgnoreTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnoreTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RewriteDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MariaDBParser.REPLICATE_REWRITE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePairContext[] tablePair() {
			return GetRuleContexts<TablePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablePairContext tablePair(int i) {
			return GetRuleContext<TablePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public RewriteDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRewriteDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRewriteDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRewriteDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB() { return GetToken(MariaDBParser.REPLICATE_DO_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public DoDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDoDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDoDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IgnoreDbReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MariaDBParser.REPLICATE_IGNORE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public IgnoreDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIgnoreDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIgnoreDbReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnoreDbReplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WildDoTableReplicationContext : ReplicationFilterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MariaDBParser.REPLICATE_WILD_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStringsContext simpleStrings() {
			return GetRuleContext<SimpleStringsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public WildDoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterWildDoTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitWildDoTableReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWildDoTableReplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationFilterContext replicationFilter() {
		ReplicationFilterContext _localctx = new ReplicationFilterContext(Context, State);
		EnterRule(_localctx, 370, RULE_replicationFilter);
		int _la;
		try {
			State = 4762;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPLICATE_DO_DB:
				_localctx = new DoDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4713;
				Match(REPLICATE_DO_DB);
				State = 4714;
				Match(EQUAL_SYMBOL);
				State = 4715;
				Match(LR_BRACKET);
				State = 4716;
				uidList();
				State = 4717;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_DB:
				_localctx = new IgnoreDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4719;
				Match(REPLICATE_IGNORE_DB);
				State = 4720;
				Match(EQUAL_SYMBOL);
				State = 4721;
				Match(LR_BRACKET);
				State = 4722;
				uidList();
				State = 4723;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_DO_TABLE:
				_localctx = new DoTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4725;
				Match(REPLICATE_DO_TABLE);
				State = 4726;
				Match(EQUAL_SYMBOL);
				State = 4727;
				Match(LR_BRACKET);
				State = 4728;
				tables();
				State = 4729;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_IGNORE_TABLE:
				_localctx = new IgnoreTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4731;
				Match(REPLICATE_IGNORE_TABLE);
				State = 4732;
				Match(EQUAL_SYMBOL);
				State = 4733;
				Match(LR_BRACKET);
				State = 4734;
				tables();
				State = 4735;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_DO_TABLE:
				_localctx = new WildDoTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 4737;
				Match(REPLICATE_WILD_DO_TABLE);
				State = 4738;
				Match(EQUAL_SYMBOL);
				State = 4739;
				Match(LR_BRACKET);
				State = 4740;
				simpleStrings();
				State = 4741;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE:
				_localctx = new WildIgnoreTableReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 4743;
				Match(REPLICATE_WILD_IGNORE_TABLE);
				State = 4744;
				Match(EQUAL_SYMBOL);
				State = 4745;
				Match(LR_BRACKET);
				State = 4746;
				simpleStrings();
				State = 4747;
				Match(RR_BRACKET);
				}
				break;
			case REPLICATE_REWRITE_DB:
				_localctx = new RewriteDbReplicationContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 4749;
				Match(REPLICATE_REWRITE_DB);
				State = 4750;
				Match(EQUAL_SYMBOL);
				State = 4751;
				Match(LR_BRACKET);
				State = 4752;
				tablePair();
				State = 4757;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4753;
					Match(COMMA);
					State = 4754;
					tablePair();
					}
					}
					State = 4759;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4760;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePairContext : ParserRuleContext {
		public TableNameContext firstTable;
		public TableNameContext secondTable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MariaDBParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		public TablePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTablePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTablePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablePairContext tablePair() {
		TablePairContext _localctx = new TablePairContext(Context, State);
		EnterRule(_localctx, 372, RULE_tablePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4764;
			Match(LR_BRACKET);
			State = 4765;
			_localctx.firstTable = tableName();
			State = 4766;
			Match(COMMA);
			State = 4767;
			_localctx.secondTable = tableName();
			State = 4768;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_THREAD() { return GetToken(MariaDBParser.IO_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD() { return GetToken(MariaDBParser.SQL_THREAD, 0); }
		public ThreadTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterThreadType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitThreadType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThreadType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThreadTypeContext threadType() {
		ThreadTypeContext _localctx = new ThreadTypeContext(Context, State);
		EnterRule(_localctx, 374, RULE_threadType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4770;
			_la = TokenStream.LA(1);
			if ( !(_la==IO_THREAD || _la==SQL_THREAD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UntilOptionContext : ParserRuleContext {
		public UntilOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_untilOption; } }
	 
		public UntilOptionContext() { }
		public virtual void CopyFrom(UntilOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GtidsUntilOptionContext : UntilOptionContext {
		public IToken gtids;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GtuidSetContext gtuidSet() {
			return GetRuleContext<GtuidSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MariaDBParser.SQL_BEFORE_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MariaDBParser.SQL_AFTER_GTIDS, 0); }
		public GtidsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterGtidsUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitGtidsUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtidsUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SqlGapsUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MariaDBParser.SQL_AFTER_MTS_GAPS, 0); }
		public SqlGapsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSqlGapsUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSqlGapsUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlGapsUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MasterLogUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MariaDBParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MariaDBParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MariaDBParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public MasterLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterMasterLogUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitMasterLogUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMasterLogUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelayLogUntilOptionContext : UntilOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MariaDBParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MariaDBParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MariaDBParser.RELAY_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public RelayLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRelayLogUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRelayLogUntilOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelayLogUntilOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UntilOptionContext untilOption() {
		UntilOptionContext _localctx = new UntilOptionContext(Context, State);
		EnterRule(_localctx, 376, RULE_untilOption);
		int _la;
		try {
			State = 4790;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQL_AFTER_GTIDS:
			case SQL_BEFORE_GTIDS:
				_localctx = new GtidsUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4772;
				((GtidsUntilOptionContext)_localctx).gtids = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS || _la==SQL_BEFORE_GTIDS) ) {
					((GtidsUntilOptionContext)_localctx).gtids = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4773;
				Match(EQUAL_SYMBOL);
				State = 4774;
				gtuidSet();
				}
				break;
			case MASTER_LOG_FILE:
				_localctx = new MasterLogUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4775;
				Match(MASTER_LOG_FILE);
				State = 4776;
				Match(EQUAL_SYMBOL);
				State = 4777;
				Match(STRING_LITERAL);
				State = 4778;
				Match(COMMA);
				State = 4779;
				Match(MASTER_LOG_POS);
				State = 4780;
				Match(EQUAL_SYMBOL);
				State = 4781;
				decimalLiteral();
				}
				break;
			case RELAY_LOG_FILE:
				_localctx = new RelayLogUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4782;
				Match(RELAY_LOG_FILE);
				State = 4783;
				Match(EQUAL_SYMBOL);
				State = 4784;
				Match(STRING_LITERAL);
				State = 4785;
				Match(COMMA);
				State = 4786;
				Match(RELAY_LOG_POS);
				State = 4787;
				Match(EQUAL_SYMBOL);
				State = 4788;
				decimalLiteral();
				}
				break;
			case SQL_AFTER_MTS_GAPS:
				_localctx = new SqlGapsUntilOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4789;
				Match(SQL_AFTER_MTS_GAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectionOptionContext : ParserRuleContext {
		public ConnectionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectionOption; } }
	 
		public ConnectionOptionContext() { }
		public virtual void CopyFrom(ConnectionOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PluginDirConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptPluginDir;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR() { return GetToken(MariaDBParser.PLUGIN_DIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public PluginDirConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPluginDirConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPluginDirConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPluginDirConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UserConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptUser;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MariaDBParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public UserConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUserConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUserConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefaultAuthConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptDefAuth;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH() { return GetToken(MariaDBParser.DEFAULT_AUTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public DefaultAuthConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDefaultAuthConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDefaultAuthConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultAuthConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PasswordConnectionOptionContext : ConnectionOptionContext {
		public IToken conOptPassword;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MariaDBParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public PasswordConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPasswordConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPasswordConnectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordConnectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConnectionOptionContext connectionOption() {
		ConnectionOptionContext _localctx = new ConnectionOptionContext(Context, State);
		EnterRule(_localctx, 378, RULE_connectionOption);
		try {
			State = 4804;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USER:
				_localctx = new UserConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 4792;
				Match(USER);
				State = 4793;
				Match(EQUAL_SYMBOL);
				State = 4794;
				((UserConnectionOptionContext)_localctx).conOptUser = Match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				_localctx = new PasswordConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 4795;
				Match(PASSWORD);
				State = 4796;
				Match(EQUAL_SYMBOL);
				State = 4797;
				((PasswordConnectionOptionContext)_localctx).conOptPassword = Match(STRING_LITERAL);
				}
				break;
			case DEFAULT_AUTH:
				_localctx = new DefaultAuthConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 4798;
				Match(DEFAULT_AUTH);
				State = 4799;
				Match(EQUAL_SYMBOL);
				State = 4800;
				((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = Match(STRING_LITERAL);
				}
				break;
			case PLUGIN_DIR:
				_localctx = new PluginDirConnectionOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 4801;
				Match(PLUGIN_DIR);
				State = 4802;
				Match(EQUAL_SYMBOL);
				State = 4803;
				((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GtuidSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UuidSetContext[] uuidSet() {
			return GetRuleContexts<UuidSetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UuidSetContext uuidSet(int i) {
			return GetRuleContext<UuidSetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public GtuidSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gtuidSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterGtuidSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitGtuidSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGtuidSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GtuidSetContext gtuidSet() {
		GtuidSetContext _localctx = new GtuidSetContext(Context, State);
		EnterRule(_localctx, 380, RULE_gtuidSet);
		int _la;
		try {
			State = 4815;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4806;
				uuidSet();
				State = 4811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 4807;
					Match(COMMA);
					State = 4808;
					uuidSet();
					}
					}
					State = 4813;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4814;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaStartTransactionContext : ParserRuleContext {
		public IToken xaStart;
		public IToken xaAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MariaDBParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MariaDBParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MariaDBParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN() { return GetToken(MariaDBParser.JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME() { return GetToken(MariaDBParser.RESUME, 0); }
		public XaStartTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaStartTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterXaStartTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitXaStartTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaStartTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaStartTransactionContext xaStartTransaction() {
		XaStartTransactionContext _localctx = new XaStartTransactionContext(Context, State);
		EnterRule(_localctx, 382, RULE_xaStartTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4817;
			Match(XA);
			State = 4818;
			_localctx.xaStart = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BEGIN || _la==START) ) {
				_localctx.xaStart = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4819;
			xid();
			State = 4821;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==JOIN || _la==RESUME) {
				{
				State = 4820;
				_localctx.xaAction = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JOIN || _la==RESUME) ) {
					_localctx.xaAction = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaEndTransactionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MariaDBParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MariaDBParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(MariaDBParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE() { return GetToken(MariaDBParser.MIGRATE, 0); }
		public XaEndTransactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaEndTransaction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterXaEndTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitXaEndTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaEndTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaEndTransactionContext xaEndTransaction() {
		XaEndTransactionContext _localctx = new XaEndTransactionContext(Context, State);
		EnterRule(_localctx, 384, RULE_xaEndTransaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4823;
			Match(XA);
			State = 4824;
			Match(END);
			State = 4825;
			xid();
			State = 4831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUSPEND) {
				{
				State = 4826;
				Match(SUSPEND);
				State = 4829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 4827;
					Match(FOR);
					State = 4828;
					Match(MIGRATE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaPrepareStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MariaDBParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MariaDBParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaPrepareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaPrepareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterXaPrepareStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitXaPrepareStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaPrepareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaPrepareStatementContext xaPrepareStatement() {
		XaPrepareStatementContext _localctx = new XaPrepareStatementContext(Context, State);
		EnterRule(_localctx, 386, RULE_xaPrepareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4833;
			Match(XA);
			State = 4834;
			Match(PREPARE);
			State = 4835;
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaCommitWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MariaDBParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MariaDBParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(MariaDBParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE() { return GetToken(MariaDBParser.PHASE, 0); }
		public XaCommitWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaCommitWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterXaCommitWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitXaCommitWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaCommitWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaCommitWorkContext xaCommitWork() {
		XaCommitWorkContext _localctx = new XaCommitWorkContext(Context, State);
		EnterRule(_localctx, 388, RULE_xaCommitWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4837;
			Match(XA);
			State = 4838;
			Match(COMMIT);
			State = 4839;
			xid();
			State = 4842;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ONE) {
				{
				State = 4840;
				Match(ONE);
				State = 4841;
				Match(PHASE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaRollbackWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MariaDBParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MariaDBParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaRollbackWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaRollbackWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterXaRollbackWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitXaRollbackWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaRollbackWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaRollbackWorkContext xaRollbackWork() {
		XaRollbackWorkContext _localctx = new XaRollbackWorkContext(Context, State);
		EnterRule(_localctx, 390, RULE_xaRollbackWork);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4844;
			Match(XA);
			State = 4845;
			Match(ROLLBACK);
			State = 4846;
			xid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaRecoverWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MariaDBParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER() { return GetToken(MariaDBParser.RECOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MariaDBParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		public XaRecoverWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaRecoverWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterXaRecoverWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitXaRecoverWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXaRecoverWork(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XaRecoverWorkContext xaRecoverWork() {
		XaRecoverWorkContext _localctx = new XaRecoverWorkContext(Context, State);
		EnterRule(_localctx, 392, RULE_xaRecoverWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4848;
			Match(XA);
			State = 4849;
			Match(RECOVER);
			State = 4852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CONVERT) {
				{
				State = 4850;
				Match(CONVERT);
				State = 4851;
				xid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrepareStatementContext : ParserRuleContext {
		public IToken query;
		public IToken variable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MariaDBParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MariaDBParser.LOCAL_ID, 0); }
		public PrepareStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prepareStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPrepareStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPrepareStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrepareStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrepareStatementContext prepareStatement() {
		PrepareStatementContext _localctx = new PrepareStatementContext(Context, State);
		EnterRule(_localctx, 394, RULE_prepareStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4854;
			Match(PREPARE);
			State = 4855;
			uid();
			State = 4856;
			Match(FROM);
			State = 4859;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				{
				State = 4857;
				_localctx.query = Match(STRING_LITERAL);
				}
				break;
			case LOCAL_ID:
				{
				State = 4858;
				_localctx.variable = Match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MariaDBParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MariaDBParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserVariablesContext userVariables() {
			return GetRuleContext<UserVariablesContext>(0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterExecuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitExecuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecuteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(Context, State);
		EnterRule(_localctx, 396, RULE_executeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4861;
			Match(EXECUTE);
			State = 4862;
			uid();
			State = 4865;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 4863;
				Match(USING);
				State = 4864;
				userVariables();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeallocatePrepareContext : ParserRuleContext {
		public IToken dropFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MariaDBParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(MariaDBParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		public DeallocatePrepareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deallocatePrepare; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDeallocatePrepare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDeallocatePrepare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeallocatePrepare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeallocatePrepareContext deallocatePrepare() {
		DeallocatePrepareContext _localctx = new DeallocatePrepareContext(Context, State);
		EnterRule(_localctx, 398, RULE_deallocatePrepare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4867;
			_localctx.dropFormat = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DROP || _la==DEALLOCATE) ) {
				_localctx.dropFormat = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4868;
			Match(PREPARE);
			State = 4869;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement() {
			return GetRuleContext<SqlStatementContext>(0);
		}
		public RoutineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRoutineBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRoutineBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoutineBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoutineBodyContext routineBody() {
		RoutineBodyContext _localctx = new RoutineBodyContext(Context, State);
		EnterRule(_localctx, 400, RULE_routineBody);
		try {
			State = 4873;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,717,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4871;
				blockStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4872;
				sqlStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MariaDBParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MariaDBParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MariaDBParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext[] declareVariable() {
			return GetRuleContexts<DeclareVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareVariableContext declareVariable(int i) {
			return GetRuleContext<DeclareVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMI() { return GetTokens(MariaDBParser.SEMI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI(int i) {
			return GetToken(MariaDBParser.SEMI, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareConditionContext[] declareCondition() {
			return GetRuleContexts<DeclareConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareConditionContext declareCondition(int i) {
			return GetRuleContext<DeclareConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareCursorContext[] declareCursor() {
			return GetRuleContexts<DeclareCursorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareCursorContext declareCursor(int i) {
			return GetRuleContext<DeclareCursorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareHandlerContext[] declareHandler() {
			return GetRuleContexts<DeclareHandlerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclareHandlerContext declareHandler(int i) {
			return GetRuleContext<DeclareHandlerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 402, RULE_blockStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4878;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,718,Context) ) {
			case 1:
				{
				State = 4875;
				uid();
				State = 4876;
				Match(COLON_SYMB);
				}
				break;
			}
			State = 4880;
			Match(BEGIN);
			State = 4919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,724,Context) ) {
			case 1:
				{
				State = 4886;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,719,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4881;
						declareVariable();
						State = 4882;
						Match(SEMI);
						}
						} 
					}
					State = 4888;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,719,Context);
				}
				State = 4894;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,720,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4889;
						declareCondition();
						State = 4890;
						Match(SEMI);
						}
						} 
					}
					State = 4896;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,720,Context);
				}
				State = 4902;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,721,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4897;
						declareCursor();
						State = 4898;
						Match(SEMI);
						}
						} 
					}
					State = 4904;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,721,Context);
				}
				State = 4910;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DECLARE) {
					{
					{
					State = 4905;
					declareHandler();
					State = 4906;
					Match(SEMI);
					}
					}
					State = 4912;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 4916;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,723,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 4913;
						procedureSqlStatement();
						}
						} 
					}
					State = 4918;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,723,Context);
				}
				}
				break;
			}
			State = 4921;
			Match(END);
			State = 4923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,725,Context) ) {
			case 1:
				{
				State = 4922;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE() { return GetTokens(MariaDBParser.CASE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE(int i) {
			return GetToken(MariaDBParser.CASE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MariaDBParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseAlternativeContext[] caseAlternative() {
			return GetRuleContexts<CaseAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseAlternativeContext caseAlternative(int i) {
			return GetRuleContext<CaseAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MariaDBParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 404, RULE_caseStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4925;
			Match(CASE);
			State = 4928;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,726,Context) ) {
			case 1:
				{
				State = 4926;
				uid();
				}
				break;
			case 2:
				{
				State = 4927;
				expression(0);
				}
				break;
			}
			State = 4931;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 4930;
				caseAlternative();
				}
				}
				State = 4933;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN );
			State = 4941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4935;
				Match(ELSE);
				State = 4937;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4936;
						procedureSqlStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4939;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,728,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			State = 4943;
			Match(END);
			State = 4944;
			Match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ProcedureSqlStatementContext _procedureSqlStatement;
		public IList<ProcedureSqlStatementContext> _thenStatements = new List<ProcedureSqlStatementContext>();
		public IList<ProcedureSqlStatementContext> _elseStatements = new List<ProcedureSqlStatementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(MariaDBParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(MariaDBParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MariaDBParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MariaDBParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElifAlternativeContext[] elifAlternative() {
			return GetRuleContexts<ElifAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElifAlternativeContext elifAlternative(int i) {
			return GetRuleContext<ElifAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MariaDBParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 406, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4946;
			Match(IF);
			State = 4947;
			expression(0);
			State = 4948;
			Match(THEN);
			State = 4950;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4949;
					_localctx._procedureSqlStatement = procedureSqlStatement();
					_localctx._thenStatements.Add(_localctx._procedureSqlStatement);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4952;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,730,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4957;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 4954;
				elifAlternative();
				}
				}
				State = 4959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4966;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 4960;
				Match(ELSE);
				State = 4962;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 4961;
						_localctx._procedureSqlStatement = procedureSqlStatement();
						_localctx._elseStatements.Add(_localctx._procedureSqlStatement);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 4964;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,732,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			State = 4968;
			Match(END);
			State = 4969;
			Match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERATE() { return GetToken(MariaDBParser.ITERATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIterateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIterateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterateStatementContext iterateStatement() {
		IterateStatementContext _localctx = new IterateStatementContext(Context, State);
		EnterRule(_localctx, 408, RULE_iterateStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4971;
			Match(ITERATE);
			State = 4972;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE() { return GetToken(MariaDBParser.LEAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLeaveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLeaveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeaveStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LeaveStatementContext leaveStatement() {
		LeaveStatementContext _localctx = new LeaveStatementContext(Context, State);
		EnterRule(_localctx, 410, RULE_leaveStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4974;
			Match(LEAVE);
			State = 4975;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP() { return GetTokens(MariaDBParser.LOOP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP(int i) {
			return GetToken(MariaDBParser.LOOP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MariaDBParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MariaDBParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopStatementContext loopStatement() {
		LoopStatementContext _localctx = new LoopStatementContext(Context, State);
		EnterRule(_localctx, 412, RULE_loopStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
				{
				State = 4977;
				uid();
				State = 4978;
				Match(COLON_SYMB);
				}
			}

			State = 4982;
			Match(LOOP);
			State = 4984;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4983;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 4986;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,735,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 4988;
			Match(END);
			State = 4989;
			Match(LOOP);
			State = 4991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
				{
				State = 4990;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REPEAT() { return GetTokens(MariaDBParser.REPEAT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT(int i) {
			return GetToken(MariaDBParser.REPEAT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MariaDBParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MariaDBParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MariaDBParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public RepeatStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRepeatStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepeatStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepeatStatementContext repeatStatement() {
		RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
		EnterRule(_localctx, 414, RULE_repeatStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
				{
				State = 4993;
				uid();
				State = 4994;
				Match(COLON_SYMB);
				}
			}

			State = 4998;
			Match(REPEAT);
			State = 5000;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 4999;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5002;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,738,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 5004;
			Match(UNTIL);
			State = 5005;
			expression(0);
			State = 5006;
			Match(END);
			State = 5007;
			Match(REPEAT);
			State = 5009;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
				{
				State = 5008;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(MariaDBParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 416, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5011;
			Match(RETURN);
			State = 5012;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE() { return GetTokens(MariaDBParser.WHILE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE(int i) {
			return GetToken(MariaDBParser.WHILE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MariaDBParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MariaDBParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB() { return GetToken(MariaDBParser.COLON_SYMB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 418, RULE_whileStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5017;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
				{
				State = 5014;
				uid();
				State = 5015;
				Match(COLON_SYMB);
				}
			}

			State = 5019;
			Match(WHILE);
			State = 5020;
			expression(0);
			State = 5021;
			Match(DO);
			State = 5023;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 5022;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5025;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,741,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 5027;
			Match(END);
			State = 5028;
			Match(WHILE);
			State = 5030;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 649091674010173440L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845687230545L) != 0) || ((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & 335610497L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17174494689L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & -2305844108725321729L) != 0) || ((((_la - 348)) & ~0x3f) == 0 && ((1L << (_la - 348)) & -1L) != 0) || ((((_la - 412)) & ~0x3f) == 0 && ((1L << (_la - 412)) & -33554433L) != 0) || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & -1L) != 0) || ((((_la - 540)) & ~0x3f) == 0 && ((1L << (_la - 540)) & -576460752320203777L) != 0) || ((((_la - 604)) & ~0x3f) == 0 && ((1L << (_la - 604)) & -1099511627777L) != 0) || ((((_la - 668)) & ~0x3f) == 0 && ((1L << (_la - 668)) & -5692567521182416897L) != 0) || ((((_la - 732)) & ~0x3f) == 0 && ((1L << (_la - 732)) & -16385L) != 0) || ((((_la - 796)) & ~0x3f) == 0 && ((1L << (_la - 796)) & -1572865L) != 0) || ((((_la - 860)) & ~0x3f) == 0 && ((1L << (_la - 860)) & -1L) != 0) || ((((_la - 924)) & ~0x3f) == 0 && ((1L << (_la - 924)) & -1L) != 0) || ((((_la - 988)) & ~0x3f) == 0 && ((1L << (_la - 988)) & -1L) != 0) || ((((_la - 1052)) & ~0x3f) == 0 && ((1L << (_la - 1052)) & -1L) != 0) || ((((_la - 1116)) & ~0x3f) == 0 && ((1L << (_la - 1116)) & 162129590880436223L) != 0) || _la==ID) {
				{
				State = 5029;
				uid();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorStatementContext : ParserRuleContext {
		public CursorStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorStatement; } }
	 
		public CursorStatementContext() { }
		public virtual void CopyFrom(CursorStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CloseCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MariaDBParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public CloseCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCloseCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCloseCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseCursor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpenCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MariaDBParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public OpenCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterOpenCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitOpenCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenCursor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FetchCursorContext : CursorStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH() { return GetToken(MariaDBParser.FETCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MariaDBParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MariaDBParser.NEXT, 0); }
		public FetchCursorContext(CursorStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFetchCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFetchCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFetchCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CursorStatementContext cursorStatement() {
		CursorStatementContext _localctx = new CursorStatementContext(Context, State);
		EnterRule(_localctx, 420, RULE_cursorStatement);
		int _la;
		try {
			State = 5047;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE:
				_localctx = new CloseCursorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5032;
				Match(CLOSE);
				State = 5033;
				uid();
				}
				break;
			case FETCH:
				_localctx = new FetchCursorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5034;
				Match(FETCH);
				State = 5039;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,744,Context) ) {
				case 1:
					{
					State = 5036;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NEXT) {
						{
						State = 5035;
						Match(NEXT);
						}
					}

					State = 5038;
					Match(FROM);
					}
					break;
				}
				State = 5041;
				uid();
				State = 5042;
				Match(INTO);
				State = 5043;
				uidList();
				}
				break;
			case OPEN:
				_localctx = new OpenCursorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5045;
				Match(OPEN);
				State = 5046;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MariaDBParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclareVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDeclareVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDeclareVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareVariableContext declareVariable() {
		DeclareVariableContext _localctx = new DeclareVariableContext(Context, State);
		EnterRule(_localctx, 422, RULE_declareVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5049;
			Match(DECLARE);
			State = 5050;
			uidList();
			State = 5051;
			dataType();
			State = 5054;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 5052;
				Match(DEFAULT);
				State = 5053;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MariaDBParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(MariaDBParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MariaDBParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MariaDBParser.VALUE, 0); }
		public DeclareConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDeclareCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDeclareCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareConditionContext declareCondition() {
		DeclareConditionContext _localctx = new DeclareConditionContext(Context, State);
		EnterRule(_localctx, 424, RULE_declareCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5056;
			Match(DECLARE);
			State = 5057;
			uid();
			State = 5058;
			Match(CONDITION);
			State = 5059;
			Match(FOR);
			State = 5066;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				{
				State = 5060;
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				{
				State = 5061;
				Match(SQLSTATE);
				State = 5063;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 5062;
					Match(VALUE);
					}
				}

				State = 5065;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareCursorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MariaDBParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR() { return GetToken(MariaDBParser.CURSOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public DeclareCursorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareCursor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDeclareCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDeclareCursor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareCursor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareCursorContext declareCursor() {
		DeclareCursorContext _localctx = new DeclareCursorContext(Context, State);
		EnterRule(_localctx, 426, RULE_declareCursor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5068;
			Match(DECLARE);
			State = 5069;
			uid();
			State = 5070;
			Match(CURSOR);
			State = 5071;
			Match(FOR);
			State = 5072;
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareHandlerContext : ParserRuleContext {
		public IToken handlerAction;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE() { return GetToken(MariaDBParser.DECLARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MariaDBParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionValueContext[] handlerConditionValue() {
			return GetRuleContexts<HandlerConditionValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionValueContext handlerConditionValue(int i) {
			return GetRuleContext<HandlerConditionValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineBodyContext routineBody() {
			return GetRuleContext<RoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE() { return GetToken(MariaDBParser.CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(MariaDBParser.EXIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO() { return GetToken(MariaDBParser.UNDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public DeclareHandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareHandler; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDeclareHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDeclareHandler(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareHandlerContext declareHandler() {
		DeclareHandlerContext _localctx = new DeclareHandlerContext(Context, State);
		EnterRule(_localctx, 428, RULE_declareHandler);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5074;
			Match(DECLARE);
			State = 5075;
			_localctx.handlerAction = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE || _la==EXIT || _la==UNDO) ) {
				_localctx.handlerAction = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5076;
			Match(HANDLER);
			State = 5077;
			Match(FOR);
			State = 5078;
			handlerConditionValue();
			State = 5083;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5079;
				Match(COMMA);
				State = 5080;
				handlerConditionValue();
				}
				}
				State = 5085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5086;
			routineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerConditionValueContext : ParserRuleContext {
		public HandlerConditionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerConditionValue; } }
	 
		public HandlerConditionValueContext() { }
		public virtual void CopyFrom(HandlerConditionValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class HandlerConditionWarningContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLWARNING() { return GetToken(MariaDBParser.SQLWARNING, 0); }
		public HandlerConditionWarningContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionWarning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionWarning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionWarning(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionCodeContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public HandlerConditionCodeContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionCode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionCode(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionNotfoundContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND() { return GetToken(MariaDBParser.FOUND, 0); }
		public HandlerConditionNotfoundContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionNotfound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionNotfound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionNotfound(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionStateContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MariaDBParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MariaDBParser.VALUE, 0); }
		public HandlerConditionStateContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionState(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionState(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionState(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionExceptionContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLEXCEPTION() { return GetToken(MariaDBParser.SQLEXCEPTION, 0); }
		public HandlerConditionExceptionContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionException(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionException(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionException(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HandlerConditionNameContext : HandlerConditionValueContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public HandlerConditionNameContext(HandlerConditionValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHandlerConditionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHandlerConditionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandlerConditionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerConditionValueContext handlerConditionValue() {
		HandlerConditionValueContext _localctx = new HandlerConditionValueContext(Context, State);
		EnterRule(_localctx, 430, RULE_handlerConditionValue);
		int _la;
		try {
			State = 5099;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				_localctx = new HandlerConditionCodeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5088;
				decimalLiteral();
				}
				break;
			case SQLSTATE:
				_localctx = new HandlerConditionStateContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5089;
				Match(SQLSTATE);
				State = 5091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 5090;
					Match(VALUE);
					}
				}

				State = 5093;
				Match(STRING_LITERAL);
				}
				break;
			case ATTRIBUTE:
			case BODY:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_ROLE:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case PACKAGE:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case STATEMENT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTED:
			case ENCRYPTION:
			case ENCRYPTION_KEY_ID:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOCALES:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUERY_RESPONSE_TIME:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLAVES:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case TYPES:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WSREP_MEMBERSHIP:
			case WSREP_STATUS:
			case X509:
			case XA:
			case XML:
			case YES:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case USER_STATISTICS:
			case CLIENT_STATISTICS:
			case INDEX_STATISTICS:
			case TABLE_STATISTICS:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICAS:
			case REPLICATION_MASTER_ADMIN:
			case MONITOR:
			case READ_ONLY:
			case REPLAY:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
				_localctx = new HandlerConditionNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5094;
				uid();
				}
				break;
			case SQLWARNING:
				_localctx = new HandlerConditionWarningContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5095;
				Match(SQLWARNING);
				}
				break;
			case NOT:
				_localctx = new HandlerConditionNotfoundContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5096;
				Match(NOT);
				State = 5097;
				Match(FOUND);
				}
				break;
			case SQLEXCEPTION:
				_localctx = new HandlerConditionExceptionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5098;
				Match(SQLEXCEPTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureSqlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI() { return GetToken(MariaDBParser.SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlStatementContext sqlStatement() {
			return GetRuleContext<SqlStatementContext>(0);
		}
		public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureSqlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterProcedureSqlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitProcedureSqlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProcedureSqlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureSqlStatementContext procedureSqlStatement() {
		ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(Context, State);
		EnterRule(_localctx, 432, RULE_procedureSqlStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5103;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,752,Context) ) {
			case 1:
				{
				State = 5101;
				compoundStatement();
				}
				break;
			case 2:
				{
				State = 5102;
				sqlStatement();
				}
				break;
			}
			State = 5105;
			Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(MariaDBParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MariaDBParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public CaseAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCaseAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCaseAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseAlternativeContext caseAlternative() {
		CaseAlternativeContext _localctx = new CaseAlternativeContext(Context, State);
		EnterRule(_localctx, 434, RULE_caseAlternative);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5107;
			Match(WHEN);
			State = 5110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,753,Context) ) {
			case 1:
				{
				State = 5108;
				constant();
				}
				break;
			case 2:
				{
				State = 5109;
				expression(0);
				}
				break;
			}
			State = 5112;
			Match(THEN);
			State = 5114;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 5113;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,754,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElifAlternativeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF() { return GetToken(MariaDBParser.ELSEIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MariaDBParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext[] procedureSqlStatement() {
			return GetRuleContexts<ProcedureSqlStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureSqlStatementContext procedureSqlStatement(int i) {
			return GetRuleContext<ProcedureSqlStatementContext>(i);
		}
		public ElifAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elifAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterElifAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitElifAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElifAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElifAlternativeContext elifAlternative() {
		ElifAlternativeContext _localctx = new ElifAlternativeContext(Context, State);
		EnterRule(_localctx, 436, RULE_elifAlternative);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5118;
			Match(ELSEIF);
			State = 5119;
			expression(0);
			State = 5120;
			Match(THEN);
			State = 5122;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 5121;
					procedureSqlStatement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5124;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,755,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserContext : ParserRuleContext {
		public AlterUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUser; } }
	 
		public AlterUserContext() { }
		public virtual void CopyFrom(AlterUserContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlterUserMysqlV80Context : AlterUserContext {
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MariaDBParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MariaDBParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext[] userPasswordOption() {
			return GetRuleContexts<UserPasswordOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption(int i) {
			return GetRuleContext<UserPasswordOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext[] userLockOption() {
			return GetRuleContexts<UserLockOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext userLockOption(int i) {
			return GetRuleContext<UserLockOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MariaDBParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(MariaDBParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MariaDBParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MariaDBParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MariaDBParser.AND, i);
		}
		public AlterUserMysqlV80Context(AlterUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterUserMysqlV80(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterUserMysqlV80(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserMysqlV80(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AlterUserMysqlV56Context : AlterUserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MariaDBParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserSpecificationContext[] userSpecification() {
			return GetRuleContexts<UserSpecificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserSpecificationContext userSpecification(int i) {
			return GetRuleContext<UserSpecificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public AlterUserMysqlV56Context(AlterUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAlterUserMysqlV56(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAlterUserMysqlV56(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterUserMysqlV56(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserContext alterUser() {
		AlterUserContext _localctx = new AlterUserContext(Context, State);
		EnterRule(_localctx, 438, RULE_alterUser);
		int _la;
		try {
			State = 5186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,768,Context) ) {
			case 1:
				_localctx = new AlterUserMysqlV56Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5126;
				Match(ALTER);
				State = 5127;
				Match(USER);
				State = 5128;
				userSpecification();
				State = 5133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5129;
					Match(COMMA);
					State = 5130;
					userSpecification();
					}
					}
					State = 5135;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new AlterUserMysqlV80Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5136;
				Match(ALTER);
				State = 5137;
				Match(USER);
				State = 5139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 5138;
					ifExists();
					}
				}

				State = 5141;
				userAuthOption();
				State = 5146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5142;
					Match(COMMA);
					State = 5143;
					userAuthOption();
					}
					}
					State = 5148;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 5149;
					Match(REQUIRE);
					State = 5161;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 5150;
						((AlterUserMysqlV80Context)_localctx).tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 5151;
						tlsOption();
						State = 5158;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 5153;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 5152;
								Match(AND);
								}
							}

							State = 5155;
							tlsOption();
							}
							}
							State = 5160;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 5171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5165;
					Match(WITH);
					State = 5167;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 5166;
						userResourceOption();
						}
						}
						State = 5169;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & 51L) != 0) );
					}
				}

				State = 5177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT || _la==FAILED_LOGIN_ATTEMPTS || _la==PASSWORD || _la==PASSWORD_LOCK_TIME) {
					{
					State = 5175;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FAILED_LOGIN_ATTEMPTS:
					case PASSWORD:
					case PASSWORD_LOCK_TIME:
						{
						State = 5173;
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						State = 5174;
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 5179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5184;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMENT:
					{
					State = 5180;
					Match(COMMENT);
					State = 5181;
					Match(STRING_LITERAL);
					}
					break;
				case ATTRIBUTE:
					{
					State = 5182;
					Match(ATTRIBUTE);
					State = 5183;
					Match(STRING_LITERAL);
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserContext : ParserRuleContext {
		public CreateUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUser; } }
	 
		public CreateUserContext() { }
		public virtual void CopyFrom(CreateUserContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CreateUserMysqlV56Context : CreateUserContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MariaDBParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public CreateUserMysqlV56Context(CreateUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateUserMysqlV56(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateUserMysqlV56(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserMysqlV56(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CreateUserMysqlV80Context : CreateUserContext {
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MariaDBParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MariaDBParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext[] userPasswordOption() {
			return GetRuleContexts<UserPasswordOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption(int i) {
			return GetRuleContext<UserPasswordOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext[] userLockOption() {
			return GetRuleContexts<UserLockOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserLockOptionContext userLockOption(int i) {
			return GetRuleContext<UserLockOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MariaDBParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(MariaDBParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MariaDBParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MariaDBParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MariaDBParser.AND, i);
		}
		public CreateUserMysqlV80Context(CreateUserContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateUserMysqlV80(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateUserMysqlV80(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUserMysqlV80(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserContext createUser() {
		CreateUserContext _localctx = new CreateUserContext(Context, State);
		EnterRule(_localctx, 440, RULE_createUser);
		int _la;
		try {
			State = 5248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,781,Context) ) {
			case 1:
				_localctx = new CreateUserMysqlV56Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5188;
				Match(CREATE);
				State = 5189;
				Match(USER);
				State = 5190;
				userAuthOption();
				State = 5195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5191;
					Match(COMMA);
					State = 5192;
					userAuthOption();
					}
					}
					State = 5197;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new CreateUserMysqlV80Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5198;
				Match(CREATE);
				State = 5199;
				Match(USER);
				State = 5201;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF) {
					{
					State = 5200;
					ifNotExists();
					}
				}

				State = 5203;
				userAuthOption();
				State = 5208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5204;
					Match(COMMA);
					State = 5205;
					userAuthOption();
					}
					}
					State = 5210;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 5211;
					Match(REQUIRE);
					State = 5223;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 5212;
						((CreateUserMysqlV80Context)_localctx).tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 5213;
						tlsOption();
						State = 5220;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 5215;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 5214;
								Match(AND);
								}
							}

							State = 5217;
							tlsOption();
							}
							}
							State = 5222;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 5233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5227;
					Match(WITH);
					State = 5229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 5228;
						userResourceOption();
						}
						}
						State = 5231;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( ((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & 51L) != 0) );
					}
				}

				State = 5239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ACCOUNT || _la==FAILED_LOGIN_ATTEMPTS || _la==PASSWORD || _la==PASSWORD_LOCK_TIME) {
					{
					State = 5237;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case FAILED_LOGIN_ATTEMPTS:
					case PASSWORD:
					case PASSWORD_LOCK_TIME:
						{
						State = 5235;
						userPasswordOption();
						}
						break;
					case ACCOUNT:
						{
						State = 5236;
						userLockOption();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 5241;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5246;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COMMENT:
					{
					State = 5242;
					Match(COMMENT);
					State = 5243;
					Match(STRING_LITERAL);
					}
					break;
				case ATTRIBUTE:
					{
					State = 5244;
					Match(ATTRIBUTE);
					State = 5245;
					Match(STRING_LITERAL);
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MariaDBParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDropUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDropUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropUserContext dropUser() {
		DropUserContext _localctx = new DropUserContext(Context, State);
		EnterRule(_localctx, 442, RULE_dropUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5250;
			Match(DROP);
			State = 5251;
			Match(USER);
			State = 5253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IF) {
				{
				State = 5252;
				ifExists();
				}
			}

			State = 5255;
			userName();
			State = 5260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5256;
				Match(COMMA);
				State = 5257;
				userName();
				}
				}
				State = 5262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantStatementContext : ParserRuleContext {
		public IToken privilegeObject;
		public IToken tlsNone;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(MariaDBParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(MariaDBParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext[] privelegeClause() {
			return GetRuleContexts<PrivelegeClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext privelegeClause(int i) {
			return GetRuleContext<PrivelegeClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeLevelContext privilegeLevel() {
			return GetRuleContext<PrivilegeLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MariaDBParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext[] userAuthOption() {
			return GetRuleContexts<UserAuthOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAuthOptionContext userAuthOption(int i) {
			return GetRuleContext<UserAuthOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MariaDBParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WITH() { return GetTokens(MariaDBParser.WITH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH(int i) {
			return GetToken(MariaDBParser.WITH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MariaDBParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleOptionContext roleOption() {
			return GetRuleContext<RoleOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MariaDBParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MariaDBParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext[] tlsOption() {
			return GetRuleContexts<TlsOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TlsOptionContext tlsOption(int i) {
			return GetRuleContext<TlsOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MariaDBParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPTION() { return GetTokens(MariaDBParser.OPTION); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION(int i) {
			return GetToken(MariaDBParser.OPTION, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext[] userResourceOption() {
			return GetRuleContexts<UserResourceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserResourceOptionContext userResourceOption(int i) {
			return GetRuleContext<UserResourceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND() { return GetTokens(MariaDBParser.AND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND(int i) {
			return GetToken(MariaDBParser.AND, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MariaDBParser.ADMIN, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterGrantStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitGrantStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantStatementContext grantStatement() {
		GrantStatementContext _localctx = new GrantStatementContext(Context, State);
		EnterRule(_localctx, 444, RULE_grantStatement);
		int _la;
		try {
			int _alt;
			State = 5356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,802,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5263;
				Match(GRANT);
				State = 5264;
				privelegeClause();
				State = 5269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5265;
					Match(COMMA);
					State = 5266;
					privelegeClause();
					}
					}
					State = 5271;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5272;
				Match(ON);
				State = 5274;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,785,Context) ) {
				case 1:
					{
					State = 5273;
					_localctx.privilegeObject = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						_localctx.privilegeObject = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5276;
				privilegeLevel();
				State = 5277;
				Match(TO);
				State = 5278;
				userAuthOption();
				State = 5283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5279;
					Match(COMMA);
					State = 5280;
					userAuthOption();
					}
					}
					State = 5285;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE) {
					{
					State = 5286;
					Match(REQUIRE);
					State = 5298;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NONE:
						{
						State = 5287;
						_localctx.tlsNone = Match(NONE);
						}
						break;
					case SSL:
					case CIPHER:
					case ISSUER:
					case SUBJECT:
					case X509:
						{
						State = 5288;
						tlsOption();
						State = 5295;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==AND || _la==SSL || _la==CIPHER || _la==ISSUER || _la==SUBJECT || _la==X509) {
							{
							{
							State = 5290;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==AND) {
								{
								State = 5289;
								Match(AND);
								}
							}

							State = 5292;
							tlsOption();
							}
							}
							State = 5297;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				State = 5311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5302;
					Match(WITH);
					State = 5308;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,792,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							State = 5306;
							ErrorHandler.Sync(this);
							switch (TokenStream.LA(1)) {
							case GRANT:
								{
								State = 5303;
								Match(GRANT);
								State = 5304;
								Match(OPTION);
								}
								break;
							case MAX_CONNECTIONS_PER_HOUR:
							case MAX_QUERIES_PER_HOUR:
							case MAX_UPDATES_PER_HOUR:
							case MAX_USER_CONNECTIONS:
								{
								State = 5305;
								userResourceOption();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							} 
						}
						State = 5310;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,792,Context);
					}
					}
				}

				State = 5319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 5313;
					Match(AS);
					State = 5314;
					userName();
					State = 5315;
					Match(WITH);
					State = 5316;
					Match(ROLE);
					State = 5317;
					roleOption();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5321;
				Match(GRANT);
				State = 5324;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,795,Context) ) {
				case 1:
					{
					State = 5322;
					userName();
					}
					break;
				case 2:
					{
					State = 5323;
					uid();
					}
					break;
				}
				State = 5333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5326;
					Match(COMMA);
					State = 5329;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,796,Context) ) {
					case 1:
						{
						State = 5327;
						userName();
						}
						break;
					case 2:
						{
						State = 5328;
						uid();
						}
						break;
					}
					}
					}
					State = 5335;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5336;
				Match(TO);
				State = 5339;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,798,Context) ) {
				case 1:
					{
					State = 5337;
					userName();
					}
					break;
				case 2:
					{
					State = 5338;
					uid();
					}
					break;
				}
				State = 5348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5341;
					Match(COMMA);
					State = 5344;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,799,Context) ) {
					case 1:
						{
						State = 5342;
						userName();
						}
						break;
					case 2:
						{
						State = 5343;
						uid();
						}
						break;
					}
					}
					}
					State = 5350;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5351;
					Match(WITH);
					State = 5352;
					Match(ADMIN);
					State = 5353;
					Match(OPTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MariaDBParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(MariaDBParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public RoleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRoleOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRoleOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleOptionContext roleOption() {
		RoleOptionContext _localctx = new RoleOptionContext(Context, State);
		EnterRule(_localctx, 446, RULE_roleOption);
		int _la;
		try {
			State = 5380;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,806,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5358;
				Match(DEFAULT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5359;
				Match(NONE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5360;
				Match(ALL);
				State = 5370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT) {
					{
					State = 5361;
					Match(EXCEPT);
					State = 5362;
					userName();
					State = 5367;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 5363;
						Match(COMMA);
						State = 5364;
						userName();
						}
						}
						State = 5369;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5372;
				userName();
				State = 5377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5373;
					Match(COMMA);
					State = 5374;
					userName();
					}
					}
					State = 5379;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantProxyContext : ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		public UserNameContext _userName;
		public IList<UserNameContext> _toOther = new List<UserNameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT() { return GetTokens(MariaDBParser.GRANT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT(int i) {
			return GetToken(MariaDBParser.GRANT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MariaDBParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MariaDBParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MariaDBParser.OPTION, 0); }
		public GrantProxyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantProxy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterGrantProxy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitGrantProxy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantProxy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantProxyContext grantProxy() {
		GrantProxyContext _localctx = new GrantProxyContext(Context, State);
		EnterRule(_localctx, 448, RULE_grantProxy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5382;
			Match(GRANT);
			State = 5383;
			Match(PROXY);
			State = 5384;
			Match(ON);
			State = 5385;
			_localctx.fromFirst = userName();
			State = 5386;
			Match(TO);
			State = 5387;
			_localctx.toFirst = userName();
			State = 5392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5388;
				Match(COMMA);
				State = 5389;
				_localctx._userName = userName();
				_localctx._toOther.Add(_localctx._userName);
				}
				}
				State = 5394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 5398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 5395;
				Match(WITH);
				State = 5396;
				Match(GRANT);
				State = 5397;
				Match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME() { return GetToken(MariaDBParser.RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MariaDBParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserClauseContext[] renameUserClause() {
			return GetRuleContexts<RenameUserClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserClauseContext renameUserClause(int i) {
			return GetRuleContext<RenameUserClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRenameUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRenameUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameUser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserContext renameUser() {
		RenameUserContext _localctx = new RenameUserContext(Context, State);
		EnterRule(_localctx, 450, RULE_renameUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5400;
			Match(RENAME);
			State = 5401;
			Match(USER);
			State = 5402;
			renameUserClause();
			State = 5407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5403;
				Match(COMMA);
				State = 5404;
				renameUserClause();
				}
				}
				State = 5409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeStatementContext : ParserRuleContext {
		public RevokeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeStatement; } }
	 
		public RevokeStatementContext() { }
		public virtual void CopyFrom(RevokeStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DetailRevokeContext : RevokeStatementContext {
		public IToken privilegeObject;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MariaDBParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext[] privelegeClause() {
			return GetRuleContexts<PrivelegeClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivelegeClauseContext privelegeClause(int i) {
			return GetRuleContext<PrivelegeClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeLevelContext privilegeLevel() {
			return GetRuleContext<PrivilegeLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MariaDBParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MariaDBParser.PROCEDURE, 0); }
		public DetailRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDetailRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDetailRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDetailRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RoleRevokeContext : RevokeStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MariaDBParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public RoleRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRoleRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRoleRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShortRevokeContext : RevokeStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MariaDBParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(MariaDBParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MariaDBParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MariaDBParser.PRIVILEGES, 0); }
		public ShortRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShortRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShortRevoke(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortRevoke(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokeStatementContext revokeStatement() {
		RevokeStatementContext _localctx = new RevokeStatementContext(Context, State);
		EnterRule(_localctx, 452, RULE_revokeStatement);
		int _la;
		try {
			State = 5474;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,819,Context) ) {
			case 1:
				_localctx = new DetailRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5410;
				Match(REVOKE);
				State = 5411;
				privelegeClause();
				State = 5416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5412;
					Match(COMMA);
					State = 5413;
					privelegeClause();
					}
					}
					State = 5418;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5419;
				Match(ON);
				State = 5421;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,811,Context) ) {
				case 1:
					{
					State = 5420;
					((DetailRevokeContext)_localctx).privilegeObject = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PROCEDURE || _la==TABLE || _la==FUNCTION) ) {
						((DetailRevokeContext)_localctx).privilegeObject = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5423;
				privilegeLevel();
				State = 5424;
				Match(FROM);
				State = 5425;
				userName();
				State = 5430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5426;
					Match(COMMA);
					State = 5427;
					userName();
					}
					}
					State = 5432;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new ShortRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5433;
				Match(REVOKE);
				State = 5434;
				Match(ALL);
				State = 5436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 5435;
					Match(PRIVILEGES);
					}
				}

				State = 5438;
				Match(COMMA);
				State = 5439;
				Match(GRANT);
				State = 5440;
				Match(OPTION);
				State = 5441;
				Match(FROM);
				State = 5442;
				userName();
				State = 5447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5443;
					Match(COMMA);
					State = 5444;
					userName();
					}
					}
					State = 5449;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new RoleRevokeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5450;
				Match(REVOKE);
				State = 5451;
				uid();
				State = 5456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5452;
					Match(COMMA);
					State = 5453;
					uid();
					}
					}
					State = 5458;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5459;
				Match(FROM);
				State = 5462;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,816,Context) ) {
				case 1:
					{
					State = 5460;
					userName();
					}
					break;
				case 2:
					{
					State = 5461;
					uid();
					}
					break;
				}
				State = 5471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5464;
					Match(COMMA);
					State = 5467;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,817,Context) ) {
					case 1:
						{
						State = 5465;
						userName();
						}
						break;
					case 2:
						{
						State = 5466;
						uid();
						}
						break;
					}
					}
					}
					State = 5473;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeProxyContext : ParserRuleContext {
		public UserNameContext onUser;
		public UserNameContext fromFirst;
		public UserNameContext _userName;
		public IList<UserNameContext> _fromOther = new List<UserNameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE() { return GetToken(MariaDBParser.REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MariaDBParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public RevokeProxyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeProxy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRevokeProxy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRevokeProxy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevokeProxy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokeProxyContext revokeProxy() {
		RevokeProxyContext _localctx = new RevokeProxyContext(Context, State);
		EnterRule(_localctx, 454, RULE_revokeProxy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5476;
			Match(REVOKE);
			State = 5477;
			Match(PROXY);
			State = 5478;
			Match(ON);
			State = 5479;
			_localctx.onUser = userName();
			State = 5480;
			Match(FROM);
			State = 5481;
			_localctx.fromFirst = userName();
			State = 5486;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 5482;
				Match(COMMA);
				State = 5483;
				_localctx._userName = userName();
				_localctx._fromOther.Add(_localctx._userName);
				}
				}
				State = 5488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetPasswordStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MariaDBParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public SetPasswordStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setPasswordStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSetPasswordStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSetPasswordStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPasswordStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetPasswordStatementContext setPasswordStatement() {
		SetPasswordStatementContext _localctx = new SetPasswordStatementContext(Context, State);
		EnterRule(_localctx, 456, RULE_setPasswordStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5489;
			Match(SET);
			State = 5490;
			Match(PASSWORD);
			State = 5493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR) {
				{
				State = 5491;
				Match(FOR);
				State = 5492;
				userName();
				}
			}

			State = 5495;
			Match(EQUAL_SYMBOL);
			State = 5498;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OLD_PASSWORD:
			case PASSWORD:
				{
				State = 5496;
				passwordFunctionClause();
				}
				break;
			case STRING_LITERAL:
				{
				State = 5497;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserPasswordOptionContext userPasswordOption() {
			return GetRuleContext<UserPasswordOptionContext>(0);
		}
		public UserSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUserSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUserSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserSpecificationContext userSpecification() {
		UserSpecificationContext _localctx = new UserSpecificationContext(Context, State);
		EnterRule(_localctx, 458, RULE_userSpecification);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5500;
			userName();
			State = 5501;
			userPasswordOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserAuthOptionContext : ParserRuleContext {
		public UserAuthOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userAuthOption; } }
	 
		public UserAuthOptionContext() { }
		public virtual void CopyFrom(UserAuthOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public SimpleAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSimpleAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSimpleAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuleAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MariaDBParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AuthenticationRuleContext[] authenticationRule() {
			return GetRuleContexts<AuthenticationRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AuthenticationRuleContext authenticationRule(int i) {
			return GetRuleContext<AuthenticationRuleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIA() { return GetToken(MariaDBParser.VIA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(MariaDBParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(MariaDBParser.OR, i);
		}
		public ModuleAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterModuleAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitModuleAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAuthOptionContext : UserAuthOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MariaDBParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MariaDBParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN() { return GetToken(MariaDBParser.RETAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MariaDBParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MariaDBParser.PASSWORD, 0); }
		public StringAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterStringAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitStringAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HashAuthOptionContext : UserAuthOptionContext {
		public IToken hashed;
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MariaDBParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MariaDBParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MariaDBParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public HashAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHashAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHashAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHashAuthOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserAuthOptionContext userAuthOption() {
		UserAuthOptionContext _localctx = new UserAuthOptionContext(Context, State);
		EnterRule(_localctx, 460, RULE_userAuthOption);
		int _la;
		try {
			State = 5530;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,825,Context) ) {
			case 1:
				_localctx = new HashAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5503;
				userName();
				State = 5504;
				Match(IDENTIFIED);
				State = 5505;
				Match(BY);
				State = 5506;
				Match(PASSWORD);
				State = 5507;
				((HashAuthOptionContext)_localctx).hashed = Match(STRING_LITERAL);
				}
				break;
			case 2:
				_localctx = new StringAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5509;
				userName();
				State = 5510;
				Match(IDENTIFIED);
				State = 5511;
				Match(BY);
				State = 5512;
				Match(STRING_LITERAL);
				State = 5516;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETAIN) {
					{
					State = 5513;
					Match(RETAIN);
					State = 5514;
					Match(CURRENT);
					State = 5515;
					Match(PASSWORD);
					}
				}

				}
				break;
			case 3:
				_localctx = new ModuleAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5518;
				userName();
				State = 5519;
				Match(IDENTIFIED);
				State = 5520;
				_la = TokenStream.LA(1);
				if ( !(_la==WITH || _la==VIA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5521;
				authenticationRule();
				State = 5526;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OR) {
					{
					{
					State = 5522;
					Match(OR);
					State = 5523;
					authenticationRule();
					}
					}
					State = 5528;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				_localctx = new SimpleAuthOptionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5529;
				userName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuthenticationRuleContext : ParserRuleContext {
		public AuthenticationRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authenticationRule; } }
	 
		public AuthenticationRuleContext() { }
		public virtual void CopyFrom(AuthenticationRuleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PasswordModuleOptionContext : AuthenticationRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AuthPluginContext authPlugin() {
			return GetRuleContext<AuthPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MariaDBParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		public PasswordModuleOptionContext(AuthenticationRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPasswordModuleOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPasswordModuleOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordModuleOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuleContext : AuthenticationRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AuthPluginContext authPlugin() {
			return GetRuleContext<AuthPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MariaDBParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MariaDBParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		public ModuleContext(AuthenticationRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuthenticationRuleContext authenticationRule() {
		AuthenticationRuleContext _localctx = new AuthenticationRuleContext(Context, State);
		EnterRule(_localctx, 462, RULE_authenticationRule);
		int _la;
		try {
			State = 5541;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,827,Context) ) {
			case 1:
				_localctx = new ModuleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5532;
				authPlugin();
				State = 5535;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,826,Context) ) {
				case 1:
					{
					State = 5533;
					_la = TokenStream.LA(1);
					if ( !(_la==AS || _la==BY || _la==USING) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5534;
					Match(STRING_LITERAL);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new PasswordModuleOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5537;
				authPlugin();
				State = 5538;
				_la = TokenStream.LA(1);
				if ( !(_la==AS || _la==USING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5539;
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TlsOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSL() { return GetToken(MariaDBParser.SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509() { return GetToken(MariaDBParser.X509, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER() { return GetToken(MariaDBParser.CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER() { return GetToken(MariaDBParser.ISSUER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(MariaDBParser.SUBJECT, 0); }
		public TlsOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tlsOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTlsOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTlsOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTlsOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TlsOptionContext tlsOption() {
		TlsOptionContext _localctx = new TlsOptionContext(Context, State);
		EnterRule(_localctx, 464, RULE_tlsOption);
		try {
			State = 5551;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SSL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5543;
				Match(SSL);
				}
				break;
			case X509:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5544;
				Match(X509);
				}
				break;
			case CIPHER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5545;
				Match(CIPHER);
				State = 5546;
				Match(STRING_LITERAL);
				}
				break;
			case ISSUER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5547;
				Match(ISSUER);
				State = 5548;
				Match(STRING_LITERAL);
				}
				break;
			case SUBJECT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5549;
				Match(SUBJECT);
				State = 5550;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserResourceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MariaDBParser.MAX_QUERIES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MariaDBParser.MAX_UPDATES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MariaDBParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MariaDBParser.MAX_USER_CONNECTIONS, 0); }
		public UserResourceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userResourceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUserResourceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUserResourceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserResourceOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserResourceOptionContext userResourceOption() {
		UserResourceOptionContext _localctx = new UserResourceOptionContext(Context, State);
		EnterRule(_localctx, 466, RULE_userResourceOption);
		try {
			State = 5561;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MAX_QUERIES_PER_HOUR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5553;
				Match(MAX_QUERIES_PER_HOUR);
				State = 5554;
				decimalLiteral();
				}
				break;
			case MAX_UPDATES_PER_HOUR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5555;
				Match(MAX_UPDATES_PER_HOUR);
				State = 5556;
				decimalLiteral();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5557;
				Match(MAX_CONNECTIONS_PER_HOUR);
				State = 5558;
				decimalLiteral();
				}
				break;
			case MAX_USER_CONNECTIONS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5559;
				Match(MAX_USER_CONNECTIONS);
				State = 5560;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserPasswordOptionContext : ParserRuleContext {
		public IToken expireType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MariaDBParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE() { return GetToken(MariaDBParser.EXPIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MariaDBParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER() { return GetToken(MariaDBParser.NEVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MariaDBParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY() { return GetToken(MariaDBParser.HISTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REUSE() { return GetToken(MariaDBParser.REUSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE() { return GetToken(MariaDBParser.REQUIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MariaDBParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(MariaDBParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILED_LOGIN_ATTEMPTS() { return GetToken(MariaDBParser.FAILED_LOGIN_ATTEMPTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_LOCK_TIME() { return GetToken(MariaDBParser.PASSWORD_LOCK_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(MariaDBParser.UNBOUNDED, 0); }
		public UserPasswordOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userPasswordOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUserPasswordOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUserPasswordOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserPasswordOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserPasswordOptionContext userPasswordOption() {
		UserPasswordOptionContext _localctx = new UserPasswordOptionContext(Context, State);
		EnterRule(_localctx, 468, RULE_userPasswordOption);
		int _la;
		try {
			State = 5601;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,835,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5563;
				Match(PASSWORD);
				State = 5564;
				Match(EXPIRE);
				State = 5571;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 5565;
					_localctx.expireType = Match(DEFAULT);
					}
					break;
				case NEVER:
					{
					State = 5566;
					_localctx.expireType = Match(NEVER);
					}
					break;
				case INTERVAL:
					{
					State = 5567;
					_localctx.expireType = Match(INTERVAL);
					State = 5568;
					decimalLiteral();
					State = 5569;
					Match(DAY);
					}
					break;
				case Eof:
				case ALTER:
				case ANALYZE:
				case ATTRIBUTE:
				case CALL:
				case CHANGE:
				case CHECK:
				case CREATE:
				case DELETE:
				case DESC:
				case DESCRIBE:
				case DROP:
				case EXPLAIN:
				case GET:
				case GRANT:
				case INSERT:
				case KILL:
				case LOAD:
				case LOCK:
				case OPTIMIZE:
				case PURGE:
				case RELEASE:
				case RENAME:
				case REPLACE:
				case RESIGNAL:
				case REVOKE:
				case SELECT:
				case SET:
				case SHOW:
				case SIGNAL:
				case UNLOCK:
				case UPDATE:
				case USE:
				case VALUES:
				case ACCOUNT:
				case BEGIN:
				case BINLOG:
				case CACHE:
				case CHECKSUM:
				case COMMENT:
				case COMMIT:
				case DEALLOCATE:
				case DO:
				case FAILED_LOGIN_ATTEMPTS:
				case FLUSH:
				case HANDLER:
				case HELP:
				case INSTALL:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PREPARE:
				case REPAIR:
				case RESET:
				case ROLLBACK:
				case SAVEPOINT:
				case START:
				case STOP:
				case TRUNCATE:
				case UNINSTALL:
				case XA:
				case EXECUTE:
				case SHUTDOWN:
				case MINUS:
				case LR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5573;
				Match(PASSWORD);
				State = 5574;
				Match(HISTORY);
				State = 5577;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 5575;
					Match(DEFAULT);
					}
					break;
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					State = 5576;
					decimalLiteral();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5579;
				Match(PASSWORD);
				State = 5580;
				Match(REUSE);
				State = 5581;
				Match(INTERVAL);
				State = 5586;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT:
					{
					State = 5582;
					Match(DEFAULT);
					}
					break;
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					State = 5583;
					decimalLiteral();
					State = 5584;
					Match(DAY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5588;
				Match(PASSWORD);
				State = 5589;
				Match(REQUIRE);
				State = 5590;
				Match(CURRENT);
				State = 5592;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT || _la==OPTIONAL) {
					{
					State = 5591;
					_la = TokenStream.LA(1);
					if ( !(_la==DEFAULT || _la==OPTIONAL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5594;
				Match(FAILED_LOGIN_ATTEMPTS);
				State = 5595;
				decimalLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5596;
				Match(PASSWORD_LOCK_TIME);
				State = 5599;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					State = 5597;
					decimalLiteral();
					}
					break;
				case UNBOUNDED:
					{
					State = 5598;
					Match(UNBOUNDED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserLockOptionContext : ParserRuleContext {
		public IToken lockType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT() { return GetToken(MariaDBParser.ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MariaDBParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK() { return GetToken(MariaDBParser.UNLOCK, 0); }
		public UserLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userLockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUserLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUserLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserLockOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserLockOptionContext userLockOption() {
		UserLockOptionContext _localctx = new UserLockOptionContext(Context, State);
		EnterRule(_localctx, 470, RULE_userLockOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5603;
			Match(ACCOUNT);
			State = 5604;
			_localctx.lockType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LOCK || _la==UNLOCK) ) {
				_localctx.lockType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivelegeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege() {
			return GetRuleContext<PrivilegeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public PrivelegeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privelegeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPrivelegeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPrivelegeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivelegeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivelegeClauseContext privelegeClause() {
		PrivelegeClauseContext _localctx = new PrivelegeClauseContext(Context, State);
		EnterRule(_localctx, 472, RULE_privelegeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5606;
			privilege();
			State = 5611;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_BRACKET) {
				{
				State = 5607;
				Match(LR_BRACKET);
				State = 5608;
				uidList();
				State = 5609;
				Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MariaDBParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER() { return GetToken(MariaDBParser.ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(MariaDBParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MariaDBParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MariaDBParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MariaDBParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MariaDBParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MariaDBParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MariaDBParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE() { return GetToken(MariaDBParser.DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY() { return GetToken(MariaDBParser.HISTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MariaDBParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MariaDBParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(MariaDBParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT() { return GetToken(MariaDBParser.GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(MariaDBParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MariaDBParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MariaDBParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(MariaDBParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MariaDBParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES() { return GetToken(MariaDBParser.REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD() { return GetToken(MariaDBParser.RELOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MariaDBParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(MariaDBParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MariaDBParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(MariaDBParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MariaDBParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MariaDBParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(MariaDBParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES() { return GetToken(MariaDBParser.DATABASES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(MariaDBParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MariaDBParser.SHUTDOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(MariaDBParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MariaDBParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MariaDBParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAGE() { return GetToken(MariaDBParser.USAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode APPLICATION_PASSWORD_ADMIN() { return GetToken(MariaDBParser.APPLICATION_PASSWORD_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT_ADMIN() { return GetToken(MariaDBParser.AUDIT_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_ADMIN() { return GetToken(MariaDBParser.BACKUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ADMIN() { return GetToken(MariaDBParser.BINLOG_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ENCRYPTION_ADMIN() { return GetToken(MariaDBParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_ADMIN() { return GetToken(MariaDBParser.CLONE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ADMIN() { return GetToken(MariaDBParser.CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_KEY_ADMIN() { return GetToken(MariaDBParser.ENCRYPTION_KEY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_ADMIN() { return GetToken(MariaDBParser.FIREWALL_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_USER() { return GetToken(MariaDBParser.FIREWALL_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_OPTIMIZER_COSTS() { return GetToken(MariaDBParser.FLUSH_OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_STATUS() { return GetToken(MariaDBParser.FLUSH_STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_TABLES() { return GetToken(MariaDBParser.FLUSH_TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_USER_RESOURCES() { return GetToken(MariaDBParser.FLUSH_USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_ADMIN() { return GetToken(MariaDBParser.GROUP_REPLICATION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ARCHIVE() { return GetToken(MariaDBParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ENABLE() { return GetToken(MariaDBParser.INNODB_REDO_LOG_ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB_STORED_USER() { return GetToken(MariaDBParser.NDB_STORED_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORDLESS_USER_ADMIN() { return GetToken(MariaDBParser.PASSWORDLESS_USER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_RO_VARIABLES_ADMIN() { return GetToken(MariaDBParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_APPLIER() { return GetToken(MariaDBParser.REPLICATION_APPLIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SLAVE_ADMIN() { return GetToken(MariaDBParser.REPLICATION_SLAVE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_ADMIN() { return GetToken(MariaDBParser.RESOURCE_GROUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_USER() { return GetToken(MariaDBParser.RESOURCE_GROUP_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_ADMIN() { return GetToken(MariaDBParser.ROLE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE_CONNECTION_ADMIN() { return GetToken(MariaDBParser.SERVICE_CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MariaDBParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_USER_ID() { return GetToken(MariaDBParser.SET_USER_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_ROUTINE() { return GetToken(MariaDBParser.SHOW_ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(MariaDBParser.SYSTEM_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_VARIABLES_ADMIN() { return GetToken(MariaDBParser.SYSTEM_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_ENCRYPTION_ADMIN() { return GetToken(MariaDBParser.TABLE_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_TOKEN_ADMIN() { return GetToken(MariaDBParser.VERSION_TOKEN_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_RECOVER_ADMIN() { return GetToken(MariaDBParser.XA_RECOVER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_MONITOR() { return GetToken(MariaDBParser.BINLOG_MONITOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_REPLAY() { return GetToken(MariaDBParser.BINLOG_REPLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEDERATED_ADMIN() { return GetToken(MariaDBParser.FEDERATED_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY_ADMIN() { return GetToken(MariaDBParser.READ_ONLY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_MASTER_ADMIN() { return GetToken(MariaDBParser.REPLICATION_MASTER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MariaDBParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONITOR() { return GetToken(MariaDBParser.MONITOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLAY() { return GetToken(MariaDBParser.REPLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEDERATED() { return GetToken(MariaDBParser.FEDERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MariaDBParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MariaDBParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY() { return GetToken(MariaDBParser.READ_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MariaDBParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MariaDBParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S3() { return GetToken(MariaDBParser.S3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MariaDBParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKE() { return GetToken(MariaDBParser.INVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(MariaDBParser.LAMBDA, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPrivilege(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPrivilege(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilege(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeContext privilege() {
		PrivilegeContext _localctx = new PrivilegeContext(Context, State);
		EnterRule(_localctx, 474, RULE_privilege);
		int _la;
		try {
			State = 5736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,844,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5613;
				Match(ALL);
				State = 5615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES) {
					{
					State = 5614;
					Match(PRIVILEGES);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5617;
				Match(ALTER);
				State = 5619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROUTINE) {
					{
					State = 5618;
					Match(ROUTINE);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5621;
				Match(CREATE);
				State = 5629;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEMPORARY:
					{
					State = 5622;
					Match(TEMPORARY);
					State = 5623;
					Match(TABLES);
					}
					break;
				case ROUTINE:
					{
					State = 5624;
					Match(ROUTINE);
					}
					break;
				case VIEW:
					{
					State = 5625;
					Match(VIEW);
					}
					break;
				case USER:
					{
					State = 5626;
					Match(USER);
					}
					break;
				case TABLESPACE:
					{
					State = 5627;
					Match(TABLESPACE);
					}
					break;
				case ROLE:
					{
					State = 5628;
					Match(ROLE);
					}
					break;
				case ON:
				case LR_BRACKET:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5631;
				Match(DELETE);
				State = 5633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HISTORY) {
					{
					State = 5632;
					Match(HISTORY);
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5635;
				Match(DROP);
				State = 5637;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROLE) {
					{
					State = 5636;
					Match(ROLE);
					}
				}

				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5639;
				Match(EVENT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5640;
				Match(EXECUTE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5641;
				Match(FILE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5642;
				Match(GRANT);
				State = 5643;
				Match(OPTION);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5644;
				Match(INDEX);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5645;
				Match(INSERT);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 5646;
				Match(LOCK);
				State = 5647;
				Match(TABLES);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 5648;
				Match(PROCESS);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 5649;
				Match(PROXY);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 5650;
				Match(REFERENCES);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 5651;
				Match(RELOAD);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 5652;
				Match(REPLICATION);
				State = 5653;
				_la = TokenStream.LA(1);
				if ( !(_la==CLIENT || _la==MASTER || _la==SLAVE || _la==REPLICA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADMIN) {
					{
					State = 5654;
					Match(ADMIN);
					}
				}

				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 5657;
				Match(SELECT);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 5658;
				Match(SHOW);
				State = 5659;
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASES || _la==SCHEMAS || _la==VIEW) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 5660;
				Match(SHUTDOWN);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 5661;
				Match(SUPER);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 5662;
				Match(TRIGGER);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 5663;
				Match(UPDATE);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 5664;
				Match(USAGE);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 5665;
				Match(APPLICATION_PASSWORD_ADMIN);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 5666;
				Match(AUDIT_ADMIN);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 5667;
				Match(BACKUP_ADMIN);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 5668;
				Match(BINLOG_ADMIN);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 5669;
				Match(BINLOG_ENCRYPTION_ADMIN);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 5670;
				Match(CLONE_ADMIN);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 5671;
				Match(CONNECTION_ADMIN);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 5672;
				Match(ENCRYPTION_KEY_ADMIN);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 5673;
				Match(FIREWALL_ADMIN);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 5674;
				Match(FIREWALL_USER);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 5675;
				Match(FLUSH_OPTIMIZER_COSTS);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 5676;
				Match(FLUSH_STATUS);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 5677;
				Match(FLUSH_TABLES);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 5678;
				Match(FLUSH_USER_RESOURCES);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 5679;
				Match(GROUP_REPLICATION_ADMIN);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 5680;
				Match(INNODB_REDO_LOG_ARCHIVE);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 5681;
				Match(INNODB_REDO_LOG_ENABLE);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 5682;
				Match(NDB_STORED_USER);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 5683;
				Match(PASSWORDLESS_USER_ADMIN);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 5684;
				Match(PERSIST_RO_VARIABLES_ADMIN);
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 5685;
				Match(REPLICATION_APPLIER);
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 5686;
				Match(REPLICATION_SLAVE_ADMIN);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 5687;
				Match(RESOURCE_GROUP_ADMIN);
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 5688;
				Match(RESOURCE_GROUP_USER);
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 5689;
				Match(ROLE_ADMIN);
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 5690;
				Match(SERVICE_CONNECTION_ADMIN);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 5691;
				Match(SESSION_VARIABLES_ADMIN);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 5692;
				Match(SET_USER_ID);
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 5693;
				Match(SHOW_ROUTINE);
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 5694;
				Match(SYSTEM_USER);
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 5695;
				Match(SYSTEM_VARIABLES_ADMIN);
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 5696;
				Match(TABLE_ENCRYPTION_ADMIN);
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 5697;
				Match(VERSION_TOKEN_ADMIN);
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 5698;
				Match(XA_RECOVER_ADMIN);
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 5699;
				Match(BINLOG_MONITOR);
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 5700;
				Match(BINLOG_REPLAY);
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 5701;
				Match(FEDERATED_ADMIN);
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 5702;
				Match(READ_ONLY_ADMIN);
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 5703;
				Match(REPLICATION_MASTER_ADMIN);
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 5704;
				Match(BINLOG);
				State = 5705;
				_la = TokenStream.LA(1);
				if ( !(_la==ADMIN || _la==MONITOR || _la==REPLAY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 5706;
				Match(FEDERATED);
				State = 5707;
				Match(ADMIN);
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 5711;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case READ:
					{
					State = 5708;
					Match(READ);
					State = 5709;
					Match(ONLY);
					}
					break;
				case READ_ONLY:
					{
					State = 5710;
					Match(READ_ONLY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5713;
				Match(ADMIN);
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 5714;
				Match(ADMIN);
				State = 5715;
				Match(OPTION);
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 5716;
				Match(CONNECTION);
				State = 5717;
				Match(ADMIN);
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 5718;
				Match(DELETE);
				State = 5719;
				Match(HISTORY);
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 5720;
				Match(REPLICA);
				State = 5721;
				Match(MONITOR);
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 5722;
				Match(GRANT);
				State = 5723;
				Match(OPTION);
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 5724;
				Match(SET);
				State = 5725;
				Match(USER);
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 5726;
				Match(SLAVE);
				State = 5727;
				Match(MONITOR);
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 5728;
				Match(LOAD);
				State = 5729;
				Match(FROM);
				State = 5730;
				Match(S3);
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 5731;
				Match(SELECT);
				State = 5732;
				Match(INTO);
				State = 5733;
				Match(S3);
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 5734;
				Match(INVOKE);
				State = 5735;
				Match(LAMBDA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeLevelContext : ParserRuleContext {
		public PrivilegeLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeLevel; } }
	 
		public PrivilegeLevelContext() { }
		public virtual void CopyFrom(PrivilegeLevelContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DefiniteSchemaPrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MariaDBParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MariaDBParser.STAR, 0); }
		public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDefiniteSchemaPrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDefiniteSchemaPrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteSchemaPrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteFullTablePrivLevel2Context : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext dottedId() {
			return GetRuleContext<DottedIdContext>(0);
		}
		public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDefiniteFullTablePrivLevel2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDefiniteFullTablePrivLevel2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteFullTablePrivLevel2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteFullTablePrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MariaDBParser.DOT, 0); }
		public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDefiniteFullTablePrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDefiniteFullTablePrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteFullTablePrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GlobalPrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STAR() { return GetTokens(MariaDBParser.STAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR(int i) {
			return GetToken(MariaDBParser.STAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MariaDBParser.DOT, 0); }
		public GlobalPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterGlobalPrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitGlobalPrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalPrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DefiniteTablePrivLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DefiniteTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDefiniteTablePrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDefiniteTablePrivLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefiniteTablePrivLevel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CurrentSchemaPriviLevelContext : PrivilegeLevelContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MariaDBParser.STAR, 0); }
		public CurrentSchemaPriviLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCurrentSchemaPriviLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCurrentSchemaPriviLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentSchemaPriviLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeLevelContext privilegeLevel() {
		PrivilegeLevelContext _localctx = new PrivilegeLevelContext(Context, State);
		EnterRule(_localctx, 476, RULE_privilegeLevel);
		try {
			State = 5754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,845,Context) ) {
			case 1:
				_localctx = new CurrentSchemaPriviLevelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5738;
				Match(STAR);
				}
				break;
			case 2:
				_localctx = new GlobalPrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5739;
				Match(STAR);
				State = 5740;
				Match(DOT);
				State = 5741;
				Match(STAR);
				}
				break;
			case 3:
				_localctx = new DefiniteSchemaPrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5742;
				uid();
				State = 5743;
				Match(DOT);
				State = 5744;
				Match(STAR);
				}
				break;
			case 4:
				_localctx = new DefiniteFullTablePrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5746;
				uid();
				State = 5747;
				Match(DOT);
				State = 5748;
				uid();
				}
				break;
			case 5:
				_localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5750;
				uid();
				State = 5751;
				dottedId();
				}
				break;
			case 6:
				_localctx = new DefiniteTablePrivLevelContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5753;
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserClauseContext : ParserRuleContext {
		public UserNameContext fromFirst;
		public UserNameContext toFirst;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(MariaDBParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext[] userName() {
			return GetRuleContexts<UserNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName(int i) {
			return GetRuleContext<UserNameContext>(i);
		}
		public RenameUserClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUserClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRenameUserClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRenameUserClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRenameUserClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserClauseContext renameUserClause() {
		RenameUserClauseContext _localctx = new RenameUserClauseContext(Context, State);
		EnterRule(_localctx, 478, RULE_renameUserClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5756;
			_localctx.fromFirst = userName();
			State = 5757;
			Match(TO);
			State = 5758;
			_localctx.toFirst = userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnalyzeTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE() { return GetToken(MariaDBParser.ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MariaDBParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MariaDBParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HISTOGRAM() { return GetTokens(MariaDBParser.HISTOGRAM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM(int i) {
			return GetToken(MariaDBParser.HISTOGRAM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MariaDBParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MariaDBParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext[] fullColumnName() {
			return GetRuleContexts<FullColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName(int i) {
			return GetRuleContext<FullColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP() { return GetToken(MariaDBParser.DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MariaDBParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MariaDBParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS() { return GetToken(MariaDBParser.BUCKETS, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyzeTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAnalyzeTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAnalyzeTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyzeTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnalyzeTableContext analyzeTable() {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(Context, State);
		EnterRule(_localctx, 480, RULE_analyzeTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5760;
			Match(ANALYZE);
			State = 5762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5761;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5764;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5765;
			tables();
			State = 5783;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,849,Context) ) {
			case 1:
				{
				State = 5766;
				Match(UPDATE);
				State = 5767;
				Match(HISTOGRAM);
				State = 5768;
				Match(ON);
				State = 5769;
				fullColumnName();
				State = 5774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5770;
					Match(COMMA);
					State = 5771;
					fullColumnName();
					}
					}
					State = 5776;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 5781;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH) {
					{
					State = 5777;
					Match(WITH);
					State = 5778;
					decimalLiteral();
					State = 5779;
					Match(BUCKETS);
					}
				}

				}
				break;
			}
			State = 5796;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,851,Context) ) {
			case 1:
				{
				State = 5785;
				Match(DROP);
				State = 5786;
				Match(HISTOGRAM);
				State = 5787;
				Match(ON);
				State = 5788;
				fullColumnName();
				State = 5793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5789;
					Match(COMMA);
					State = 5790;
					fullColumnName();
					}
					}
					State = 5795;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK() { return GetToken(MariaDBParser.CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableOptionContext[] checkTableOption() {
			return GetRuleContexts<CheckTableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckTableOptionContext checkTableOption(int i) {
			return GetRuleContext<CheckTableOptionContext>(i);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCheckTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCheckTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckTableContext checkTable() {
		CheckTableContext _localctx = new CheckTableContext(Context, State);
		EnterRule(_localctx, 482, RULE_checkTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5798;
			Match(CHECK);
			State = 5799;
			Match(TABLE);
			State = 5800;
			tables();
			State = 5804;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FOR || _la==CHANGED || _la==EXTENDED || _la==FAST || _la==MEDIUM || _la==QUICK) {
				{
				{
				State = 5801;
				checkTableOption();
				}
				}
				State = 5806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChecksumTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MariaDBParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MariaDBParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MariaDBParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checksumTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterChecksumTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitChecksumTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecksumTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChecksumTableContext checksumTable() {
		ChecksumTableContext _localctx = new ChecksumTableContext(Context, State);
		EnterRule(_localctx, 484, RULE_checksumTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5807;
			Match(CHECKSUM);
			State = 5808;
			Match(TABLE);
			State = 5809;
			tables();
			State = 5811;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED || _la==QUICK) {
				{
				State = 5810;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXTENDED || _la==QUICK) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptimizeTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE() { return GetToken(MariaDBParser.OPTIMIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MariaDBParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MariaDBParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MariaDBParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optimizeTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterOptimizeTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitOptimizeTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptimizeTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptimizeTableContext optimizeTable() {
		OptimizeTableContext _localctx = new OptimizeTableContext(Context, State);
		EnterRule(_localctx, 486, RULE_optimizeTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5813;
			Match(OPTIMIZE);
			State = 5815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5814;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5817;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLE || _la==TABLES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5818;
			tables();
			State = 5820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				State = 5819;
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepairTableContext : ParserRuleContext {
		public IToken actionOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MariaDBParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MariaDBParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MariaDBParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM() { return GetToken(MariaDBParser.USE_FRM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MariaDBParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MariaDBParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repairTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRepairTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRepairTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRepairTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepairTableContext repairTable() {
		RepairTableContext _localctx = new RepairTableContext(Context, State);
		EnterRule(_localctx, 488, RULE_repairTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5822;
			Match(REPAIR);
			State = 5824;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
				{
				State = 5823;
				_localctx.actionOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
					_localctx.actionOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 5826;
			Match(TABLE);
			State = 5827;
			tables();
			State = 5829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==QUICK) {
				{
				State = 5828;
				Match(QUICK);
				}
			}

			State = 5832;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED) {
				{
				State = 5831;
				Match(EXTENDED);
				}
			}

			State = 5835;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USE_FRM) {
				{
				State = 5834;
				Match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckTableOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MariaDBParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MariaDBParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(MariaDBParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM() { return GetToken(MariaDBParser.MEDIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MariaDBParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED() { return GetToken(MariaDBParser.CHANGED, 0); }
		public CheckTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkTableOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCheckTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCheckTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheckTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckTableOptionContext checkTableOption() {
		CheckTableOptionContext _localctx = new CheckTableOptionContext(Context, State);
		EnterRule(_localctx, 490, RULE_checkTableOption);
		try {
			State = 5844;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5837;
				Match(FOR);
				State = 5838;
				Match(UPGRADE);
				}
				break;
			case QUICK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5839;
				Match(QUICK);
				}
				break;
			case FAST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5840;
				Match(FAST);
				}
				break;
			case MEDIUM:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5841;
				Match(MEDIUM);
				}
				break;
			case EXTENDED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5842;
				Match(EXTENDED);
				}
				break;
			case CHANGED:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5843;
				Match(CHANGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUdfunctionContext : ParserRuleContext {
		public IToken returnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MariaDBParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MariaDBParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MariaDBParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MariaDBParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MariaDBParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(MariaDBParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MariaDBParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrReplaceContext orReplace() {
			return GetRuleContext<OrReplaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(MariaDBParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateUdfunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUdfunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCreateUdfunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCreateUdfunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateUdfunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateUdfunctionContext createUdfunction() {
		CreateUdfunctionContext _localctx = new CreateUdfunctionContext(Context, State);
		EnterRule(_localctx, 492, RULE_createUdfunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5846;
			Match(CREATE);
			State = 5848;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OR) {
				{
				State = 5847;
				orReplace();
				}
			}

			State = 5851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGGREGATE) {
				{
				State = 5850;
				Match(AGGREGATE);
				}
			}

			State = 5853;
			Match(FUNCTION);
			State = 5855;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,863,Context) ) {
			case 1:
				{
				State = 5854;
				ifNotExists();
				}
				break;
			}
			State = 5857;
			uid();
			State = 5858;
			Match(RETURNS);
			State = 5859;
			_localctx.returnType = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & 261L) != 0) || _la==STRING) ) {
				_localctx.returnType = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5860;
			Match(SONAME);
			State = 5861;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL() { return GetToken(MariaDBParser.INSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MariaDBParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MariaDBParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public InstallPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterInstallPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitInstallPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstallPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstallPluginContext installPlugin() {
		InstallPluginContext _localctx = new InstallPluginContext(Context, State);
		EnterRule(_localctx, 494, RULE_installPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5863;
			Match(INSTALL);
			State = 5864;
			Match(PLUGIN);
			State = 5865;
			uid();
			State = 5866;
			Match(SONAME);
			State = 5867;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UninstallPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL() { return GetToken(MariaDBParser.UNINSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MariaDBParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uninstallPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUninstallPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUninstallPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUninstallPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UninstallPluginContext uninstallPlugin() {
		UninstallPluginContext _localctx = new UninstallPluginContext(Context, State);
		EnterRule(_localctx, 496, RULE_uninstallPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5869;
			Match(UNINSTALL);
			State = 5870;
			Match(PLUGIN);
			State = 5871;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
	 
		public SetStatementContext() { }
		public virtual void CopyFrom(SetStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetTransactionContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetTransactionStatementContext setTransactionStatement() {
			return GetRuleContext<SetTransactionStatementContext>(0);
		}
		public SetTransactionContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSetTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSetTransaction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTransaction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetCharsetContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		public SetCharsetContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSetCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSetCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetNamesContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(MariaDBParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MariaDBParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public SetNamesContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSetNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSetNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetNames(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetPasswordContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetPasswordStatementContext setPasswordStatement() {
			return GetRuleContext<SetPasswordStatementContext>(0);
		}
		public SetPasswordContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSetPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSetPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetPassword(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetAutocommitContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetAutocommitStatementContext setAutocommitStatement() {
			return GetRuleContext<SetAutocommitStatementContext>(0);
		}
		public SetAutocommitContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSetAutocommit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSetAutocommit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAutocommit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetNewValueInsideTriggerContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext[] fullId() {
			return GetRuleContexts<FullIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId(int i) {
			return GetRuleContext<FullIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR_ASSIGN() { return GetTokens(MariaDBParser.VAR_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN(int i) {
			return GetToken(MariaDBParser.VAR_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public SetNewValueInsideTriggerContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSetNewValueInsideTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSetNewValueInsideTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetNewValueInsideTrigger(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetVariableContext : SetStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext[] variableClause() {
			return GetRuleContexts<VariableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext variableClause(int i) {
			return GetRuleContext<VariableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VAR_ASSIGN() { return GetTokens(MariaDBParser.VAR_ASSIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN(int i) {
			return GetToken(MariaDBParser.VAR_ASSIGN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON() { return GetTokens(MariaDBParser.ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON(int i) {
			return GetToken(MariaDBParser.ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public SetVariableContext(SetStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSetVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSetVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(Context, State);
		EnterRule(_localctx, 498, RULE_setStatement);
		int _la;
		try {
			State = 5925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,871,Context) ) {
			case 1:
				_localctx = new SetVariableContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5873;
				Match(SET);
				State = 5874;
				variableClause();
				State = 5875;
				_la = TokenStream.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5878;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,864,Context) ) {
				case 1:
					{
					State = 5876;
					expression(0);
					}
					break;
				case 2:
					{
					State = 5877;
					Match(ON);
					}
					break;
				}
				State = 5889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5880;
					Match(COMMA);
					State = 5881;
					variableClause();
					State = 5882;
					_la = TokenStream.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5885;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,865,Context) ) {
					case 1:
						{
						State = 5883;
						expression(0);
						}
						break;
					case 2:
						{
						State = 5884;
						Match(ON);
						}
						break;
					}
					}
					}
					State = 5891;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SetCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5892;
				Match(SET);
				State = 5893;
				charSet();
				State = 5896;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 5894;
					charsetName();
					}
					break;
				case DEFAULT:
					{
					State = 5895;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				_localctx = new SetNamesContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5898;
				Match(SET);
				State = 5899;
				Match(NAMES);
				State = 5906;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BINARY:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
					{
					State = 5900;
					charsetName();
					State = 5903;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLLATE) {
						{
						State = 5901;
						Match(COLLATE);
						State = 5902;
						collationName();
						}
					}

					}
					break;
				case DEFAULT:
					{
					State = 5905;
					Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				_localctx = new SetPasswordContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5908;
				setPasswordStatement();
				}
				break;
			case 5:
				_localctx = new SetTransactionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5909;
				setTransactionStatement();
				}
				break;
			case 6:
				_localctx = new SetAutocommitContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5910;
				setAutocommitStatement();
				}
				break;
			case 7:
				_localctx = new SetNewValueInsideTriggerContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 5911;
				Match(SET);
				State = 5912;
				fullId();
				State = 5913;
				_la = TokenStream.LA(1);
				if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5914;
				expression(0);
				State = 5922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 5915;
					Match(COMMA);
					State = 5916;
					fullId();
					State = 5917;
					_la = TokenStream.LA(1);
					if ( !(_la==VAR_ASSIGN || _la==EQUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5918;
					expression(0);
					}
					}
					State = 5924;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStatementContext : ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showStatement; } }
	 
		public ShowStatementContext() { }
		public virtual void CopyFrom(ShowStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ShowOpenTablesContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MariaDBParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MariaDBParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MariaDBParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowOpenTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowOpenTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowOpenTables(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowExplainContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(MariaDBParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormatJsonStatementContext formatJsonStatement() {
			return GetRuleContext<FormatJsonStatementContext>(0);
		}
		public ShowExplainContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowExplain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowExplain(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowExplain(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowGlobalInfoContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return GetRuleContext<ShowGlobalInfoClauseContext>(0);
		}
		public ShowGlobalInfoContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowGlobalInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowGlobalInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGlobalInfo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateFullIdObjectContext : ShowStatementContext {
		public IToken namedEntity;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MariaDBParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MariaDBParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MariaDBParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(MariaDBParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER() { return GetToken(MariaDBParser.TRIGGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MariaDBParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowCreateFullIdObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowCreateFullIdObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateFullIdObject(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateUserContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MariaDBParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ShowCreateUserContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowCreateUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowCreateUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateUser(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowErrorsContext : ShowStatementContext {
		public IToken errorFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MariaDBParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MariaDBParser.WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public ShowErrorsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowErrors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowErrors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowErrors(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowUserstatPluginContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_STATISTICS() { return GetToken(MariaDBParser.USER_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT_STATISTICS() { return GetToken(MariaDBParser.CLIENT_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_STATISTICS() { return GetToken(MariaDBParser.INDEX_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_STATISTICS() { return GetToken(MariaDBParser.TABLE_STATISTICS, 0); }
		public ShowUserstatPluginContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowUserstatPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowUserstatPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowUserstatPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCountErrorsContext : ShowStatementContext {
		public IToken errorFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MariaDBParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MariaDBParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MariaDBParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MariaDBParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowCountErrors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowCountErrors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCountErrors(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowObjectFilterContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommonEntityContext showCommonEntity() {
			return GetRuleContext<ShowCommonEntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ShowObjectFilterContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowObjectFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowObjectFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowObjectFilter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreateDbContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MariaDBParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MariaDBParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ShowCreateDbContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowCreateDb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowCreateDb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreateDb(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowEngineContext : ShowStatementContext {
		public IToken engineOption;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MariaDBParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameContext engineName() {
			return GetRuleContext<EngineNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MariaDBParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX() { return GetToken(MariaDBParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowEngine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSchemaFilterContext : ShowStatementContext {
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowSchemaEntityContext showSchemaEntity() {
			return GetRuleContext<ShowSchemaEntityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MariaDBParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowSchemaFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowSchemaFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSchemaFilter(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowInnoDBStatusContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB() { return GetToken(MariaDBParser.INNODB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MariaDBParser.STATUS, 0); }
		public ShowInnoDBStatusContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowInnoDBStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowInnoDBStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowInnoDBStatus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowIndexesContext : ShowStatementContext {
		public IToken indexFormat;
		public IToken tableFormat;
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(MariaDBParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS() { return GetToken(MariaDBParser.KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(MariaDBParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(MariaDBParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(MariaDBParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(MariaDBParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MariaDBParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ShowIndexesContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowBinLogEventsContext : ShowStatementContext {
		public IToken filename;
		public DecimalLiteralContext fromPosition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MariaDBParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MariaDBParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MariaDBParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ShowBinLogEventsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowBinLogEvents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowBinLogEvents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowBinLogEvents(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowCreatePackageContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE() { return GetToken(MariaDBParser.CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(MariaDBParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY() { return GetToken(MariaDBParser.BODY, 0); }
		public ShowCreatePackageContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowCreatePackage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowCreatePackage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCreatePackage(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowMasterLogsContext : ShowStatementContext {
		public IToken logFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MariaDBParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MariaDBParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MariaDBParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowMasterLogs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowMasterLogs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowMasterLogs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowGrantsContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(MariaDBParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		public ShowGrantsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowGrants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowGrants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGrants(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowPackageStatusContext : ShowStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(MariaDBParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MariaDBParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY() { return GetToken(MariaDBParser.BODY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ShowPackageStatusContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowPackageStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowPackageStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowPackageStatus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowSlaveStatusContext : ShowStatementContext {
		public IToken connectionName;
		public IToken channelName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MariaDBParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MariaDBParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(MariaDBParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MariaDBParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MariaDBParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MariaDBParser.STRING_LITERAL, i);
		}
		public ShowSlaveStatusContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowSlaveStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowSlaveStatus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSlaveStatus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowRoutineContext : ShowStatementContext {
		public IToken routine;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(MariaDBParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MariaDBParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MariaDBParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowRoutine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowRoutine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowRoutine(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowProfileContext : ShowStatementContext {
		public DecimalLiteralContext queryCount;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE() { return GetToken(MariaDBParser.PROFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfileTypeContext[] showProfileType() {
			return GetRuleContexts<ShowProfileTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfileTypeContext showProfileType(int i) {
			return GetRuleContext<ShowProfileTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MariaDBParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public ShowProfileContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowProfile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowProfile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowProfile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowColumnsContext : ShowStatementContext {
		public IToken columnsFormat;
		public IToken tableFormat;
		public IToken schemaFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MariaDBParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MariaDBParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] FROM() { return GetTokens(MariaDBParser.FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM(int i) {
			return GetToken(MariaDBParser.FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IN() { return GetTokens(MariaDBParser.IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN(int i) {
			return GetToken(MariaDBParser.IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MariaDBParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		public ShowColumnsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowColumns(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShowRelayLogEventsContext : ShowStatementContext {
		public IToken connectionName;
		public IToken filename;
		public DecimalLiteralContext fromPosition;
		public IToken channelName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW() { return GetToken(MariaDBParser.SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG() { return GetToken(MariaDBParser.RELAYLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MariaDBParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MariaDBParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MariaDBParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MariaDBParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MariaDBParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public ShowRelayLogEventsContext(ShowStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowRelayLogEvents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowRelayLogEvents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowRelayLogEvents(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowStatementContext showStatement() {
		ShowStatementContext _localctx = new ShowStatementContext(Context, State);
		EnterRule(_localctx, 500, RULE_showStatement);
		int _la;
		try {
			State = 6118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,903,Context) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 5927;
				Match(SHOW);
				State = 5928;
				((ShowMasterLogsContext)_localctx).logFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5929;
				Match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowBinLogEventsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 5930;
				Match(SHOW);
				State = 5931;
				Match(BINLOG);
				State = 5932;
				Match(EVENTS);
				State = 5935;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 5933;
					Match(IN);
					State = 5934;
					((ShowBinLogEventsContext)_localctx).filename = Match(STRING_LITERAL);
					}
				}

				State = 5939;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 5937;
					Match(FROM);
					State = 5938;
					((ShowBinLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				State = 5942;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 5941;
					limitClause();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowRelayLogEventsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 5944;
				Match(SHOW);
				State = 5945;
				Match(RELAYLOG);
				State = 5947;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING_LITERAL) {
					{
					State = 5946;
					((ShowRelayLogEventsContext)_localctx).connectionName = Match(STRING_LITERAL);
					}
				}

				State = 5949;
				Match(EVENTS);
				State = 5952;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 5950;
					Match(IN);
					State = 5951;
					((ShowRelayLogEventsContext)_localctx).filename = Match(STRING_LITERAL);
					}
				}

				State = 5956;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM) {
					{
					State = 5954;
					Match(FROM);
					State = 5955;
					((ShowRelayLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				State = 5959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 5958;
					limitClause();
					}
				}

				State = 5964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 5961;
					Match(FOR);
					State = 5962;
					Match(CHANNEL);
					State = 5963;
					((ShowRelayLogEventsContext)_localctx).channelName = Match(STRING_LITERAL);
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowObjectFilterContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 5966;
				Match(SHOW);
				State = 5967;
				showCommonEntity();
				State = 5969;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5968;
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowColumnsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 5971;
				Match(SHOW);
				State = 5973;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 5972;
					Match(FULL);
					}
				}

				State = 5975;
				((ShowColumnsContext)_localctx).columnsFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5976;
				((ShowColumnsContext)_localctx).tableFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5977;
				tableName();
				State = 5980;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 5978;
					((ShowColumnsContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 5979;
					uid();
					}
				}

				State = 5983;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 5982;
					showFilter();
					}
				}

				}
				break;
			case 6:
				_localctx = new ShowCreateDbContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 5985;
				Match(SHOW);
				State = 5986;
				Match(CREATE);
				State = 5987;
				((ShowCreateDbContext)_localctx).schemaFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5989;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,884,Context) ) {
				case 1:
					{
					State = 5988;
					ifNotExists();
					}
					break;
				}
				State = 5991;
				uid();
				}
				break;
			case 7:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 5992;
				Match(SHOW);
				State = 5993;
				Match(CREATE);
				State = 5994;
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & 145135534866433L) != 0) || _la==EVENT || _la==FUNCTION || _la==SEQUENCE || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5995;
				fullId();
				}
				break;
			case 8:
				_localctx = new ShowCreatePackageContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 5996;
				Match(SHOW);
				State = 5997;
				Match(CREATE);
				State = 5998;
				Match(PACKAGE);
				State = 6000;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,885,Context) ) {
				case 1:
					{
					State = 5999;
					Match(BODY);
					}
					break;
				}
				State = 6002;
				fullId();
				}
				break;
			case 9:
				_localctx = new ShowCreateUserContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 6003;
				Match(SHOW);
				State = 6004;
				Match(CREATE);
				State = 6005;
				Match(USER);
				State = 6006;
				userName();
				}
				break;
			case 10:
				_localctx = new ShowEngineContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 6007;
				Match(SHOW);
				State = 6008;
				Match(ENGINE);
				State = 6009;
				engineName();
				State = 6010;
				((ShowEngineContext)_localctx).engineOption = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 11:
				_localctx = new ShowInnoDBStatusContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 6012;
				Match(SHOW);
				State = 6013;
				Match(INNODB);
				State = 6014;
				Match(STATUS);
				}
				break;
			case 12:
				_localctx = new ShowGlobalInfoContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 6015;
				Match(SHOW);
				State = 6016;
				showGlobalInfoClause();
				}
				break;
			case 13:
				_localctx = new ShowErrorsContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 6017;
				Match(SHOW);
				State = 6018;
				((ShowErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 6019;
					limitClause();
					}
				}

				}
				break;
			case 14:
				_localctx = new ShowCountErrorsContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 6022;
				Match(SHOW);
				State = 6023;
				Match(COUNT);
				State = 6024;
				Match(LR_BRACKET);
				State = 6025;
				Match(STAR);
				State = 6026;
				Match(RR_BRACKET);
				State = 6027;
				((ShowCountErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 15:
				_localctx = new ShowSchemaFilterContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 6028;
				Match(SHOW);
				State = 6029;
				showSchemaEntity();
				State = 6032;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 6030;
					((ShowSchemaFilterContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 6031;
					uid();
					}
				}

				State = 6035;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 6034;
					showFilter();
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowRoutineContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 6037;
				Match(SHOW);
				State = 6038;
				((ShowRoutineContext)_localctx).routine = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6039;
				Match(CODE);
				State = 6040;
				fullId();
				}
				break;
			case 17:
				_localctx = new ShowGrantsContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 6041;
				Match(SHOW);
				State = 6042;
				Match(GRANTS);
				State = 6045;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 6043;
					Match(FOR);
					State = 6044;
					userName();
					}
				}

				}
				break;
			case 18:
				_localctx = new ShowIndexesContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 6047;
				Match(SHOW);
				State = 6048;
				((ShowIndexesContext)_localctx).indexFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6049;
				((ShowIndexesContext)_localctx).tableFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6050;
				tableName();
				State = 6053;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 6051;
					((ShowIndexesContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 6052;
					uid();
					}
				}

				State = 6057;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 6055;
					Match(WHERE);
					State = 6056;
					expression(0);
					}
				}

				}
				break;
			case 19:
				_localctx = new ShowOpenTablesContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 6059;
				Match(SHOW);
				State = 6060;
				Match(OPEN);
				State = 6061;
				Match(TABLES);
				State = 6064;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM || _la==IN) {
					{
					State = 6062;
					((ShowOpenTablesContext)_localctx).schemaFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 6063;
					fullId();
					}
				}

				State = 6067;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 6066;
					showFilter();
					}
				}

				}
				break;
			case 20:
				_localctx = new ShowProfileContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 6069;
				Match(SHOW);
				State = 6070;
				Match(PROFILE);
				State = 6079;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & 309237645313L) != 0) || _la==IPC || _la==PAGE || _la==SOURCE || _la==SWAPS || _la==MEMORY) {
					{
					State = 6071;
					showProfileType();
					State = 6076;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 6072;
						Match(COMMA);
						State = 6073;
						showProfileType();
						}
						}
						State = 6078;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 6084;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 6081;
					Match(FOR);
					State = 6082;
					Match(QUERY);
					State = 6083;
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				State = 6087;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIMIT) {
					{
					State = 6086;
					limitClause();
					}
				}

				}
				break;
			case 21:
				_localctx = new ShowSlaveStatusContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 6089;
				Match(SHOW);
				State = 6090;
				_la = TokenStream.LA(1);
				if ( !(_la==SLAVE || _la==REPLICA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6092;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STRING_LITERAL) {
					{
					State = 6091;
					((ShowSlaveStatusContext)_localctx).connectionName = Match(STRING_LITERAL);
					}
				}

				State = 6094;
				Match(STATUS);
				State = 6098;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 6095;
					Match(FOR);
					State = 6096;
					Match(CHANNEL);
					State = 6097;
					((ShowSlaveStatusContext)_localctx).channelName = Match(STRING_LITERAL);
					}
				}

				}
				break;
			case 22:
				_localctx = new ShowUserstatPluginContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 6100;
				Match(SHOW);
				State = 6101;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 15L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 23:
				_localctx = new ShowExplainContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 6102;
				Match(SHOW);
				State = 6103;
				Match(EXPLAIN);
				State = 6105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FORMAT) {
					{
					State = 6104;
					formatJsonStatement();
					}
				}

				State = 6107;
				Match(FOR);
				State = 6108;
				decimalLiteral();
				}
				break;
			case 24:
				_localctx = new ShowPackageStatusContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 6109;
				Match(SHOW);
				State = 6110;
				Match(PACKAGE);
				State = 6112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BODY) {
					{
					State = 6111;
					Match(BODY);
					}
				}

				State = 6114;
				Match(STATUS);
				State = 6116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					State = 6115;
					showFilter();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainStatementContext : ParserRuleContext {
		public ExplainStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainStatement; } }
	 
		public ExplainStatementContext() { }
		public virtual void CopyFrom(ExplainStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExplainForConnectionContext : ExplainStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(MariaDBParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MariaDBParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormatJsonStatementContext formatJsonStatement() {
			return GetRuleContext<FormatJsonStatementContext>(0);
		}
		public ExplainForConnectionContext(ExplainStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterExplainForConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitExplainForConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainForConnection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplainStatementContext explainStatement() {
		ExplainStatementContext _localctx = new ExplainStatementContext(Context, State);
		EnterRule(_localctx, 502, RULE_explainStatement);
		int _la;
		try {
			_localctx = new ExplainForConnectionContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 6120;
			Match(EXPLAIN);
			State = 6122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORMAT) {
				{
				State = 6121;
				formatJsonStatement();
				}
			}

			State = 6124;
			Match(FOR);
			State = 6125;
			Match(CONNECTION);
			State = 6126;
			decimalLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MariaDBParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_ID() { return GetToken(MariaDBParser.GLOBAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MariaDBParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MariaDBParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MariaDBParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT_SIGN() { return GetTokens(MariaDBParser.AT_SIGN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN(int i) {
			return GetToken(MariaDBParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterVariableClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitVariableClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableClauseContext variableClause() {
		VariableClauseContext _localctx = new VariableClauseContext(Context, State);
		EnterRule(_localctx, 504, RULE_variableClause);
		int _la;
		try {
			State = 6138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOCAL_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6128;
				Match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6129;
				Match(GLOBAL_ID);
				}
				break;
			case ATTRIBUTE:
			case BODY:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_ROLE:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case PACKAGE:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case STATEMENT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTED:
			case ENCRYPTION:
			case ENCRYPTION_KEY_ID:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOCALES:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUERY_RESPONSE_TIME:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLAVES:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case TYPES:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WSREP_MEMBERSHIP:
			case WSREP_STATUS:
			case X509:
			case XA:
			case XML:
			case YES:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case USER_STATISTICS:
			case CLIENT_STATISTICS:
			case INDEX_STATISTICS:
			case TABLE_STATISTICS:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICAS:
			case REPLICATION_MASTER_ADMIN:
			case MONITOR:
			case READ_ONLY:
			case REPLAY:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6135;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,906,Context) ) {
				case 1:
					{
					State = 6132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AT_SIGN) {
						{
						State = 6130;
						Match(AT_SIGN);
						State = 6131;
						Match(AT_SIGN);
						}
					}

					State = 6134;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 6137;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommonEntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MariaDBParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(MariaDBParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES() { return GetToken(MariaDBParser.DATABASES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMAS() { return GetToken(MariaDBParser.SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MariaDBParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MariaDBParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE() { return GetToken(MariaDBParser.PROCEDURE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES() { return GetToken(MariaDBParser.VARIABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MariaDBParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MariaDBParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommonEntity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowCommonEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowCommonEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCommonEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommonEntityContext showCommonEntity() {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(Context, State);
		EnterRule(_localctx, 506, RULE_showCommonEntity);
		int _la;
		try {
			State = 6153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHARACTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6140;
				Match(CHARACTER);
				State = 6141;
				Match(SET);
				}
				break;
			case COLLATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6142;
				Match(COLLATION);
				}
				break;
			case DATABASES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6143;
				Match(DATABASES);
				}
				break;
			case SCHEMAS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6144;
				Match(SCHEMAS);
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6145;
				Match(FUNCTION);
				State = 6146;
				Match(STATUS);
				}
				break;
			case PROCEDURE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6147;
				Match(PROCEDURE);
				State = 6148;
				Match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					State = 6149;
					_la = TokenStream.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 6152;
				_la = TokenStream.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowFilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MariaDBParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE() { return GetToken(MariaDBParser.WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showFilter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowFilter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowFilterContext showFilter() {
		ShowFilterContext _localctx = new ShowFilterContext(Context, State);
		EnterRule(_localctx, 508, RULE_showFilter);
		try {
			State = 6159;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIKE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6155;
				Match(LIKE);
				State = 6156;
				Match(STRING_LITERAL);
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6157;
				Match(WHERE);
				State = 6158;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowGlobalInfoClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES() { return GetToken(MariaDBParser.ENGINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MariaDBParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MariaDBParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MariaDBParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MariaDBParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS() { return GetToken(MariaDBParser.PLUGINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MariaDBParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowFilterContext showFilter() {
			return GetRuleContext<ShowFilterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MariaDBParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST() { return GetToken(MariaDBParser.PROCESSLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MariaDBParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES() { return GetToken(MariaDBParser.PROFILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALES() { return GetToken(MariaDBParser.LOCALES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MariaDBParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MariaDBParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(MariaDBParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORS() { return GetToken(MariaDBParser.AUTHORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRIBUTORS() { return GetToken(MariaDBParser.CONTRIBUTORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_RESPONSE_TIME() { return GetToken(MariaDBParser.QUERY_RESPONSE_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVES() { return GetToken(MariaDBParser.SLAVES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICAS() { return GetToken(MariaDBParser.REPLICAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSREP_MEMBERSHIP() { return GetToken(MariaDBParser.WSREP_MEMBERSHIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSREP_STATUS() { return GetToken(MariaDBParser.WSREP_STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES() { return GetToken(MariaDBParser.TYPES, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showGlobalInfoClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowGlobalInfoClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowGlobalInfoClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGlobalInfoClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowGlobalInfoClauseContext showGlobalInfoClause() {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(Context, State);
		EnterRule(_localctx, 510, RULE_showGlobalInfoClause);
		int _la;
		try {
			State = 6194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENGINES:
			case STORAGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE) {
					{
					State = 6161;
					Match(STORAGE);
					}
				}

				State = 6164;
				Match(ENGINES);
				}
				break;
			case BINLOG:
			case MASTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6165;
				_la = TokenStream.LA(1);
				if ( !(_la==BINLOG || _la==MASTER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6166;
				Match(STATUS);
				}
				break;
			case PLUGINS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6167;
				Match(PLUGINS);
				State = 6173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SONAME) {
					{
					State = 6168;
					Match(SONAME);
					State = 6171;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case STRING_LITERAL:
						{
						State = 6169;
						Match(STRING_LITERAL);
						}
						break;
					case LIKE:
					case WHERE:
						{
						State = 6170;
						showFilter();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			case PRIVILEGES:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6175;
				Match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 6176;
					Match(FULL);
					}
				}

				State = 6179;
				Match(PROCESSLIST);
				}
				break;
			case PROFILES:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6180;
				Match(PROFILES);
				}
				break;
			case LOCALES:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6181;
				Match(LOCALES);
				}
				break;
			case SLAVE:
			case REPLICA:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6182;
				_la = TokenStream.LA(1);
				if ( !(_la==SLAVE || _la==REPLICA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6183;
				Match(HOSTS);
				}
				break;
			case AUTHORS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6184;
				Match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6185;
				Match(CONTRIBUTORS);
				}
				break;
			case QUERY_RESPONSE_TIME:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6186;
				Match(QUERY_RESPONSE_TIME);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6187;
				Match(ALL);
				State = 6188;
				_la = TokenStream.LA(1);
				if ( !(_la==SLAVES || _la==REPLICAS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6189;
				Match(STATUS);
				}
				break;
			case WSREP_MEMBERSHIP:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6190;
				Match(WSREP_MEMBERSHIP);
				}
				break;
			case WSREP_STATUS:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6191;
				Match(WSREP_STATUS);
				}
				break;
			case TABLE:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6192;
				Match(TABLE);
				State = 6193;
				Match(TYPES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowSchemaEntityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MariaDBParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MariaDBParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MariaDBParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MariaDBParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS() { return GetToken(MariaDBParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showSchemaEntity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowSchemaEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowSchemaEntity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowSchemaEntity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowSchemaEntityContext showSchemaEntity() {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(Context, State);
		EnterRule(_localctx, 512, RULE_showSchemaEntity);
		int _la;
		try {
			State = 6204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVENTS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6196;
				Match(EVENTS);
				}
				break;
			case TABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6197;
				Match(TABLE);
				State = 6198;
				Match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL) {
					{
					State = 6199;
					Match(FULL);
					}
				}

				State = 6202;
				Match(TABLES);
				}
				break;
			case TRIGGERS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6203;
				Match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowProfileTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(MariaDBParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(MariaDBParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(MariaDBParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES() { return GetToken(MariaDBParser.SWITCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(MariaDBParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC() { return GetToken(MariaDBParser.IPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MariaDBParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE() { return GetToken(MariaDBParser.PAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS() { return GetToken(MariaDBParser.FAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(MariaDBParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS() { return GetToken(MariaDBParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showProfileType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShowProfileType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShowProfileType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowProfileType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowProfileTypeContext showProfileType() {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(Context, State);
		EnterRule(_localctx, 514, RULE_showProfileType);
		try {
			State = 6218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6206;
				Match(ALL);
				}
				break;
			case BLOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6207;
				Match(BLOCK);
				State = 6208;
				Match(IO);
				}
				break;
			case CONTEXT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6209;
				Match(CONTEXT);
				State = 6210;
				Match(SWITCHES);
				}
				break;
			case CPU:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6211;
				Match(CPU);
				}
				break;
			case IPC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6212;
				Match(IPC);
				}
				break;
			case MEMORY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6213;
				Match(MEMORY);
				}
				break;
			case PAGE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6214;
				Match(PAGE);
				State = 6215;
				Match(FAULTS);
				}
				break;
			case SOURCE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6216;
				Match(SOURCE);
				}
				break;
			case SWAPS:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6217;
				Match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinlogStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MariaDBParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public BinlogStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binlogStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterBinlogStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitBinlogStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinlogStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinlogStatementContext binlogStatement() {
		BinlogStatementContext _localctx = new BinlogStatementContext(Context, State);
		EnterRule(_localctx, 516, RULE_binlogStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6220;
			Match(BINLOG);
			State = 6221;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CacheIndexStatementContext : ParserRuleContext {
		public UidContext schema;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MariaDBParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableIndexesContext[] tableIndexes() {
			return GetRuleContexts<TableIndexesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableIndexesContext tableIndexes(int i) {
			return GetRuleContext<TableIndexesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MariaDBParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		public CacheIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cacheIndexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCacheIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCacheIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCacheIndexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CacheIndexStatementContext cacheIndexStatement() {
		CacheIndexStatementContext _localctx = new CacheIndexStatementContext(Context, State);
		EnterRule(_localctx, 518, RULE_cacheIndexStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6223;
			Match(CACHE);
			State = 6224;
			Match(INDEX);
			State = 6225;
			tableIndexes();
			State = 6230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6226;
				Match(COMMA);
				State = 6227;
				tableIndexes();
				}
				}
				State = 6232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 6233;
				Match(PARTITION);
				State = 6234;
				Match(LR_BRACKET);
				State = 6237;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BODY:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_ROLE:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case PACKAGE:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case STATEMENT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTED:
				case ENCRYPTION:
				case ENCRYPTION_KEY_ID:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOCALES:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUERY_RESPONSE_TIME:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLAVES:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case TYPES:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WSREP_MEMBERSHIP:
				case WSREP_STATUS:
				case X509:
				case XA:
				case XML:
				case YES:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case USER_STATISTICS:
				case CLIENT_STATISTICS:
				case INDEX_STATISTICS:
				case TABLE_STATISTICS:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICAS:
				case REPLICATION_MASTER_ADMIN:
				case MONITOR:
				case READ_ONLY:
				case REPLAY:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
					{
					State = 6235;
					uidList();
					}
					break;
				case ALL:
					{
					State = 6236;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6239;
				Match(RR_BRACKET);
				}
			}

			State = 6242;
			Match(IN);
			State = 6243;
			_localctx.schema = uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushStatementContext : ParserRuleContext {
		public IToken flushFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH() { return GetToken(MariaDBParser.FLUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext[] flushOption() {
			return GetRuleContexts<FlushOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext flushOption(int i) {
			return GetRuleContext<FlushOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MariaDBParser.NO_WRITE_TO_BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MariaDBParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_STATISTICS() { return GetToken(MariaDBParser.USER_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT_STATISTICS() { return GetToken(MariaDBParser.CLIENT_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_STATISTICS() { return GetToken(MariaDBParser.INDEX_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_STATISTICS() { return GetToken(MariaDBParser.TABLE_STATISTICS, 0); }
		public FlushStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFlushStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFlushStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushStatementContext flushStatement() {
		FlushStatementContext _localctx = new FlushStatementContext(Context, State);
		EnterRule(_localctx, 520, RULE_flushStatement);
		int _la;
		try {
			State = 6259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,924,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6245;
				Match(FLUSH);
				State = 6247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO_WRITE_TO_BINLOG || _la==LOCAL) {
					{
					State = 6246;
					_localctx.flushFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==NO_WRITE_TO_BINLOG || _la==LOCAL) ) {
						_localctx.flushFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 6249;
				flushOption();
				State = 6254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6250;
					Match(COMMA);
					State = 6251;
					flushOption();
					}
					}
					State = 6256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6257;
				Match(FLUSH);
				State = 6258;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 15L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStatementContext : ParserRuleContext {
		public IToken connectionFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KILL() { return GetToken(MariaDBParser.KILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MariaDBParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MariaDBParser.QUERY, 0); }
		public KillStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterKillStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitKillStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStatementContext killStatement() {
		KillStatementContext _localctx = new KillStatementContext(Context, State);
		EnterRule(_localctx, 522, RULE_killStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6261;
			Match(KILL);
			State = 6263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,925,Context) ) {
			case 1:
				{
				State = 6262;
				_localctx.connectionFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
					_localctx.connectionFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 6265;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadIndexIntoCacheContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(MariaDBParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO() { return GetToken(MariaDBParser.INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MariaDBParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoadedTableIndexesContext[] loadedTableIndexes() {
			return GetRuleContexts<LoadedTableIndexesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadedTableIndexesContext loadedTableIndexes(int i) {
			return GetRuleContext<LoadedTableIndexesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadIndexIntoCache; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLoadIndexIntoCache(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLoadIndexIntoCache(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadIndexIntoCache(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadIndexIntoCacheContext loadIndexIntoCache() {
		LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(Context, State);
		EnterRule(_localctx, 524, RULE_loadIndexIntoCache);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6267;
			Match(LOAD);
			State = 6268;
			Match(INDEX);
			State = 6269;
			Match(INTO);
			State = 6270;
			Match(CACHE);
			State = 6271;
			loadedTableIndexes();
			State = 6276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6272;
				Match(COMMA);
				State = 6273;
				loadedTableIndexes();
				}
				}
				State = 6278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MariaDBParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MariaDBParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MariaDBParser.CACHE, 0); }
		public ResetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterResetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitResetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStatementContext resetStatement() {
		ResetStatementContext _localctx = new ResetStatementContext(Context, State);
		EnterRule(_localctx, 526, RULE_resetStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6279;
			Match(RESET);
			State = 6280;
			Match(QUERY);
			State = 6281;
			Match(CACHE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShutdownStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MariaDBParser.SHUTDOWN, 0); }
		public ShutdownStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shutdownStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterShutdownStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitShutdownStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShutdownStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShutdownStatementContext shutdownStatement() {
		ShutdownStatementContext _localctx = new ShutdownStatementContext(Context, State);
		EnterRule(_localctx, 528, RULE_shutdownStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6283;
			Match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableIndexesContext : ParserRuleContext {
		public IToken indexFormat;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList() {
			return GetRuleContext<UidListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		public TableIndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableIndexes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableIndexesContext tableIndexes() {
		TableIndexesContext _localctx = new TableIndexesContext(Context, State);
		EnterRule(_localctx, 530, RULE_tableIndexes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6285;
			tableName();
			State = 6293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX || _la==KEY || _la==LR_BRACKET) {
				{
				State = 6287;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 6286;
					_localctx.indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						_localctx.indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 6289;
				Match(LR_BRACKET);
				State = 6290;
				uidList();
				State = 6291;
				Match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushOptionContext : ParserRuleContext {
		public FlushOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushOption; } }
	 
		public FlushOptionContext() { }
		public virtual void CopyFrom(FlushOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TableFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE() { return GetToken(MariaDBParser.TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MariaDBParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablesContext tables() {
			return GetRuleContext<TablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushTableOptionContext flushTableOption() {
			return GetRuleContext<FlushTableOptionContext>(0);
		}
		public TableFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ChannelFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MariaDBParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MariaDBParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelOptionContext channelOption() {
			return GetRuleContext<ChannelOptionContext>(0);
		}
		public ChannelFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterChannelFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitChannelFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannelFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleFlushOptionContext : FlushOptionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_KEY_FILE() { return GetToken(MariaDBParser.DES_KEY_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MariaDBParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MariaDBParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MariaDBParser.OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MariaDBParser.PRIVILEGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MariaDBParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MariaDBParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MariaDBParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES() { return GetToken(MariaDBParser.USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MariaDBParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MariaDBParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MariaDBParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MariaDBParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MariaDBParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(MariaDBParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL() { return GetToken(MariaDBParser.GENERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MariaDBParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW() { return GetToken(MariaDBParser.SLOW, 0); }
		public SimpleFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSimpleFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSimpleFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFlushOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushOptionContext flushOption() {
		FlushOptionContext _localctx = new FlushOptionContext(Context, State);
		EnterRule(_localctx, 532, RULE_flushOption);
		int _la;
		try {
			State = 6327;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,935,Context) ) {
			case 1:
				_localctx = new SimpleFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6313;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DES_KEY_FILE:
					{
					State = 6295;
					Match(DES_KEY_FILE);
					}
					break;
				case HOSTS:
					{
					State = 6296;
					Match(HOSTS);
					}
					break;
				case BINARY:
				case ENGINE:
				case ERROR:
				case GENERAL:
				case LOGS:
				case RELAY:
				case SLOW:
					{
					State = 6298;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==BINARY || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & 536870917L) != 0) || _la==RELAY || _la==SLOW) {
						{
						State = 6297;
						_la = TokenStream.LA(1);
						if ( !(_la==BINARY || ((((_la - 413)) & ~0x3f) == 0 && ((1L << (_la - 413)) & 536870917L) != 0) || _la==RELAY || _la==SLOW) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 6300;
					Match(LOGS);
					}
					break;
				case OPTIMIZER_COSTS:
					{
					State = 6301;
					Match(OPTIMIZER_COSTS);
					}
					break;
				case PRIVILEGES:
					{
					State = 6302;
					Match(PRIVILEGES);
					}
					break;
				case QUERY:
					{
					State = 6303;
					Match(QUERY);
					State = 6304;
					Match(CACHE);
					}
					break;
				case STATUS:
					{
					State = 6305;
					Match(STATUS);
					}
					break;
				case USER_RESOURCES:
					{
					State = 6306;
					Match(USER_RESOURCES);
					}
					break;
				case TABLES:
					{
					State = 6307;
					Match(TABLES);
					State = 6311;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WITH) {
						{
						State = 6308;
						Match(WITH);
						State = 6309;
						Match(READ);
						State = 6310;
						Match(LOCK);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				_localctx = new ChannelFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6315;
				Match(RELAY);
				State = 6316;
				Match(LOGS);
				State = 6318;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 6317;
					channelOption();
					}
				}

				}
				break;
			case 3:
				_localctx = new TableFlushOptionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6320;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLE || _la==TABLES) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6322;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,933,Context) ) {
				case 1:
					{
					State = 6321;
					tables();
					}
					break;
				}
				State = 6325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR || _la==WITH) {
					{
					State = 6324;
					flushTableOption();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTableOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(MariaDBParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ() { return GetToken(MariaDBParser.READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK() { return GetToken(MariaDBParser.LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(MariaDBParser.EXPORT, 0); }
		public FlushTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTableOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFlushTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFlushTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlushTableOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FlushTableOptionContext flushTableOption() {
		FlushTableOptionContext _localctx = new FlushTableOptionContext(Context, State);
		EnterRule(_localctx, 534, RULE_flushTableOption);
		try {
			State = 6334;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6329;
				Match(WITH);
				State = 6330;
				Match(READ);
				State = 6331;
				Match(LOCK);
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6332;
				Match(FOR);
				State = 6333;
				Match(EXPORT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadedTableIndexesContext : ParserRuleContext {
		public UidListContext partitionList;
		public IToken indexFormat;
		public UidListContext indexList;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE() { return GetToken(MariaDBParser.IGNORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES() { return GetToken(MariaDBParser.LEAVES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext[] uidList() {
			return GetRuleContexts<UidListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidListContext uidList(int i) {
			return GetRuleContext<UidListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX() { return GetToken(MariaDBParser.INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY() { return GetToken(MariaDBParser.KEY, 0); }
		public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadedTableIndexes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLoadedTableIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLoadedTableIndexes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadedTableIndexes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadedTableIndexesContext loadedTableIndexes() {
		LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(Context, State);
		EnterRule(_localctx, 536, RULE_loadedTableIndexes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6336;
			tableName();
			State = 6344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 6337;
				Match(PARTITION);
				State = 6338;
				Match(LR_BRACKET);
				State = 6341;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ATTRIBUTE:
				case BODY:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_ROLE:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case PACKAGE:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case STATEMENT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTED:
				case ENCRYPTION:
				case ENCRYPTION_KEY_ID:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOCALES:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUERY_RESPONSE_TIME:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLAVES:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case TYPES:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WSREP_MEMBERSHIP:
				case WSREP_STATUS:
				case X509:
				case XA:
				case XML:
				case YES:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case USER_STATISTICS:
				case CLIENT_STATISTICS:
				case INDEX_STATISTICS:
				case TABLE_STATISTICS:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICAS:
				case REPLICATION_MASTER_ADMIN:
				case MONITOR:
				case READ_ONLY:
				case REPLAY:
				case MOD:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
					{
					State = 6339;
					_localctx.partitionList = uidList();
					}
					break;
				case ALL:
					{
					State = 6340;
					Match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6343;
				Match(RR_BRACKET);
				}
			}

			State = 6353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,940,Context) ) {
			case 1:
				{
				State = 6347;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					State = 6346;
					_localctx.indexFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						_localctx.indexFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 6349;
				Match(LR_BRACKET);
				State = 6350;
				_localctx.indexList = uidList();
				State = 6351;
				Match(RR_BRACKET);
				}
				break;
			}
			State = 6357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE) {
				{
				State = 6355;
				Match(IGNORE);
				State = 6356;
				Match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleDescribeStatementContext : ParserRuleContext {
		public IToken command;
		public UidContext column;
		public IToken pattern;
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(MariaDBParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(MariaDBParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MariaDBParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleDescribeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSimpleDescribeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSimpleDescribeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDescribeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleDescribeStatementContext simpleDescribeStatement() {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(Context, State);
		EnterRule(_localctx, 538, RULE_simpleDescribeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6359;
			_localctx.command = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4611897124659920896L) != 0)) ) {
				_localctx.command = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6360;
			tableName();
			State = 6363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,942,Context) ) {
			case 1:
				{
				State = 6361;
				_localctx.column = uid();
				}
				break;
			case 2:
				{
				State = 6362;
				_localctx.pattern = Match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullDescribeStatementContext : ParserRuleContext {
		public IToken command;
		public IToken formatType;
		public IToken formatValue;
		[System.Diagnostics.DebuggerNonUserCode] public DescribeObjectClauseContext describeObjectClause() {
			return GetRuleContext<DescribeObjectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN() { return GetToken(MariaDBParser.EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE() { return GetToken(MariaDBParser.DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MariaDBParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MariaDBParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MariaDBParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(MariaDBParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRADITIONAL() { return GetToken(MariaDBParser.TRADITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MariaDBParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullDescribeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFullDescribeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFullDescribeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullDescribeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullDescribeStatementContext fullDescribeStatement() {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(Context, State);
		EnterRule(_localctx, 540, RULE_fullDescribeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6365;
			_localctx.command = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4611897124659920896L) != 0)) ) {
				_localctx.command = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6369;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				State = 6366;
				_localctx.formatType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					_localctx.formatType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6367;
				Match(EQUAL_SYMBOL);
				State = 6368;
				_localctx.formatValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					_localctx.formatValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6371;
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormatJsonStatementContext : ParserRuleContext {
		public IToken formatValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(MariaDBParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MariaDBParser.JSON, 0); }
		public FormatJsonStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formatJsonStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFormatJsonStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFormatJsonStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormatJsonStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormatJsonStatementContext formatJsonStatement() {
		FormatJsonStatementContext _localctx = new FormatJsonStatementContext(Context, State);
		EnterRule(_localctx, 542, RULE_formatJsonStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6373;
			Match(FORMAT);
			State = 6374;
			Match(EQUAL_SYMBOL);
			State = 6375;
			_localctx.formatValue = Match(JSON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HelpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP() { return GetToken(MariaDBParser.HELP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHelpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHelpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHelpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HelpStatementContext helpStatement() {
		HelpStatementContext _localctx = new HelpStatementContext(Context, State);
		EnterRule(_localctx, 544, RULE_helpStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6377;
			Match(HELP);
			State = 6378;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE() { return GetToken(MariaDBParser.USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UseStatementContext useStatement() {
		UseStatementContext _localctx = new UseStatementContext(Context, State);
		EnterRule(_localctx, 546, RULE_useStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6380;
			Match(USE);
			State = 6381;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNAL() { return GetToken(MariaDBParser.SIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MariaDBParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MariaDBParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext[] signalConditionInformation() {
			return GetRuleContexts<SignalConditionInformationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext signalConditionInformation(int i) {
			return GetRuleContext<SignalConditionInformationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MariaDBParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MariaDBParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalStatementContext signalStatement() {
		SignalStatementContext _localctx = new SignalStatementContext(Context, State);
		EnterRule(_localctx, 548, RULE_signalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6383;
			Match(SIGNAL);
			State = 6391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQLSTATE:
				{
				{
				State = 6384;
				Match(SQLSTATE);
				State = 6386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 6385;
					Match(VALUE);
					}
				}

				State = 6388;
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				State = 6389;
				Match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				State = 6390;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6402;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,947,Context) ) {
			case 1:
				{
				State = 6393;
				Match(SET);
				State = 6394;
				signalConditionInformation();
				State = 6399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6395;
					Match(COMMA);
					State = 6396;
					signalConditionInformation();
					}
					}
					State = 6401;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESIGNAL() { return GetToken(MariaDBParser.RESIGNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MariaDBParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MariaDBParser.REVERSE_QUOTE_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext[] signalConditionInformation() {
			return GetRuleContexts<SignalConditionInformationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalConditionInformationContext signalConditionInformation(int i) {
			return GetRuleContext<SignalConditionInformationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE() { return GetToken(MariaDBParser.SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MariaDBParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resignalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterResignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitResignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResignalStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResignalStatementContext resignalStatement() {
		ResignalStatementContext _localctx = new ResignalStatementContext(Context, State);
		EnterRule(_localctx, 550, RULE_resignalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6404;
			Match(RESIGNAL);
			State = 6412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SQLSTATE:
				{
				{
				State = 6405;
				Match(SQLSTATE);
				State = 6407;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VALUE) {
					{
					State = 6406;
					Match(VALUE);
					}
				}

				State = 6409;
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				State = 6410;
				Match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				State = 6411;
				Match(REVERSE_QUOTE_ID);
				}
				break;
			case Eof:
			case ALTER:
			case ANALYZE:
			case CALL:
			case CHANGE:
			case CHECK:
			case CREATE:
			case DELETE:
			case DESC:
			case DESCRIBE:
			case DROP:
			case EXPLAIN:
			case GET:
			case GRANT:
			case INSERT:
			case KILL:
			case LOAD:
			case LOCK:
			case OPTIMIZE:
			case PURGE:
			case RELEASE:
			case RENAME:
			case REPLACE:
			case RESIGNAL:
			case REVOKE:
			case SELECT:
			case SET:
			case SHOW:
			case SIGNAL:
			case UNLOCK:
			case UPDATE:
			case USE:
			case VALUES:
			case BEGIN:
			case BINLOG:
			case CACHE:
			case CHECKSUM:
			case COMMIT:
			case DEALLOCATE:
			case DO:
			case FLUSH:
			case HANDLER:
			case HELP:
			case INSTALL:
			case PREPARE:
			case REPAIR:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case START:
			case STOP:
			case TRUNCATE:
			case UNINSTALL:
			case XA:
			case EXECUTE:
			case SHUTDOWN:
			case MINUS:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			State = 6423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,951,Context) ) {
			case 1:
				{
				State = 6414;
				Match(SET);
				State = 6415;
				signalConditionInformation();
				State = 6420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6416;
					Match(COMMA);
					State = 6417;
					signalConditionInformation();
					}
					}
					State = 6422;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalConditionInformationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MariaDBParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MariaDBParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MariaDBParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MariaDBParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MariaDBParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MariaDBParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MariaDBParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MariaDBParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MariaDBParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MariaDBParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MariaDBParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MariaDBParser.CURSOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(MariaDBParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalConditionInformation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSignalConditionInformation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSignalConditionInformation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignalConditionInformation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignalConditionInformationContext signalConditionInformation() {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(Context, State);
		EnterRule(_localctx, 552, RULE_signalConditionInformation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6425;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & 272105729L) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6426;
			Match(EQUAL_SYMBOL);
			State = 6431;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case START_NATIONAL_STRING_LITERAL:
			case STRING_LITERAL:
			case STRING_CHARSET_NAME:
				{
				State = 6427;
				stringLiteral();
				}
				break;
			case DECIMAL_LITERAL:
				{
				State = 6428;
				Match(DECIMAL_LITERAL);
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				{
				State = 6429;
				mysqlVariable();
				}
				break;
			case ATTRIBUTE:
			case BODY:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_ROLE:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case PACKAGE:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case STATEMENT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTED:
			case ENCRYPTION:
			case ENCRYPTION_KEY_ID:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOCALES:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUERY_RESPONSE_TIME:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLAVES:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case TYPES:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WSREP_MEMBERSHIP:
			case WSREP_STATUS:
			case X509:
			case XA:
			case XML:
			case YES:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case USER_STATISTICS:
			case CLIENT_STATISTICS:
			case INDEX_STATISTICS:
			case TABLE_STATISTICS:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICAS:
			case REPLICATION_MASTER_ADMIN:
			case MONITOR:
			case READ_ONLY:
			case REPLAY:
			case MOD:
			case ID:
				{
				State = 6430;
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiagnosticsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET() { return GetToken(MariaDBParser.GET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(MariaDBParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MariaDBParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(MariaDBParser.STACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext[] variableClause() {
			return GetRuleContexts<VariableClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableClauseContext variableClause(int i) {
			return GetRuleContext<VariableClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MariaDBParser.EQUAL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL(int i) {
			return GetToken(MariaDBParser.EQUAL_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(MariaDBParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsConditionInformationNameContext[] diagnosticsConditionInformationName() {
			return GetRuleContexts<DiagnosticsConditionInformationNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return GetRuleContext<DiagnosticsConditionInformationNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(MariaDBParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(MariaDBParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ROW_COUNT() { return GetTokens(MariaDBParser.ROW_COUNT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT(int i) {
			return GetToken(MariaDBParser.ROW_COUNT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diagnosticsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDiagnosticsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDiagnosticsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiagnosticsStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiagnosticsStatementContext diagnosticsStatement() {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(Context, State);
		EnterRule(_localctx, 554, RULE_diagnosticsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6433;
			Match(GET);
			State = 6435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				State = 6434;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 6437;
			Match(DIAGNOSTICS);
			State = 6469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,957,Context) ) {
			case 1:
				{
				{
				State = 6438;
				variableClause();
				State = 6439;
				Match(EQUAL_SYMBOL);
				State = 6440;
				_la = TokenStream.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6441;
					Match(COMMA);
					State = 6442;
					variableClause();
					State = 6443;
					Match(EQUAL_SYMBOL);
					State = 6444;
					_la = TokenStream.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 6450;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				State = 6451;
				Match(CONDITION);
				State = 6454;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					State = 6452;
					decimalLiteral();
					}
					break;
				case ATTRIBUTE:
				case BODY:
				case BUCKETS:
				case CONDITION:
				case CURRENT:
				case CURRENT_ROLE:
				case CURRENT_USER:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EMPTY:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LATERAL:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case PACKAGE:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case STATEMENT:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_ARRAYAGG:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_DEPTH:
				case JSON_EXTRACT:
				case JSON_INSERT:
				case JSON_KEYS:
				case JSON_LENGTH:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_OBJECT:
				case JSON_OBJECTAGG:
				case JSON_OVERLAPS:
				case JSON_PRETTY:
				case JSON_QUOTE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_SEARCH:
				case JSON_SET:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_TABLE:
				case JSON_TYPE:
				case JSON_UNQUOTE:
				case JSON_VALID:
				case JSON_VALUE:
				case NESTED:
				case ORDINALITY:
				case PATH:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTED:
				case ENCRYPTION:
				case ENCRYPTION_KEY_ID:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTORY:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOCALES:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUERY_RESPONSE_TIME:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case REUSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLAVES:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case TYPES:
				case UNBOUNDED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WSREP_MEMBERSHIP:
				case WSREP_STATUS:
				case X509:
				case XA:
				case XML:
				case YES:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case USER_STATISTICS:
				case CLIENT_STATISTICS:
				case INDEX_STATISTICS:
				case TABLE_STATISTICS:
				case ADMIN:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case EXECUTE:
				case FILE:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case PRIVILEGES:
				case PROCESS:
				case RELOAD:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case ROUTINE:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SHUTDOWN:
				case SUPER:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLES:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICAS:
				case REPLICATION_MASTER_ADMIN:
				case MONITOR:
				case READ_ONLY:
				case REPLAY:
				case MOD:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case LOCAL_ID:
				case GLOBAL_ID:
					{
					State = 6453;
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6456;
				variableClause();
				State = 6457;
				Match(EQUAL_SYMBOL);
				State = 6458;
				diagnosticsConditionInformationName();
				State = 6466;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 6459;
					Match(COMMA);
					State = 6460;
					variableClause();
					State = 6461;
					Match(EQUAL_SYMBOL);
					State = 6462;
					diagnosticsConditionInformationName();
					}
					}
					State = 6468;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiagnosticsConditionInformationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MariaDBParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MariaDBParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE() { return GetToken(MariaDBParser.RETURNED_SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MariaDBParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MariaDBParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MariaDBParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MariaDBParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MariaDBParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MariaDBParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MariaDBParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MariaDBParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MariaDBParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MariaDBParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diagnosticsConditionInformationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDiagnosticsConditionInformationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDiagnosticsConditionInformationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiagnosticsConditionInformationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(Context, State);
		EnterRule(_localctx, 556, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6471;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & 272105729L) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || ((((_la - 598)) & ~0x3f) == 0 && ((1L << (_la - 598)) & 36310271995674625L) != 0) || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeObjectClauseContext : ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describeObjectClause; } }
	 
		public DescribeObjectClauseContext() { }
		public virtual void CopyFrom(DescribeObjectClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DescribeStatementsContext : DescribeObjectClauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDescribeStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDescribeStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeStatements(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DescribeConnectionContext : DescribeObjectClauseContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MariaDBParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDescribeConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDescribeConnection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescribeConnection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescribeObjectClauseContext describeObjectClause() {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(Context, State);
		EnterRule(_localctx, 558, RULE_describeObjectClause);
		try {
			State = 6483;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6478;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					State = 6473;
					selectStatement();
					}
					break;
				case DELETE:
					{
					State = 6474;
					deleteStatement();
					}
					break;
				case INSERT:
					{
					State = 6475;
					insertStatement();
					}
					break;
				case REPLACE:
					{
					State = 6476;
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					State = 6477;
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6480;
				Match(FOR);
				State = 6481;
				Match(CONNECTION);
				State = 6482;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_ID() { return GetToken(MariaDBParser.DOT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MariaDBParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFullId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFullId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullIdContext fullId() {
		FullIdContext _localctx = new FullIdContext(Context, State);
		EnterRule(_localctx, 560, RULE_fullId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6485;
			uid();
			State = 6489;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,960,Context) ) {
			case 1:
				{
				State = 6486;
				Match(DOT_ID);
				}
				break;
			case 2:
				{
				State = 6487;
				Match(DOT);
				State = 6488;
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 562, RULE_tableName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6491;
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserNameContext userName() {
			return GetRuleContext<UserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRoleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRoleName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoleName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RoleNameContext roleName() {
		RoleNameContext _localctx = new RoleNameContext(Context, State);
		EnterRule(_localctx, 564, RULE_roleName);
		try {
			State = 6495;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,961,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6493;
				userName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6494;
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext[] dottedId() {
			return GetRuleContexts<DottedIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DottedIdContext dottedId(int i) {
			return GetRuleContext<DottedIdContext>(i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFullColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFullColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullColumnNameContext fullColumnName() {
		FullColumnNameContext _localctx = new FullColumnNameContext(Context, State);
		EnterRule(_localctx, 566, RULE_fullColumnName);
		try {
			State = 6509;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,965,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6497;
				uid();
				State = 6502;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,963,Context) ) {
				case 1:
					{
					State = 6498;
					dottedId();
					State = 6500;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,962,Context) ) {
					case 1:
						{
						State = 6499;
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6504;
				MatchWildcard();
				State = 6505;
				dottedId();
				State = 6507;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,964,Context) ) {
				case 1:
					{
					State = 6506;
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnNameContext : ParserRuleContext {
		public IToken sortType;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MariaDBParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MariaDBParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIndexColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIndexColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnNameContext indexColumnName() {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(Context, State);
		EnterRule(_localctx, 568, RULE_indexColumnName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,968,Context) ) {
			case 1:
				{
				State = 6513;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,966,Context) ) {
				case 1:
					{
					State = 6511;
					uid();
					}
					break;
				case 2:
					{
					State = 6512;
					Match(STRING_LITERAL);
					}
					break;
				}
				State = 6519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6515;
					Match(LR_BRACKET);
					State = 6516;
					decimalLiteral();
					State = 6517;
					Match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				State = 6521;
				expression(0);
				}
				break;
			}
			State = 6525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 6524;
				_localctx.sortType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.sortType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleUserNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MariaDBParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MariaDBParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordsCanBeIdContext keywordsCanBeId() {
			return GetRuleContext<KeywordsCanBeIdContext>(0);
		}
		public SimpleUserNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleUserName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSimpleUserName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSimpleUserName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleUserName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleUserNameContext simpleUserName() {
		SimpleUserNameContext _localctx = new SimpleUserNameContext(Context, State);
		EnterRule(_localctx, 570, RULE_simpleUserName);
		try {
			State = 6531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,970,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6527;
				Match(STRING_LITERAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6528;
				Match(ID);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6529;
				Match(ADMIN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6530;
				keywordsCanBeId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HostNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MariaDBParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST_IP_ADDRESS() { return GetToken(MariaDBParser.HOST_IP_ADDRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN() { return GetToken(MariaDBParser.AT_SIGN, 0); }
		public HostNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hostName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHostName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHostName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHostName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HostNameContext hostName() {
		HostNameContext _localctx = new HostNameContext(Context, State);
		EnterRule(_localctx, 572, RULE_hostName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6533;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 1162)) & ~0x3f) == 0 && ((1L << (_la - 1162)) & 6291457L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleUserNameContext simpleUserName() {
			return GetRuleContext<SimpleUserNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HostNameContext hostName() {
			return GetRuleContext<HostNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurrentUserExpressionContext currentUserExpression() {
			return GetRuleContext<CurrentUserExpressionContext>(0);
		}
		public UserNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUserName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUserName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserNameContext userName() {
		UserNameContext _localctx = new UserNameContext(Context, State);
		EnterRule(_localctx, 574, RULE_userName);
		try {
			State = 6540;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,971,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6535;
				simpleUserName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6536;
				simpleUserName();
				State = 6537;
				hostName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6539;
				currentUserExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MysqlVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MariaDBParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_ID() { return GetToken(MariaDBParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mysqlVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterMysqlVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitMysqlVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMysqlVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MysqlVariableContext mysqlVariable() {
		MysqlVariableContext _localctx = new MysqlVariableContext(Context, State);
		EnterRule(_localctx, 576, RULE_mysqlVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6542;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MariaDBParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameBaseContext charsetNameBase() {
			return GetRuleContext<CharsetNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MariaDBParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCharsetName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCharsetName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameContext charsetName() {
		CharsetNameContext _localctx = new CharsetNameContext(Context, State);
		EnterRule(_localctx, 578, RULE_charsetName);
		try {
			State = 6548;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,972,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6544;
				Match(BINARY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6545;
				charsetNameBase();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6546;
				Match(STRING_LITERAL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6547;
				Match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCollationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCollationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollationName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollationNameContext collationName() {
		CollationNameContext _localctx = new CollationNameContext(Context, State);
		EnterRule(_localctx, 580, RULE_collationName);
		try {
			State = 6552;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,973,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6550;
				uid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6551;
				Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameBaseContext engineNameBase() {
			return GetRuleContext<EngineNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MariaDBParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterEngineName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitEngineName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEngineName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EngineNameContext engineName() {
		EngineNameContext _localctx = new EngineNameContext(Context, State);
		EnterRule(_localctx, 582, RULE_engineName);
		try {
			State = 6557;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONNECT:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6554;
				engineNameBase();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6555;
				Match(ID);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6556;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineNameBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARCHIVE() { return GetToken(MariaDBParser.ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLACKHOLE() { return GetToken(MariaDBParser.BLACKHOLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(MariaDBParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CSV() { return GetToken(MariaDBParser.CSV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEDERATED() { return GetToken(MariaDBParser.FEDERATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB() { return GetToken(MariaDBParser.INNODB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MariaDBParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MRG_MYISAM() { return GetToken(MariaDBParser.MRG_MYISAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYISAM() { return GetToken(MariaDBParser.MYISAM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB() { return GetToken(MariaDBParser.NDB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDBCLUSTER() { return GetToken(MariaDBParser.NDBCLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERFORMANCE_SCHEMA() { return GetToken(MariaDBParser.PERFORMANCE_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOKUDB() { return GetToken(MariaDBParser.TOKUDB, 0); }
		public EngineNameBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineNameBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterEngineNameBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitEngineNameBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEngineNameBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EngineNameBaseContext engineNameBase() {
		EngineNameBaseContext _localctx = new EngineNameBaseContext(Context, State);
		EnterRule(_localctx, 584, RULE_engineNameBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6559;
			_la = TokenStream.LA(1);
			if ( !(_la==CONNECT || ((((_la - 798)) & ~0x3f) == 0 && ((1L << (_la - 798)) & 4095L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EncryptedLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(MariaDBParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public EncryptedLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_encryptedLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterEncryptedLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitEncryptedLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEncryptedLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EncryptedLiteralContext encryptedLiteral() {
		EncryptedLiteralContext _localctx = new EncryptedLiteralContext(Context, State);
		EnterRule(_localctx, 586, RULE_encryptedLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6561;
			_la = TokenStream.LA(1);
			if ( !(_la==ENCRYPTED || _la==STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UuidSetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS() { return GetTokens(MariaDBParser.MINUS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS(int i) {
			return GetToken(MariaDBParser.MINUS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COLON_SYMB() { return GetTokens(MariaDBParser.COLON_SYMB); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMB(int i) {
			return GetToken(MariaDBParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uuidSet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUuidSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUuidSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUuidSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UuidSetContext uuidSet() {
		UuidSetContext _localctx = new UuidSetContext(Context, State);
		EnterRule(_localctx, 588, RULE_uuidSet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6563;
			decimalLiteral();
			State = 6564;
			Match(MINUS);
			State = 6565;
			decimalLiteral();
			State = 6566;
			Match(MINUS);
			State = 6567;
			decimalLiteral();
			State = 6568;
			Match(MINUS);
			State = 6569;
			decimalLiteral();
			State = 6570;
			Match(MINUS);
			State = 6571;
			decimalLiteral();
			State = 6577;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 6572;
				Match(COLON_SYMB);
				State = 6573;
				decimalLiteral();
				State = 6574;
				Match(MINUS);
				State = 6575;
				decimalLiteral();
				}
				}
				State = 6579;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XidContext : ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		[System.Diagnostics.DebuggerNonUserCode] public XuidStringIdContext[] xuidStringId() {
			return GetRuleContexts<XuidStringIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public XuidStringIdContext xuidStringId(int i) {
			return GetRuleContext<XuidStringIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public XidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterXid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitXid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XidContext xid() {
		XidContext _localctx = new XidContext(Context, State);
		EnterRule(_localctx, 590, RULE_xid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6581;
			_localctx.globalTableUid = xuidStringId();
			State = 6588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6582;
				Match(COMMA);
				State = 6583;
				_localctx.qualifier = xuidStringId();
				State = 6586;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 6584;
					Match(COMMA);
					State = 6585;
					_localctx.idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XuidStringIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_STRING() { return GetToken(MariaDBParser.BIT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] HEXADECIMAL_LITERAL() { return GetTokens(MariaDBParser.HEXADECIMAL_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL_LITERAL(int i) {
			return GetToken(MariaDBParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xuidStringId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterXuidStringId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitXuidStringId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXuidStringId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public XuidStringIdContext xuidStringId() {
		XuidStringIdContext _localctx = new XuidStringIdContext(Context, State);
		EnterRule(_localctx, 592, RULE_xuidStringId);
		int _la;
		try {
			State = 6597;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6590;
				Match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6591;
				Match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6592;
					Match(HEXADECIMAL_LITERAL);
					}
					}
					State = 6595;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuthPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAuthPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAuthPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuthPlugin(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuthPluginContext authPlugin() {
		AuthPluginContext _localctx = new AuthPluginContext(Context, State);
		EnterRule(_localctx, 594, RULE_authPlugin);
		try {
			State = 6601;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,980,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6599;
				uid();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6600;
				Match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdContext simpleId() {
			return GetRuleContext<SimpleIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MariaDBParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public UidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UidContext uid() {
		UidContext _localctx = new UidContext(Context, State);
		EnterRule(_localctx, 596, RULE_uid);
		try {
			State = 6606;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTRIBUTE:
			case BODY:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_ROLE:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case PACKAGE:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case STATEMENT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTED:
			case ENCRYPTION:
			case ENCRYPTION_KEY_ID:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOCALES:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUERY_RESPONSE_TIME:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLAVES:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case TYPES:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WSREP_MEMBERSHIP:
			case WSREP_STATUS:
			case X509:
			case XA:
			case XML:
			case YES:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case USER_STATISTICS:
			case CLIENT_STATISTICS:
			case INDEX_STATISTICS:
			case TABLE_STATISTICS:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICAS:
			case REPLICATION_MASTER_ADMIN:
			case MONITOR:
			case READ_ONLY:
			case REPLAY:
			case MOD:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6603;
				simpleId();
				}
				break;
			case CHARSET_REVERSE_QOUTE_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6604;
				Match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6605;
				Match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(MariaDBParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameBaseContext charsetNameBase() {
			return GetRuleContext<CharsetNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionLevelBaseContext transactionLevelBase() {
			return GetRuleContext<TransactionLevelBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EngineNameBaseContext engineNameBase() {
			return GetRuleContext<EngineNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegesBaseContext privilegesBase() {
			return GetRuleContext<PrivilegesBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeBaseContext intervalTypeBase() {
			return GetRuleContext<IntervalTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeBaseContext dataTypeBase() {
			return GetRuleContext<DataTypeBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordsCanBeIdContext keywordsCanBeId() {
			return GetRuleContext<KeywordsCanBeIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScalarFunctionNameContext scalarFunctionName() {
			return GetRuleContext<ScalarFunctionNameContext>(0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSimpleId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSimpleId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIdContext simpleId() {
		SimpleIdContext _localctx = new SimpleIdContext(Context, State);
		EnterRule(_localctx, 598, RULE_simpleId);
		try {
			State = 6617;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,982,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6608;
				Match(ID);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6609;
				charsetNameBase();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6610;
				transactionLevelBase();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6611;
				engineNameBase();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6612;
				privilegesBase();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6613;
				intervalTypeBase();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6614;
				dataTypeBase();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6615;
				keywordsCanBeId();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6616;
				scalarFunctionName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DottedIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_ID() { return GetToken(MariaDBParser.DOT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MariaDBParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dottedId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDottedId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDottedId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDottedId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DottedIdContext dottedId() {
		DottedIdContext _localctx = new DottedIdContext(Context, State);
		EnterRule(_localctx, 600, RULE_dottedId);
		try {
			State = 6622;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DOT_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6619;
				Match(DOT_ID);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6620;
				Match(DOT);
				State = 6621;
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_LITERAL() { return GetToken(MariaDBParser.DECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZERO_DECIMAL() { return GetToken(MariaDBParser.ZERO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_DECIMAL() { return GetToken(MariaDBParser.ONE_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TWO_DECIMAL() { return GetToken(MariaDBParser.TWO_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MariaDBParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalLiteralContext decimalLiteral() {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
		EnterRule(_localctx, 602, RULE_decimalLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6624;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 1163)) & ~0x3f) == 0 && ((1L << (_la - 1163)) & 10247L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileSizeLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILESIZE_LITERAL() { return GetToken(MariaDBParser.FILESIZE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileSizeLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFileSizeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFileSizeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileSizeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileSizeLiteralContext fileSizeLiteral() {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(Context, State);
		EnterRule(_localctx, 604, RULE_fileSizeLiteral);
		try {
			State = 6628;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILESIZE_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6626;
				Match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6627;
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MariaDBParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MariaDBParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_NATIONAL_STRING_LITERAL() { return GetToken(MariaDBParser.START_NATIONAL_STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MariaDBParser.STRING_CHARSET_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MariaDBParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 606, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			State = 6653;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,991,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6635;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					State = 6631;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						State = 6630;
						Match(STRING_CHARSET_NAME);
						}
					}

					State = 6633;
					Match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					State = 6634;
					Match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6638;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 6637;
						Match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 6640;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,987,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6647;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					State = 6643;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						State = 6642;
						Match(STRING_CHARSET_NAME);
						}
					}

					State = 6645;
					Match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					State = 6646;
					Match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 6651;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,990,Context) ) {
				case 1:
					{
					State = 6649;
					Match(COLLATE);
					State = 6650;
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MariaDBParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MariaDBParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext booleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 608, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6655;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexadecimalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEXADECIMAL_LITERAL() { return GetToken(MariaDBParser.HEXADECIMAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MariaDBParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexadecimalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexadecimalLiteralContext hexadecimalLiteral() {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(Context, State);
		EnterRule(_localctx, 610, RULE_hexadecimalLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				State = 6657;
				Match(STRING_CHARSET_NAME);
				}
			}

			State = 6660;
			Match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullNotnullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MariaDBParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MariaDBParser.NULL_SPEC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullNotnull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterNullNotnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitNullNotnull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullNotnull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullNotnullContext nullNotnull() {
		NullNotnullContext _localctx = new NullNotnullContext(Context, State);
		EnterRule(_localctx, 612, RULE_nullNotnull);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 6662;
				Match(NOT);
				}
			}

			State = 6665;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IToken nullLiteral;
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MariaDBParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HexadecimalLiteralContext hexadecimalLiteral() {
			return GetRuleContext<HexadecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_LITERAL() { return GetToken(MariaDBParser.REAL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_STRING() { return GetToken(MariaDBParser.BIT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MariaDBParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MariaDBParser.NULL_SPEC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 614, RULE_constant);
		int _la;
		try {
			State = 6679;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,995,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6667;
				stringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6668;
				decimalLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6669;
				Match(MINUS);
				State = 6670;
				decimalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6671;
				hexadecimalLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6672;
				booleanLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6673;
				Match(REAL_LITERAL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6674;
				Match(BIT_STRING);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 6675;
					Match(NOT);
					}
				}

				State = 6678;
				_localctx.nullLiteral = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					_localctx.nullLiteral = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
	 
		public DataTypeContext() { }
		public virtual void CopyFrom(DataTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UuidDataTypeContext : DataTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID() { return GetToken(MariaDBParser.UUID, 0); }
		public UuidDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUuidDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUuidDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUuidDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SpatialDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MariaDBParser.GEOMETRYCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLECTION() { return GetToken(MariaDBParser.GEOMCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING() { return GetToken(MariaDBParser.LINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING() { return GetToken(MariaDBParser.MULTILINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT() { return GetToken(MariaDBParser.MULTIPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON() { return GetToken(MariaDBParser.MULTIPOLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(MariaDBParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(MariaDBParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MariaDBParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY() { return GetToken(MariaDBParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSpatialDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSpatialDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpatialDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongVarbinaryDataTypeContext : DataTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MariaDBParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY() { return GetToken(MariaDBParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLongVarbinaryDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLongVarbinaryDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongVarbinaryDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollectionDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public CollectionOptionsContext collectionOptions() {
			return GetRuleContext<CollectionOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(MariaDBParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET() { return GetToken(MariaDBParser.SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MariaDBParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CollectionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCollectionDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCollectionDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NationalVaryingStringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(MariaDBParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(MariaDBParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MariaDBParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MariaDBParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MariaDBParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterNationalVaryingStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitNationalVaryingStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNationalVaryingStringDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DimensionDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYINT() { return GetToken(MariaDBParser.TINYINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT() { return GetToken(MariaDBParser.SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMINT() { return GetToken(MariaDBParser.MEDIUMINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MariaDBParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MariaDBParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT() { return GetToken(MariaDBParser.BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIDDLEINT() { return GetToken(MariaDBParser.MIDDLEINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT1() { return GetToken(MariaDBParser.INT1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT2() { return GetToken(MariaDBParser.INT2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT3() { return GetToken(MariaDBParser.INT3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT4() { return GetToken(MariaDBParser.INT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT8() { return GetToken(MariaDBParser.INT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SIGNED() { return GetTokens(MariaDBParser.SIGNED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED(int i) {
			return GetToken(MariaDBParser.SIGNED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNSIGNED() { return GetTokens(MariaDBParser.UNSIGNED); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED(int i) {
			return GetToken(MariaDBParser.UNSIGNED, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ZEROFILL() { return GetTokens(MariaDBParser.ZEROFILL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZEROFILL(int i) {
			return GetToken(MariaDBParser.ZEROFILL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL() { return GetToken(MariaDBParser.REAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoDimensionContext lengthTwoDimension() {
			return GetRuleContext<LengthTwoDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(MariaDBParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION() { return GetToken(MariaDBParser.PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MariaDBParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC() { return GetToken(MariaDBParser.DEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MariaDBParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC() { return GetToken(MariaDBParser.NUMERIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(MariaDBParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT4() { return GetToken(MariaDBParser.FLOAT4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT8() { return GetToken(MariaDBParser.FLOAT8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return GetRuleContext<LengthTwoOptionalDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(MariaDBParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MariaDBParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MariaDBParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MariaDBParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MariaDBParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY() { return GetToken(MariaDBParser.VARBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB() { return GetToken(MariaDBParser.BLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MariaDBParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDimensionDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDimensionDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimensionDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MariaDBParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MariaDBParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MariaDBParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYTEXT() { return GetToken(MariaDBParser.TINYTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MariaDBParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMTEXT() { return GetToken(MariaDBParser.MEDIUMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGTEXT() { return GetToken(MariaDBParser.LONGTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MariaDBParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR() { return GetToken(MariaDBParser.NVARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MariaDBParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING() { return GetToken(MariaDBParser.VARYING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BINARY() { return GetTokens(MariaDBParser.BINARY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY(int i) {
			return GetToken(MariaDBParser.BINARY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MariaDBParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public StringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongVarcharDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG() { return GetToken(MariaDBParser.LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MariaDBParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MariaDBParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MariaDBParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public LongVarcharDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLongVarcharDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLongVarcharDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongVarcharDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NationalStringDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL() { return GetToken(MariaDBParser.NATIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR() { return GetToken(MariaDBParser.VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(MariaDBParser.CHARACTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MariaDBParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MariaDBParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MariaDBParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterNationalStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitNationalStringDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNationalStringDataType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleDataTypeContext : DataTypeContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MariaDBParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYBLOB() { return GetToken(MariaDBParser.TINYBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMBLOB() { return GetToken(MariaDBParser.MEDIUMBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGBLOB() { return GetToken(MariaDBParser.LONGBLOB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MariaDBParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MariaDBParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MariaDBParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSimpleDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSimpleDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 616, RULE_dataType);
		int _la;
		try {
			int _alt;
			State = 6804;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1023,Context) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6681;
				((StringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & 31239L) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6683;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARYING) {
					{
					State = 6682;
					Match(VARYING);
					}
				}

				State = 6686;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,997,Context) ) {
				case 1:
					{
					State = 6685;
					lengthOneDimension();
					}
					break;
				}
				State = 6689;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,998,Context) ) {
				case 1:
					{
					State = 6688;
					Match(BINARY);
					}
					break;
				}
				State = 6694;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,999,Context) ) {
				case 1:
					{
					State = 6691;
					charSet();
					State = 6692;
					charsetName();
					}
					break;
				}
				State = 6699;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1000,Context) ) {
				case 1:
					{
					State = 6696;
					Match(COLLATE);
					State = 6697;
					collationName();
					}
					break;
				case 2:
					{
					State = 6698;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6701;
				Match(NATIONAL);
				State = 6702;
				((NationalStringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6704;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1001,Context) ) {
				case 1:
					{
					State = 6703;
					lengthOneDimension();
					}
					break;
				}
				State = 6707;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1002,Context) ) {
				case 1:
					{
					State = 6706;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6709;
				Match(NCHAR);
				State = 6710;
				((NationalStringDataTypeContext)_localctx).typeName = Match(VARCHAR);
				State = 6712;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1003,Context) ) {
				case 1:
					{
					State = 6711;
					lengthOneDimension();
					}
					break;
				}
				State = 6715;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1004,Context) ) {
				case 1:
					{
					State = 6714;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 6717;
				Match(NATIONAL);
				State = 6718;
				((NationalVaryingStringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6719;
				Match(VARYING);
				State = 6721;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1005,Context) ) {
				case 1:
					{
					State = 6720;
					lengthOneDimension();
					}
					break;
				}
				State = 6724;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1006,Context) ) {
				case 1:
					{
					State = 6723;
					Match(BINARY);
					}
					break;
				}
				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 6726;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & 4095L) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6728;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1007,Context) ) {
				case 1:
					{
					State = 6727;
					lengthOneDimension();
					}
					break;
				}
				State = 6733;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1008,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6730;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6735;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1008,Context);
				}
				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 6736;
				((DimensionDataTypeContext)_localctx).typeName = Match(REAL);
				State = 6738;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1009,Context) ) {
				case 1:
					{
					State = 6737;
					lengthTwoDimension();
					}
					break;
				}
				State = 6743;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1010,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6740;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6745;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1010,Context);
				}
				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 6746;
				((DimensionDataTypeContext)_localctx).typeName = Match(DOUBLE);
				State = 6748;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRECISION) {
					{
					State = 6747;
					Match(PRECISION);
					}
				}

				State = 6751;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1012,Context) ) {
				case 1:
					{
					State = 6750;
					lengthTwoDimension();
					}
					break;
				}
				State = 6756;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1013,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6753;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6758;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1013,Context);
				}
				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 6759;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & 63L) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6761;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1014,Context) ) {
				case 1:
					{
					State = 6760;
					lengthTwoOptionalDimension();
					}
					break;
				}
				State = 6766;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1015,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 6763;
						_la = TokenStream.LA(1);
						if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						} 
					}
					State = 6768;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1015,Context);
				}
				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 6769;
				((SimpleDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & 4237313L) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 6770;
				((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 221)) & ~0x3f) == 0 && ((1L << (_la - 221)) & 2831L) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6772;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1016,Context) ) {
				case 1:
					{
					State = 6771;
					lengthOneDimension();
					}
					break;
				}
				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 6774;
				((CollectionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6775;
				collectionOptions();
				State = 6777;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1017,Context) ) {
				case 1:
					{
					State = 6776;
					Match(BINARY);
					}
					break;
				}
				State = 6782;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1018,Context) ) {
				case 1:
					{
					State = 6779;
					charSet();
					State = 6780;
					charsetName();
					}
					break;
				}
				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 6784;
				((SpatialDataTypeContext)_localctx).typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==JSON || ((((_la - 814)) & ~0x3f) == 0 && ((1L << (_la - 814)) & 511L) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 6785;
				((LongVarcharDataTypeContext)_localctx).typeName = Match(LONG);
				State = 6787;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==VARCHAR) {
					{
					State = 6786;
					Match(VARCHAR);
					}
				}

				State = 6790;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1020,Context) ) {
				case 1:
					{
					State = 6789;
					Match(BINARY);
					}
					break;
				}
				State = 6795;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1021,Context) ) {
				case 1:
					{
					State = 6792;
					charSet();
					State = 6793;
					charsetName();
					}
					break;
				}
				State = 6799;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1022,Context) ) {
				case 1:
					{
					State = 6797;
					Match(COLLATE);
					State = 6798;
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 6801;
				Match(LONG);
				State = 6802;
				Match(VARBINARY);
				}
				break;
			case 15:
				_localctx = new UuidDataTypeContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 6803;
				Match(UUID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollectionOptionContext[] collectionOption() {
			return GetRuleContexts<CollectionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollectionOptionContext collectionOption(int i) {
			return GetRuleContext<CollectionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCollectionOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCollectionOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionOptionsContext collectionOptions() {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(Context, State);
		EnterRule(_localctx, 618, RULE_collectionOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6806;
			Match(LR_BRACKET);
			State = 6807;
			collectionOption();
			State = 6812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6808;
				Match(COMMA);
				State = 6809;
				collectionOption();
				}
				}
				State = 6814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6815;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public CollectionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCollectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCollectionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionOptionContext collectionOption() {
		CollectionOptionContext _localctx = new CollectionOptionContext(Context, State);
		EnterRule(_localctx, 620, RULE_collectionOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6817;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConvertedDataTypeContext : ParserRuleContext {
		public IToken typeName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MariaDBParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL() { return GetToken(MariaDBParser.DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED() { return GetToken(MariaDBParser.SIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED() { return GetToken(MariaDBParser.UNSIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY() { return GetToken(MariaDBParser.ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MariaDBParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MariaDBParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MariaDBParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MariaDBParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MariaDBParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MariaDBParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(MariaDBParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(MariaDBParser.INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LengthOneDimensionContext lengthOneDimension() {
			return GetRuleContext<LengthOneDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharSetContext charSet() {
			return GetRuleContext<CharSetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return GetRuleContext<LengthTwoOptionalDimensionContext>(0);
		}
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_convertedDataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterConvertedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitConvertedDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConvertedDataType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConvertedDataTypeContext convertedDataType() {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(Context, State);
		EnterRule(_localctx, 622, RULE_convertedDataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6841;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY:
			case NCHAR:
				{
				State = 6819;
				_localctx.typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					_localctx.typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6821;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6820;
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				{
				State = 6823;
				_localctx.typeName = Match(CHAR);
				State = 6825;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6824;
					lengthOneDimension();
					}
				}

				State = 6830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CHARACTER || _la==CHAR || _la==CHARSET) {
					{
					State = 6827;
					charSet();
					State = 6828;
					charsetName();
					}
				}

				}
				break;
			case INT:
			case INTEGER:
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				{
				State = 6832;
				_localctx.typeName = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 203)) & ~0x3f) == 0 && ((1L << (_la - 203)) & 1441857L) != 0) || _la==JSON) ) {
					_localctx.typeName = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case DECIMAL:
				{
				State = 6833;
				_localctx.typeName = Match(DECIMAL);
				State = 6835;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_BRACKET) {
					{
					State = 6834;
					lengthTwoOptionalDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				{
				State = 6837;
				_la = TokenStream.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6839;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTEGER) {
					{
					State = 6838;
					Match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 6844;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ARRAY) {
				{
				State = 6843;
				Match(ARRAY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthOneDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthOneDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLengthOneDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLengthOneDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthOneDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthOneDimensionContext lengthOneDimension() {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(Context, State);
		EnterRule(_localctx, 624, RULE_lengthOneDimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6846;
			Match(LR_BRACKET);
			State = 6847;
			decimalLiteral();
			State = 6848;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthTwoDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MariaDBParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthTwoDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLengthTwoDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLengthTwoDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthTwoDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthTwoDimensionContext lengthTwoDimension() {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(Context, State);
		EnterRule(_localctx, 626, RULE_lengthTwoDimension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6850;
			Match(LR_BRACKET);
			State = 6851;
			decimalLiteral();
			State = 6852;
			Match(COMMA);
			State = 6853;
			decimalLiteral();
			State = 6854;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LengthTwoOptionalDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MariaDBParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lengthTwoOptionalDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLengthTwoOptionalDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLengthTwoOptionalDimension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLengthTwoOptionalDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(Context, State);
		EnterRule(_localctx, 628, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6856;
			Match(LR_BRACKET);
			State = 6857;
			decimalLiteral();
			State = 6860;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 6858;
				Match(COMMA);
				State = 6859;
				decimalLiteral();
				}
			}

			State = 6862;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UidListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext[] uid() {
			return GetRuleContexts<UidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid(int i) {
			return GetRuleContext<UidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uidList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUidList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUidList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUidList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UidListContext uidList() {
		UidListContext _localctx = new UidListContext(Context, State);
		EnterRule(_localctx, 630, RULE_uidList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6864;
			uid();
			State = 6869;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1033,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6865;
					Match(COMMA);
					State = 6866;
					uid();
					}
					} 
				}
				State = 6871;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1033,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablesContext tables() {
		TablesContext _localctx = new TablesContext(Context, State);
		EnterRule(_localctx, 632, RULE_tables);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6872;
			tableName();
			State = 6877;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1034,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 6873;
					Match(COMMA);
					State = 6874;
					tableName();
					}
					} 
				}
				State = 6879;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1034,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexColumnNamesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNameContext[] indexColumnName() {
			return GetRuleContexts<IndexColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexColumnNameContext indexColumnName(int i) {
			return GetRuleContext<IndexColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexColumnNames; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIndexColumnNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIndexColumnNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexColumnNames(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexColumnNamesContext indexColumnNames() {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(Context, State);
		EnterRule(_localctx, 634, RULE_indexColumnNames);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6880;
			Match(LR_BRACKET);
			State = 6881;
			indexColumnName();
			State = 6886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6882;
				Match(COMMA);
				State = 6883;
				indexColumnName();
				}
				}
				State = 6888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 6889;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 636, RULE_expressions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6891;
			expression(0);
			State = 6896;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6892;
				Match(COMMA);
				State = 6893;
				expression(0);
				}
				}
				State = 6898;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsWithDefaultsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrDefaultContext[] expressionOrDefault() {
			return GetRuleContexts<ExpressionOrDefaultContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return GetRuleContext<ExpressionOrDefaultContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionsWithDefaults; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterExpressionsWithDefaults(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitExpressionsWithDefaults(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionsWithDefaults(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsWithDefaultsContext expressionsWithDefaults() {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(Context, State);
		EnterRule(_localctx, 638, RULE_expressionsWithDefaults);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6899;
			expressionOrDefault();
			State = 6904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6900;
				Match(COMMA);
				State = 6901;
				expressionOrDefault();
				}
				}
				State = 6906;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitConstants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantsContext constants() {
		ConstantsContext _localctx = new ConstantsContext(Context, State);
		EnterRule(_localctx, 640, RULE_constants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6907;
			constant();
			State = 6912;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6908;
				Match(COMMA);
				State = 6909;
				constant();
				}
				}
				State = 6914;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStringsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(MariaDBParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(MariaDBParser.STRING_LITERAL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStrings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSimpleStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSimpleStrings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleStrings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStringsContext simpleStrings() {
		SimpleStringsContext _localctx = new SimpleStringsContext(Context, State);
		EnterRule(_localctx, 642, RULE_simpleStrings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6915;
			Match(STRING_LITERAL);
			State = 6920;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6916;
				Match(COMMA);
				State = 6917;
				Match(STRING_LITERAL);
				}
				}
				State = 6922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserVariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOCAL_ID() { return GetTokens(MariaDBParser.LOCAL_ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID(int i) {
			return GetToken(MariaDBParser.LOCAL_ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userVariables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUserVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUserVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUserVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UserVariablesContext userVariables() {
		UserVariablesContext _localctx = new UserVariablesContext(Context, State);
		EnterRule(_localctx, 644, RULE_userVariables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6923;
			Match(LOCAL_ID);
			State = 6928;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 6924;
				Match(COMMA);
				State = 6925;
				Match(LOCAL_ID);
				}
				}
				State = 6930;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_LITERAL() { return GetToken(MariaDBParser.NULL_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(MariaDBParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext[] currentTimestamp() {
			return GetRuleContexts<CurrentTimestampContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CurrentTimestampContext currentTimestamp(int i) {
			return GetRuleContext<CurrentTimestampContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(MariaDBParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE() { return GetToken(MariaDBParser.UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTVAL() { return GetToken(MariaDBParser.LASTVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXTVAL() { return GetToken(MariaDBParser.NEXTVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MariaDBParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREVIOUS() { return GetToken(MariaDBParser.PREVIOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MariaDBParser.NEXT, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 646, RULE_defaultValue);
		int _la;
		try {
			State = 6966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1043,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6931;
				Match(NULL_LITERAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6932;
				Match(CAST);
				State = 6933;
				Match(LR_BRACKET);
				State = 6934;
				expression(0);
				State = 6935;
				Match(AS);
				State = 6936;
				convertedDataType();
				State = 6937;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6940;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1041,Context) ) {
				case 1:
					{
					State = 6939;
					unaryOperator();
					}
					break;
				}
				State = 6942;
				constant();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6943;
				currentTimestamp();
				State = 6947;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1042,Context) ) {
				case 1:
					{
					State = 6944;
					Match(ON);
					State = 6945;
					Match(UPDATE);
					State = 6946;
					currentTimestamp();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6949;
				Match(LR_BRACKET);
				State = 6950;
				expression(0);
				State = 6951;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6953;
				_la = TokenStream.LA(1);
				if ( !(_la==LASTVAL || _la==NEXTVAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6954;
				Match(LR_BRACKET);
				State = 6955;
				fullId();
				State = 6956;
				Match(RR_BRACKET);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6958;
				Match(LR_BRACKET);
				State = 6959;
				_la = TokenStream.LA(1);
				if ( !(_la==NEXT || _la==PREVIOUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6960;
				Match(VALUE);
				State = 6961;
				Match(FOR);
				State = 6962;
				fullId();
				State = 6963;
				Match(RR_BRACKET);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6965;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrentTimestampContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(MariaDBParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MariaDBParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MariaDBParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(MariaDBParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURDATE() { return GetToken(MariaDBParser.CURDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURTIME() { return GetToken(MariaDBParser.CURTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currentTimestamp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCurrentTimestamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCurrentTimestamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentTimestamp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrentTimestampContext currentTimestamp() {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(Context, State);
		EnterRule(_localctx, 648, RULE_currentTimestamp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6982;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case LOCALTIMESTAMP:
				{
				State = 6968;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & 143L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6974;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1045,Context) ) {
				case 1:
					{
					State = 6969;
					Match(LR_BRACKET);
					State = 6971;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 1163)) & ~0x3f) == 0 && ((1L << (_la - 1163)) & 10247L) != 0)) {
						{
						State = 6970;
						decimalLiteral();
						}
					}

					State = 6973;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case NOW:
				{
				State = 6976;
				Match(NOW);
				State = 6977;
				Match(LR_BRACKET);
				State = 6979;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 1163)) & ~0x3f) == 0 && ((1L << (_la - 1163)) & 10247L) != 0)) {
					{
					State = 6978;
					decimalLiteral();
					}
				}

				State = 6981;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionOrDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionOrDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterExpressionOrDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitExpressionOrDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionOrDefault(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionOrDefaultContext expressionOrDefault() {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(Context, State);
		EnterRule(_localctx, 650, RULE_expressionOrDefault);
		try {
			State = 6986;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1048,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6984;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6985;
				Match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MariaDBParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MariaDBParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIfExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIfExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsContext ifExists() {
		IfExistsContext _localctx = new IfExistsContext(Context, State);
		EnterRule(_localctx, 652, RULE_ifExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6988;
			Match(IF);
			State = 6989;
			Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfNotExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MariaDBParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MariaDBParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifNotExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIfNotExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIfNotExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfNotExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfNotExistsContext ifNotExists() {
		IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
		EnterRule(_localctx, 654, RULE_ifNotExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6991;
			Match(IF);
			State = 6992;
			Match(NOT);
			State = 6993;
			Match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrReplaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MariaDBParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MariaDBParser.REPLACE, 0); }
		public OrReplaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orReplace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterOrReplace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitOrReplace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrReplace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrReplaceContext orReplace() {
		OrReplaceContext _localctx = new OrReplaceContext(Context, State);
		EnterRule(_localctx, 656, RULE_orReplace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6995;
			Match(OR);
			State = 6996;
			Match(REPLACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitNowaitClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MariaDBParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(MariaDBParser.NOWAIT, 0); }
		public WaitNowaitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitNowaitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterWaitNowaitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitWaitNowaitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitNowaitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitNowaitClauseContext waitNowaitClause() {
		WaitNowaitClauseContext _localctx = new WaitNowaitClauseContext(Context, State);
		EnterRule(_localctx, 658, RULE_waitNowaitClause);
		try {
			State = 7001;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6998;
				Match(WAIT);
				State = 6999;
				decimalLiteral();
				}
				break;
			case NOWAIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7000;
				Match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WaitNowaitClauseContext waitNowaitClause() {
			return GetRuleContext<WaitNowaitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_() { return GetToken(MariaDBParser.SKIP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED() { return GetToken(MariaDBParser.LOCKED, 0); }
		public LockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockOptionContext lockOption() {
		LockOptionContext _localctx = new LockOptionContext(Context, State);
		EnterRule(_localctx, 660, RULE_lockOption);
		try {
			State = 7006;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOWAIT:
			case WAIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7003;
				waitNowaitClause();
				}
				break;
			case SKIP_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7004;
				Match(SKIP_);
				State = 7005;
				Match(LOCKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SpecificFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpecificFunctionContext specificFunction() {
			return GetRuleContext<SpecificFunctionContext>(0);
		}
		public SpecificFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSpecificFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSpecificFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecificFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PasswordFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public PasswordFunctionClauseContext passwordFunctionClause() {
			return GetRuleContext<PasswordFunctionClauseContext>(0);
		}
		public PasswordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPasswordFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPasswordFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UdfFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullIdContext fullId() {
			return GetRuleContext<FullIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public UdfFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUdfFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUdfFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUdfFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonAggregateFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return GetRuleContext<NonAggregateWindowedFunctionContext>(0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterNonAggregateFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitNonAggregateFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAggregateFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AggregateFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return GetRuleContext<AggregateWindowedFunctionContext>(0);
		}
		public AggregateFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAggregateFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAggregateFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ScalarFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarFunctionNameContext scalarFunctionName() {
			return GetRuleContext<ScalarFunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		public ScalarFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterScalarFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitScalarFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 662, RULE_functionCall);
		try {
			State = 7026;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1053,Context) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 7008;
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 7009;
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 7010;
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 7011;
				scalarFunctionName();
				State = 7012;
				Match(LR_BRACKET);
				State = 7014;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1051,Context) ) {
				case 1:
					{
					State = 7013;
					functionArgs();
					}
					break;
				}
				State = 7016;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 7018;
				fullId();
				State = 7019;
				Match(LR_BRACKET);
				State = 7021;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1052,Context) ) {
				case 1:
					{
					State = 7020;
					functionArgs();
					}
					break;
				}
				State = 7023;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new PasswordFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 7025;
				passwordFunctionClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificFunctionContext : ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificFunction; } }
	 
		public SpecificFunctionContext() { }
		public virtual void CopyFrom(SpecificFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PositionFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(MariaDBParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MariaDBParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPositionFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPositionFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrimFunctionCallContext : SpecificFunctionContext {
		public IToken positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(MariaDBParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH() { return GetToken(MariaDBParser.BOTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING() { return GetToken(MariaDBParser.LEADING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING() { return GetToken(MariaDBParser.TRAILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTrimFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTrimFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrimFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonValueFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(MariaDBParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MariaDBParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING() { return GetToken(MariaDBParser.RETURNING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonOnEmptyContext jsonOnEmpty() {
			return GetRuleContext<JsonOnEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonOnErrorContext jsonOnError() {
			return GetRuleContext<JsonOnErrorContext>(0);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterJsonValueFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitJsonValueFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonValueFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseFunctionCallContext : SpecificFunctionContext {
		public FunctionArgContext elseArg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MariaDBParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MariaDBParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext[] caseFuncAlternative() {
			return GetRuleContexts<CaseFuncAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return GetRuleContext<CaseFuncAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MariaDBParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCaseFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCaseFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExtractFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT() { return GetToken(MariaDBParser.EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterExtractFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitExtractFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DataTypeFunctionCallContext : SpecificFunctionContext {
		public IToken separator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT() { return GetToken(MariaDBParser.CONVERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConvertedDataTypeContext convertedDataType() {
			return GetRuleContext<ConvertedDataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MariaDBParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MariaDBParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST() { return GetToken(MariaDBParser.CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDataTypeFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDataTypeFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValuesFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES() { return GetToken(MariaDBParser.VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterValuesFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitValuesFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseExpressionFunctionCallContext : SpecificFunctionContext {
		public FunctionArgContext elseArg;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE() { return GetToken(MariaDBParser.CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MariaDBParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext[] caseFuncAlternative() {
			return GetRuleContexts<CaseFuncAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return GetRuleContext<CaseFuncAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(MariaDBParser.ELSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCaseExpressionFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCaseExpressionFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpressionFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(MariaDBParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(MariaDBParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MariaDBParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURDATE() { return GetToken(MariaDBParser.CURDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURTIME() { return GetToken(MariaDBParser.CURTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(MariaDBParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MariaDBParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIMESTAMP() { return GetToken(MariaDBParser.UTC_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MariaDBParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSimpleFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSimpleFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharFunctionCallContext : SpecificFunctionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MariaDBParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING() { return GetToken(MariaDBParser.USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CharFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCharFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCharFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WeightFunctionCallContext : SpecificFunctionContext {
		public IToken stringFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING() { return GetToken(MariaDBParser.WEIGHT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_BRACKET() { return GetTokens(MariaDBParser.LR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET(int i) {
			return GetToken(MariaDBParser.LR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RR_BRACKET() { return GetTokens(MariaDBParser.RR_BRACKET); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET(int i) {
			return GetToken(MariaDBParser.RR_BRACKET, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(MariaDBParser.AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelsInWeightStringContext levelsInWeightString() {
			return GetRuleContext<LevelsInWeightStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(MariaDBParser.CHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MariaDBParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterWeightFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitWeightFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeightFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetFormatFunctionCallContext : SpecificFunctionContext {
		public IToken datetimeFormat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT() { return GetToken(MariaDBParser.GET_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(MariaDBParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MariaDBParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MariaDBParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MariaDBParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterGetFormatFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitGetFormatFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetFormatFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubstrFunctionCallContext : SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM() { return GetToken(MariaDBParser.FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTR() { return GetToken(MariaDBParser.SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(MariaDBParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(MariaDBParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSubstrFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSubstrFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubstrFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecificFunctionContext specificFunction() {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(Context, State);
		EnterRule(_localctx, 664, RULE_specificFunction);
		int _la;
		try {
			State = 7206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1077,Context) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 7028;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT_USER || _la==SCHEMA || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & 262207L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7031;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1054,Context) ) {
				case 1:
					{
					State = 7029;
					Match(LR_BRACKET);
					State = 7030;
					Match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 7033;
				Match(CONVERT);
				State = 7034;
				Match(LR_BRACKET);
				State = 7035;
				expression(0);
				State = 7036;
				((DataTypeFunctionCallContext)_localctx).separator = Match(COMMA);
				State = 7037;
				convertedDataType();
				State = 7038;
				Match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 7040;
				Match(CONVERT);
				State = 7041;
				Match(LR_BRACKET);
				State = 7042;
				expression(0);
				State = 7043;
				Match(USING);
				State = 7044;
				charsetName();
				State = 7045;
				Match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 7047;
				Match(CAST);
				State = 7048;
				Match(LR_BRACKET);
				State = 7049;
				expression(0);
				State = 7050;
				Match(AS);
				State = 7051;
				convertedDataType();
				State = 7052;
				Match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 7054;
				Match(VALUES);
				State = 7055;
				Match(LR_BRACKET);
				State = 7056;
				fullColumnName();
				State = 7057;
				Match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 7059;
				Match(CASE);
				State = 7060;
				expression(0);
				State = 7062;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7061;
					caseFuncAlternative();
					}
					}
					State = 7064;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 7068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 7066;
					Match(ELSE);
					State = 7067;
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				State = 7070;
				Match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 7072;
				Match(CASE);
				State = 7074;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7073;
					caseFuncAlternative();
					}
					}
					State = 7076;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN );
				State = 7080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE) {
					{
					State = 7078;
					Match(ELSE);
					State = 7079;
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				State = 7082;
				Match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 7084;
				Match(CHAR);
				State = 7085;
				Match(LR_BRACKET);
				State = 7086;
				functionArgs();
				State = 7089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING) {
					{
					State = 7087;
					Match(USING);
					State = 7088;
					charsetName();
					}
				}

				State = 7091;
				Match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 7093;
				Match(POSITION);
				State = 7094;
				Match(LR_BRACKET);
				State = 7097;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1060,Context) ) {
				case 1:
					{
					State = 7095;
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 7096;
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				State = 7099;
				Match(IN);
				State = 7102;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1061,Context) ) {
				case 1:
					{
					State = 7100;
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 7101;
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				State = 7104;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 7106;
				_la = TokenStream.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7107;
				Match(LR_BRACKET);
				State = 7110;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1062,Context) ) {
				case 1:
					{
					State = 7108;
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 7109;
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 7112;
				Match(FROM);
				State = 7115;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1063,Context) ) {
				case 1:
					{
					State = 7113;
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					State = 7114;
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 7122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR) {
					{
					State = 7117;
					Match(FOR);
					State = 7120;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1064,Context) ) {
					case 1:
						{
						State = 7118;
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						State = 7119;
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				State = 7124;
				Match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 7126;
				Match(TRIM);
				State = 7127;
				Match(LR_BRACKET);
				State = 7128;
				((TrimFunctionCallContext)_localctx).positioinForm = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7131;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1066,Context) ) {
				case 1:
					{
					State = 7129;
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 7130;
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 7133;
				Match(FROM);
				State = 7136;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1067,Context) ) {
				case 1:
					{
					State = 7134;
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 7135;
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 7138;
				Match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 7140;
				Match(TRIM);
				State = 7141;
				Match(LR_BRACKET);
				State = 7144;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1068,Context) ) {
				case 1:
					{
					State = 7142;
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 7143;
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 7146;
				Match(FROM);
				State = 7149;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1069,Context) ) {
				case 1:
					{
					State = 7147;
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 7148;
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				State = 7151;
				Match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 7153;
				Match(WEIGHT_STRING);
				State = 7154;
				Match(LR_BRACKET);
				State = 7157;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1070,Context) ) {
				case 1:
					{
					State = 7155;
					stringLiteral();
					}
					break;
				case 2:
					{
					State = 7156;
					expression(0);
					}
					break;
				}
				State = 7165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 7159;
					Match(AS);
					State = 7160;
					((WeightFunctionCallContext)_localctx).stringFormat = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 7161;
					Match(LR_BRACKET);
					State = 7162;
					decimalLiteral();
					State = 7163;
					Match(RR_BRACKET);
					}
				}

				State = 7168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LEVEL) {
					{
					State = 7167;
					levelsInWeightString();
					}
				}

				State = 7170;
				Match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 7172;
				Match(EXTRACT);
				State = 7173;
				Match(LR_BRACKET);
				State = 7174;
				intervalType();
				State = 7175;
				Match(FROM);
				State = 7178;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1073,Context) ) {
				case 1:
					{
					State = 7176;
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					State = 7177;
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				State = 7180;
				Match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 7182;
				Match(GET_FORMAT);
				State = 7183;
				Match(LR_BRACKET);
				State = 7184;
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & 11L) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7185;
				Match(COMMA);
				State = 7186;
				stringLiteral();
				State = 7187;
				Match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 7189;
				Match(JSON_VALUE);
				State = 7190;
				Match(LR_BRACKET);
				State = 7191;
				expression(0);
				State = 7192;
				Match(COMMA);
				State = 7193;
				expression(0);
				State = 7196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING) {
					{
					State = 7194;
					Match(RETURNING);
					State = 7195;
					convertedDataType();
					}
				}

				State = 7199;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1075,Context) ) {
				case 1:
					{
					State = 7198;
					jsonOnEmpty();
					}
					break;
				}
				State = 7202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					State = 7201;
					jsonOnError();
					}
				}

				State = 7204;
				Match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseFuncAlternativeContext : ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN() { return GetToken(MariaDBParser.WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN() { return GetToken(MariaDBParser.THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseFuncAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCaseFuncAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCaseFuncAlternative(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseFuncAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseFuncAlternativeContext caseFuncAlternative() {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(Context, State);
		EnterRule(_localctx, 666, RULE_caseFuncAlternative);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7208;
			Match(WHEN);
			State = 7209;
			_localctx.condition = functionArg();
			State = 7210;
			Match(THEN);
			State = 7211;
			_localctx.consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelsInWeightStringContext : ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelsInWeightString; } }
	 
		public LevelsInWeightStringContext() { }
		public virtual void CopyFrom(LevelsInWeightStringContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LevelWeightRangeContext : LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MariaDBParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MariaDBParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLevelWeightRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLevelWeightRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelWeightRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LevelWeightListContext : LevelsInWeightStringContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MariaDBParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevelInWeightListElementContext[] levelInWeightListElement() {
			return GetRuleContexts<LevelInWeightListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return GetRuleContext<LevelInWeightListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLevelWeightList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLevelWeightList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelWeightList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelsInWeightStringContext levelsInWeightString() {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(Context, State);
		EnterRule(_localctx, 668, RULE_levelsInWeightString);
		int _la;
		try {
			State = 7227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1079,Context) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 7213;
				Match(LEVEL);
				State = 7214;
				levelInWeightListElement();
				State = 7219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7215;
					Match(COMMA);
					State = 7216;
					levelInWeightListElement();
					}
					}
					State = 7221;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 7222;
				Match(LEVEL);
				State = 7223;
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				State = 7224;
				Match(MINUS);
				State = 7225;
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelInWeightListElementContext : ParserRuleContext {
		public IToken orderType;
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral() {
			return GetRuleContext<DecimalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC() { return GetToken(MariaDBParser.ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC() { return GetToken(MariaDBParser.DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(MariaDBParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelInWeightListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLevelInWeightListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLevelInWeightListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelInWeightListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelInWeightListElementContext levelInWeightListElement() {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(Context, State);
		EnterRule(_localctx, 670, RULE_levelInWeightListElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7229;
			decimalLiteral();
			State = 7231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				State = 7230;
				_localctx.orderType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					_localctx.orderType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregateWindowedFunctionContext : ParserRuleContext {
		public IToken aggregator;
		public IToken starArg;
		public IToken separator;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(MariaDBParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(MariaDBParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(MariaDBParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(MariaDBParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT() { return GetToken(MariaDBParser.DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MariaDBParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgsContext functionArgs() {
			return GetRuleContext<FunctionArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MariaDBParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(MariaDBParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(MariaDBParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(MariaDBParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(MariaDBParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV() { return GetToken(MariaDBParser.STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_POP() { return GetToken(MariaDBParser.STDDEV_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_SAMP() { return GetToken(MariaDBParser.STDDEV_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_POP() { return GetToken(MariaDBParser.VAR_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_SAMP() { return GetToken(MariaDBParser.VAR_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE() { return GetToken(MariaDBParser.VARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT() { return GetToken(MariaDBParser.GROUP_CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MariaDBParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MariaDBParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext[] orderByExpression() {
			return GetRuleContexts<OrderByExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByExpressionContext orderByExpression(int i) {
			return GetRuleContext<OrderByExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR() { return GetToken(MariaDBParser.SEPARATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregateWindowedFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterAggregateWindowedFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitAggregateWindowedFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregateWindowedFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregateWindowedFunctionContext aggregateWindowedFunction() {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(Context, State);
		EnterRule(_localctx, 672, RULE_aggregateWindowedFunction);
		int _la;
		try {
			State = 7292;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7233;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & 8400897L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7234;
				Match(LR_BRACKET);
				State = 7236;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1081,Context) ) {
				case 1:
					{
					State = 7235;
					_localctx.aggregator = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						_localctx.aggregator = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 7238;
				functionArg();
				State = 7239;
				Match(RR_BRACKET);
				State = 7241;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1082,Context) ) {
				case 1:
					{
					State = 7240;
					overClause();
					}
					break;
				}
				}
				break;
			case COUNT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7243;
				Match(COUNT);
				State = 7244;
				Match(LR_BRACKET);
				State = 7252;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1084,Context) ) {
				case 1:
					{
					State = 7245;
					_localctx.starArg = Match(STAR);
					}
					break;
				case 2:
					{
					State = 7247;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1083,Context) ) {
					case 1:
						{
						State = 7246;
						_localctx.aggregator = Match(ALL);
						}
						break;
					}
					State = 7249;
					functionArg();
					}
					break;
				case 3:
					{
					State = 7250;
					_localctx.aggregator = Match(DISTINCT);
					State = 7251;
					functionArgs();
					}
					break;
				}
				State = 7254;
				Match(RR_BRACKET);
				State = 7256;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1085,Context) ) {
				case 1:
					{
					State = 7255;
					overClause();
					}
					break;
				}
				}
				break;
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7258;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & 62652423L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7259;
				Match(LR_BRACKET);
				State = 7261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1086,Context) ) {
				case 1:
					{
					State = 7260;
					_localctx.aggregator = Match(ALL);
					}
					break;
				}
				State = 7263;
				functionArg();
				State = 7264;
				Match(RR_BRACKET);
				State = 7266;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1087,Context) ) {
				case 1:
					{
					State = 7265;
					overClause();
					}
					break;
				}
				}
				break;
			case GROUP_CONCAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7268;
				Match(GROUP_CONCAT);
				State = 7269;
				Match(LR_BRACKET);
				State = 7271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1088,Context) ) {
				case 1:
					{
					State = 7270;
					_localctx.aggregator = Match(DISTINCT);
					}
					break;
				}
				State = 7273;
				functionArgs();
				State = 7284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER) {
					{
					State = 7274;
					Match(ORDER);
					State = 7275;
					Match(BY);
					State = 7276;
					orderByExpression();
					State = 7281;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 7277;
						Match(COMMA);
						State = 7278;
						orderByExpression();
						}
						}
						State = 7283;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 7288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR) {
					{
					State = 7286;
					Match(SEPARATOR);
					State = 7287;
					_localctx.separator = Match(STRING_LITERAL);
					}
				}

				State = 7290;
				Match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonAggregateWindowedFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OverClauseContext overClause() {
			return GetRuleContext<OverClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(MariaDBParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(MariaDBParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext[] decimalLiteral() {
			return GetRuleContexts<DecimalLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalLiteralContext decimalLiteral(int i) {
			return GetRuleContext<DecimalLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(MariaDBParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(MariaDBParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST() { return GetToken(MariaDBParser.CUME_DIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(MariaDBParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK() { return GetToken(MariaDBParser.PERCENT_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(MariaDBParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(MariaDBParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE() { return GetToken(MariaDBParser.NTH_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(MariaDBParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonAggregateWindowedFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterNonAggregateWindowedFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitNonAggregateWindowedFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAggregateWindowedFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(Context, State);
		EnterRule(_localctx, 674, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			State = 7332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LAG:
			case LEAD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7294;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7295;
				Match(LR_BRACKET);
				State = 7296;
				expression(0);
				State = 7299;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1093,Context) ) {
				case 1:
					{
					State = 7297;
					Match(COMMA);
					State = 7298;
					decimalLiteral();
					}
					break;
				}
				State = 7303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 7301;
					Match(COMMA);
					State = 7302;
					decimalLiteral();
					}
				}

				State = 7305;
				Match(RR_BRACKET);
				State = 7306;
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7308;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7309;
				Match(LR_BRACKET);
				State = 7310;
				expression(0);
				State = 7311;
				Match(RR_BRACKET);
				State = 7312;
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7314;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & 14339L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7315;
				Match(LR_BRACKET);
				State = 7316;
				Match(RR_BRACKET);
				State = 7317;
				overClause();
				}
				break;
			case NTH_VALUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7318;
				Match(NTH_VALUE);
				State = 7319;
				Match(LR_BRACKET);
				State = 7320;
				expression(0);
				State = 7321;
				Match(COMMA);
				State = 7322;
				decimalLiteral();
				State = 7323;
				Match(RR_BRACKET);
				State = 7324;
				overClause();
				}
				break;
			case NTILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7326;
				Match(NTILE);
				State = 7327;
				Match(LR_BRACKET);
				State = 7328;
				decimalLiteral();
				State = 7329;
				Match(RR_BRACKET);
				State = 7330;
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER() { return GetToken(MariaDBParser.OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterOverClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitOverClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OverClauseContext overClause() {
		OverClauseContext _localctx = new OverClauseContext(Context, State);
		EnterRule(_localctx, 676, RULE_overClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7334;
			Match(OVER);
			State = 7341;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_BRACKET:
				{
				State = 7335;
				Match(LR_BRACKET);
				State = 7337;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1096,Context) ) {
				case 1:
					{
					State = 7336;
					windowSpec();
					}
					break;
				}
				State = 7339;
				Match(RR_BRACKET);
				}
				break;
			case ATTRIBUTE:
			case BODY:
			case BUCKETS:
			case CONDITION:
			case CURRENT:
			case CURRENT_ROLE:
			case CURRENT_USER:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EMPTY:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LATERAL:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case PACKAGE:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case STATEMENT:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case NESTED:
			case ORDINALITY:
			case PATH:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTED:
			case ENCRYPTION:
			case ENCRYPTION_KEY_ID:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTORY:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOCALES:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUERY_RESPONSE_TIME:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case REUSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLAVES:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case TYPES:
			case UNBOUNDED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WSREP_MEMBERSHIP:
			case WSREP_STATUS:
			case X509:
			case XA:
			case XML:
			case YES:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case USER_STATISTICS:
			case CLIENT_STATISTICS:
			case INDEX_STATISTICS:
			case TABLE_STATISTICS:
			case ADMIN:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case EXECUTE:
			case FILE:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case PRIVILEGES:
			case PROCESS:
			case RELOAD:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case ROUTINE:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SHUTDOWN:
			case SUPER:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLES:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICAS:
			case REPLICATION_MASTER_ADMIN:
			case MONITOR:
			case READ_ONLY:
			case REPLAY:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
				{
				State = 7340;
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameClauseContext frameClause() {
			return GetRuleContext<FrameClauseContext>(0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterWindowSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitWindowSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecContext windowSpec() {
		WindowSpecContext _localctx = new WindowSpecContext(Context, State);
		EnterRule(_localctx, 678, RULE_windowSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7344;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1098,Context) ) {
			case 1:
				{
				State = 7343;
				windowName();
				}
				break;
			}
			State = 7347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION) {
				{
				State = 7346;
				partitionClause();
				}
			}

			State = 7350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 7349;
				orderByClause();
				}
			}

			State = 7353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				State = 7352;
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UidContext uid() {
			return GetRuleContext<UidContext>(0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterWindowName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitWindowName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindowName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WindowNameContext windowName() {
		WindowNameContext _localctx = new WindowNameContext(Context, State);
		EnterRule(_localctx, 680, RULE_windowName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7355;
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameUnitsContext frameUnits() {
			return GetRuleContext<FrameUnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameExtentContext frameExtent() {
			return GetRuleContext<FrameExtentContext>(0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFrameClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFrameClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameClauseContext frameClause() {
		FrameClauseContext _localctx = new FrameClauseContext(Context, State);
		EnterRule(_localctx, 682, RULE_frameClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7357;
			frameUnits();
			State = 7358;
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameUnitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MariaDBParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE() { return GetToken(MariaDBParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameUnits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFrameUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFrameUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameUnits(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameUnitsContext frameUnits() {
		FrameUnitsContext _localctx = new FrameUnitsContext(Context, State);
		EnterRule(_localctx, 684, RULE_frameUnits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7360;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameExtentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext frameRange() {
			return GetRuleContext<FrameRangeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameBetweenContext frameBetween() {
			return GetRuleContext<FrameBetweenContext>(0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameExtent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFrameExtent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFrameExtent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameExtent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameExtentContext frameExtent() {
		FrameExtentContext _localctx = new FrameExtentContext(Context, State);
		EnterRule(_localctx, 686, RULE_frameExtent);
		try {
			State = 7364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7362;
				frameRange();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7363;
				frameBetween();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameBetweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(MariaDBParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext[] frameRange() {
			return GetRuleContexts<FrameRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FrameRangeContext frameRange(int i) {
			return GetRuleContext<FrameRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MariaDBParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameBetween; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFrameBetween(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFrameBetween(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameBetween(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameBetweenContext frameBetween() {
		FrameBetweenContext _localctx = new FrameBetweenContext(Context, State);
		EnterRule(_localctx, 688, RULE_frameBetween);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7366;
			Match(BETWEEN);
			State = 7367;
			frameRange();
			State = 7368;
			Match(AND);
			State = 7369;
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FrameRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MariaDBParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MariaDBParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(MariaDBParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING() { return GetToken(MariaDBParser.PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING() { return GetToken(MariaDBParser.FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_frameRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFrameRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFrameRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrameRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FrameRangeContext frameRange() {
		FrameRangeContext _localctx = new FrameRangeContext(Context, State);
		EnterRule(_localctx, 690, RULE_frameRange);
		int _la;
		try {
			State = 7378;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7371;
				Match(CURRENT);
				State = 7372;
				Match(ROW);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7373;
				Match(UNBOUNDED);
				State = 7374;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7375;
				expression(0);
				State = 7376;
				_la = TokenStream.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION() { return GetToken(MariaDBParser.PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY() { return GetToken(MariaDBParser.BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPartitionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPartitionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionClauseContext partitionClause() {
		PartitionClauseContext _localctx = new PartitionClauseContext(Context, State);
		EnterRule(_localctx, 692, RULE_partitionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7380;
			Match(PARTITION);
			State = 7381;
			Match(BY);
			State = 7382;
			expression(0);
			State = 7387;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7383;
				Match(COMMA);
				State = 7384;
				expression(0);
				}
				}
				State = 7389;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarFunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameBaseContext functionNameBase() {
			return GetRuleContext<FunctionNameBaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(MariaDBParser.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURDATE() { return GetToken(MariaDBParser.CURDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE() { return GetToken(MariaDBParser.CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME() { return GetToken(MariaDBParser.CURRENT_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MariaDBParser.CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURTIME() { return GetToken(MariaDBParser.CURTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_ADD() { return GetToken(MariaDBParser.DATE_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SUB() { return GetToken(MariaDBParser.DATE_SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(MariaDBParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT() { return GetToken(MariaDBParser.INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIME() { return GetToken(MariaDBParser.LOCALTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALTIMESTAMP() { return GetToken(MariaDBParser.LOCALTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(MariaDBParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(MariaDBParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE() { return GetToken(MariaDBParser.REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTR() { return GetToken(MariaDBParser.SUBSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(MariaDBParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSDATE() { return GetToken(MariaDBParser.SYSDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(MariaDBParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_DATE() { return GetToken(MariaDBParser.UTC_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIME() { return GetToken(MariaDBParser.UTC_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIMESTAMP() { return GetToken(MariaDBParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarFunctionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterScalarFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitScalarFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarFunctionNameContext scalarFunctionName() {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(Context, State);
		EnterRule(_localctx, 694, RULE_scalarFunctionName);
		try {
			State = 7413;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_ARRAYAGG:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_DEPTH:
			case JSON_EXTRACT:
			case JSON_INSERT:
			case JSON_KEYS:
			case JSON_LENGTH:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_OBJECT:
			case JSON_OBJECTAGG:
			case JSON_OVERLAPS:
			case JSON_PRETTY:
			case JSON_QUOTE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_SEARCH:
			case JSON_SET:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_TABLE:
			case JSON_TYPE:
			case JSON_UNQUOTE:
			case JSON_VALID:
			case JSON_VALUE:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case MOD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7390;
				functionNameBase();
				}
				break;
			case ASCII:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7391;
				Match(ASCII);
				}
				break;
			case CURDATE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7392;
				Match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7393;
				Match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7394;
				Match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7395;
				Match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7396;
				Match(CURTIME);
				}
				break;
			case DATE_ADD:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7397;
				Match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7398;
				Match(DATE_SUB);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7399;
				Match(IF);
				}
				break;
			case INSERT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7400;
				Match(INSERT);
				}
				break;
			case LOCALTIME:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7401;
				Match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7402;
				Match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7403;
				Match(MID);
				}
				break;
			case NOW:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7404;
				Match(NOW);
				}
				break;
			case REPLACE:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7405;
				Match(REPLACE);
				}
				break;
			case SUBSTR:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7406;
				Match(SUBSTR);
				}
				break;
			case SUBSTRING:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7407;
				Match(SUBSTRING);
				}
				break;
			case SYSDATE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 7408;
				Match(SYSDATE);
				}
				break;
			case TRIM:
				EnterOuterAlt(_localctx, 20);
				{
				State = 7409;
				Match(TRIM);
				}
				break;
			case UTC_DATE:
				EnterOuterAlt(_localctx, 21);
				{
				State = 7410;
				Match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				EnterOuterAlt(_localctx, 22);
				{
				State = 7411;
				Match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				EnterOuterAlt(_localctx, 23);
				{
				State = 7412;
				Match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PasswordFunctionClauseContext : ParserRuleContext {
		public IToken functionName;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgContext functionArg() {
			return GetRuleContext<FunctionArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MariaDBParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(MariaDBParser.OLD_PASSWORD, 0); }
		public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passwordFunctionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPasswordFunctionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPasswordFunctionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPasswordFunctionClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PasswordFunctionClauseContext passwordFunctionClause() {
		PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(Context, State);
		EnterRule(_localctx, 696, RULE_passwordFunctionClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7415;
			_localctx.functionName = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==OLD_PASSWORD || _la==PASSWORD) ) {
				_localctx.functionName = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7416;
			Match(LR_BRACKET);
			State = 7417;
			functionArg();
			State = 7418;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext[] constant() {
			return GetRuleContexts<ConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext[] fullColumnName() {
			return GetRuleContexts<FullColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName(int i) {
			return GetRuleContext<FullColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext[] functionCall() {
			return GetRuleContexts<FunctionCallContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall(int i) {
			return GetRuleContext<FunctionCallContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFunctionArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFunctionArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgsContext functionArgs() {
		FunctionArgsContext _localctx = new FunctionArgsContext(Context, State);
		EnterRule(_localctx, 698, RULE_functionArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1106,Context) ) {
			case 1:
				{
				State = 7420;
				constant();
				}
				break;
			case 2:
				{
				State = 7421;
				fullColumnName();
				}
				break;
			case 3:
				{
				State = 7422;
				functionCall();
				}
				break;
			case 4:
				{
				State = 7423;
				expression(0);
				}
				break;
			}
			State = 7435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 7426;
				Match(COMMA);
				State = 7431;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1107,Context) ) {
				case 1:
					{
					State = 7427;
					constant();
					}
					break;
				case 2:
					{
					State = 7428;
					fullColumnName();
					}
					break;
				case 3:
					{
					State = 7429;
					functionCall();
					}
					break;
				case 4:
					{
					State = 7430;
					expression(0);
					}
					break;
				}
				}
				}
				State = 7437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFunctionArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFunctionArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 700, RULE_functionArg);
		try {
			State = 7442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1109,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7438;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7439;
				fullColumnName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7440;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7441;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IsExpressionContext : ExpressionContext {
		public IToken testValue;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(MariaDBParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(MariaDBParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(MariaDBParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(MariaDBParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIsExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public IToken notOperator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MariaDBParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogicalOperatorContext logicalOperator() {
			return GetRuleContext<LogicalOperatorContext>(0);
		}
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLogicalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPredicateExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPredicateExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 702;
		EnterRecursionRule(_localctx, 702, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1111,Context) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 7445;
				((NotExpressionContext)_localctx).notOperator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7446;
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7447;
				predicate(0);
				State = 7448;
				Match(IS);
				State = 7450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT) {
					{
					State = 7449;
					Match(NOT);
					}
				}

				State = 7452;
				((IsExpressionContext)_localctx).testValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7454;
				predicate(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7463;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1112,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 7457;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 7458;
					logicalOperator();
					State = 7459;
					expression(4);
					}
					} 
				}
				State = 7465;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1112,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SoundsLikePredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS() { return GetToken(MariaDBParser.SOUNDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MariaDBParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSoundsLikePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSoundsLikePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSoundsLikePredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAtomPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public ExpressionAtomPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterExpressionAtomPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitExpressionAtomPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAtomPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryComparisonPredicateContext : PredicateContext {
		public IToken quantifier;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL() { return GetToken(MariaDBParser.ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(MariaDBParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(MariaDBParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSubqueryComparisonPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSubqueryComparisonPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryComparisonPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonMemberOfPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(MariaDBParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(MariaDBParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterJsonMemberOfPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitJsonMemberOfPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonMemberOfPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryComparisonPredicateContext : PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public BinaryComparisonPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterBinaryComparisonPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitBinaryComparisonPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryComparisonPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(MariaDBParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		public InPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterInPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitInPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BetweenPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN() { return GetToken(MariaDBParser.BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MariaDBParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterBetweenPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitBetweenPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IsNullPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(MariaDBParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NullNotnullContext nullNotnull() {
			return GetRuleContext<NullNotnullContext>(0);
		}
		public IsNullPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIsNullPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIsNullPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LikePredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE() { return GetToken(MariaDBParser.LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(MariaDBParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MariaDBParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLikePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLikePredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikePredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RegexpPredicateContext : PredicateContext {
		public IToken regex;
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP() { return GetToken(MariaDBParser.REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RLIKE() { return GetToken(MariaDBParser.RLIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterRegexpPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitRegexpPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 704;
		EnterRecursionRule(_localctx, 704, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 7467;
			expressionAtom(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7533;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1120,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 7531;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1119,Context) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7469;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 7470;
						comparisonOperator();
						State = 7471;
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7473;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 7475;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 7474;
							Match(NOT);
							}
						}

						State = 7477;
						Match(BETWEEN);
						State = 7478;
						predicate(0);
						State = 7479;
						Match(AND);
						State = 7480;
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7482;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 7483;
						Match(SOUNDS);
						State = 7484;
						Match(LIKE);
						State = 7485;
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7486;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 7488;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 7487;
							Match(NOT);
							}
						}

						State = 7490;
						((RegexpPredicateContext)_localctx).regex = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 7491;
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7492;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 7494;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 7493;
							Match(NOT);
							}
						}

						State = 7496;
						Match(IN);
						State = 7497;
						Match(LR_BRACKET);
						State = 7500;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1116,Context) ) {
						case 1:
							{
							State = 7498;
							selectStatement();
							}
							break;
						case 2:
							{
							State = 7499;
							expressions();
							}
							break;
						}
						State = 7502;
						Match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7504;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 7505;
						Match(IS);
						State = 7506;
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7507;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 7508;
						comparisonOperator();
						State = 7509;
						((SubqueryComparisonPredicateContext)_localctx).quantifier = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 7510;
						Match(LR_BRACKET);
						State = 7511;
						selectStatement();
						State = 7512;
						Match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7514;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 7516;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT) {
							{
							State = 7515;
							Match(NOT);
							}
						}

						State = 7518;
						Match(LIKE);
						State = 7519;
						predicate(0);
						State = 7522;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,1118,Context) ) {
						case 1:
							{
							State = 7520;
							Match(ESCAPE);
							State = 7521;
							Match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 7524;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 7525;
						Match(MEMBER);
						State = 7526;
						Match(OF);
						State = 7527;
						Match(LR_BRACKET);
						State = 7528;
						predicate(0);
						State = 7529;
						Match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				State = 7535;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1120,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionAtomContext : ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionAtom; } }
	 
		public ExpressionAtomContext() { }
		public virtual void CopyFrom(ExpressionAtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CollateExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE() { return GetToken(MariaDBParser.COLLATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCollateExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCollateExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollateExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAssignExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_ID() { return GetToken(MariaDBParser.LOCAL_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_ASSIGN() { return GetToken(MariaDBParser.VAR_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public VariableAssignExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterVariableAssignExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitVariableAssignExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MysqlVariableExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public MysqlVariableContext mysqlVariable() {
			return GetRuleContext<MysqlVariableContext>(0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterMysqlVariableExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitMysqlVariableExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMysqlVariableExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterNestedExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitNestedExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NestedRowExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MariaDBParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MariaDBParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MariaDBParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterNestedRowExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitNestedRowExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedRowExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MathExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public MathOperatorContext mathOperator() {
			return GetRuleContext<MathOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterMathExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitMathExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExistsExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS() { return GetToken(MariaDBParser.EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterExistsExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitExistsExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL() { return GetToken(MariaDBParser.INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTypeContext intervalType() {
			return GetRuleContext<IntervalTypeContext>(0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIntervalExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIntervalExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class JsonExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public JsonOperatorContext jsonOperator() {
			return GetRuleContext<JsonOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterJsonExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitJsonExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubqueryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(MariaDBParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(MariaDBParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterSubqueryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitSubqueryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubqueryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterConstantExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitConstantExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MariaDBParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom() {
			return GetRuleContext<ExpressionAtomContext>(0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterBinaryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitBinaryExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FullColumnNameExpressionAtomContext : ExpressionAtomContext {
		[System.Diagnostics.DebuggerNonUserCode] public FullColumnNameContext fullColumnName() {
			return GetRuleContext<FullColumnNameContext>(0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFullColumnNameExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFullColumnNameExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullColumnNameExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitExpressionAtomContext : ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		[System.Diagnostics.DebuggerNonUserCode] public BitOperatorContext bitOperator() {
			return GetRuleContext<BitOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext[] expressionAtom() {
			return GetRuleContexts<ExpressionAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionAtomContext expressionAtom(int i) {
			return GetRuleContext<ExpressionAtomContext>(i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterBitExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitBitExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionAtomContext expressionAtom() {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionAtomContext _localctx = new ExpressionAtomContext(Context, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 706;
		EnterRecursionRule(_localctx, 706, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7584;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1123,Context) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 7537;
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7538;
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7539;
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7540;
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7541;
				unaryOperator();
				State = 7542;
				expressionAtom(11);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7544;
				Match(BINARY);
				State = 7545;
				expressionAtom(10);
				}
				break;
			case 7:
				{
				_localctx = new VariableAssignExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7546;
				Match(LOCAL_ID);
				State = 7547;
				Match(VAR_ASSIGN);
				State = 7548;
				expressionAtom(9);
				}
				break;
			case 8:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7549;
				Match(LR_BRACKET);
				State = 7550;
				expression(0);
				State = 7555;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 7551;
					Match(COMMA);
					State = 7552;
					expression(0);
					}
					}
					State = 7557;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 7558;
				Match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7560;
				Match(ROW);
				State = 7561;
				Match(LR_BRACKET);
				State = 7562;
				expression(0);
				State = 7565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 7563;
					Match(COMMA);
					State = 7564;
					expression(0);
					}
					}
					State = 7567;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 7569;
				Match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7571;
				Match(EXISTS);
				State = 7572;
				Match(LR_BRACKET);
				State = 7573;
				selectStatement();
				State = 7574;
				Match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7576;
				Match(LR_BRACKET);
				State = 7577;
				selectStatement();
				State = 7578;
				Match(RR_BRACKET);
				}
				break;
			case 12:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7580;
				Match(INTERVAL);
				State = 7581;
				expression(0);
				State = 7582;
				intervalType();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 7603;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1125,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 7601;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1124,Context) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 7586;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 7587;
						bitOperator();
						State = 7588;
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 7590;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 7591;
						mathOperator();
						State = 7592;
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 7594;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 7595;
						jsonOperator();
						State = 7596;
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						State = 7598;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 7599;
						Match(COLLATE);
						State = 7600;
						collationName();
						}
						break;
					}
					} 
				}
				State = 7605;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1125,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MariaDBParser.EXCLAMATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_NOT_OP() { return GetToken(MariaDBParser.BIT_NOT_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MariaDBParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MariaDBParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(MariaDBParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 708, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7606;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT || ((((_la - 1145)) & ~0x3f) == 0 && ((1L << (_la - 1145)) & 387L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_SYMBOL() { return GetToken(MariaDBParser.EQUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL() { return GetToken(MariaDBParser.GREATER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MariaDBParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MariaDBParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 710, RULE_comparisonOperator);
		try {
			State = 7622;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1126,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7608;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7609;
				Match(GREATER_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7610;
				Match(LESS_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7611;
				Match(LESS_SYMBOL);
				State = 7612;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7613;
				Match(GREATER_SYMBOL);
				State = 7614;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7615;
				Match(LESS_SYMBOL);
				State = 7616;
				Match(GREATER_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7617;
				Match(EXCLAMATION_SYMBOL);
				State = 7618;
				Match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7619;
				Match(LESS_SYMBOL);
				State = 7620;
				Match(EQUAL_SYMBOL);
				State = 7621;
				Match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicalOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(MariaDBParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_AND_OP() { return GetTokens(MariaDBParser.BIT_AND_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND_OP(int i) {
			return GetToken(MariaDBParser.BIT_AND_OP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR() { return GetToken(MariaDBParser.XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(MariaDBParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BIT_OR_OP() { return GetTokens(MariaDBParser.BIT_OR_OP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR_OP(int i) {
			return GetToken(MariaDBParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitLogicalOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOperatorContext logicalOperator() {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
		EnterRule(_localctx, 712, RULE_logicalOperator);
		try {
			State = 7631;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AND:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7624;
				Match(AND);
				}
				break;
			case BIT_AND_OP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7625;
				Match(BIT_AND_OP);
				State = 7626;
				Match(BIT_AND_OP);
				}
				break;
			case XOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7627;
				Match(XOR);
				}
				break;
			case OR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7628;
				Match(OR);
				}
				break;
			case BIT_OR_OP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7629;
				Match(BIT_OR_OP);
				State = 7630;
				Match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LESS_SYMBOL() { return GetTokens(MariaDBParser.LESS_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL(int i) {
			return GetToken(MariaDBParser.LESS_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_SYMBOL() { return GetTokens(MariaDBParser.GREATER_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL(int i) {
			return GetToken(MariaDBParser.GREATER_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND_OP() { return GetToken(MariaDBParser.BIT_AND_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR_OP() { return GetToken(MariaDBParser.BIT_XOR_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR_OP() { return GetToken(MariaDBParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterBitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitBitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BitOperatorContext bitOperator() {
		BitOperatorContext _localctx = new BitOperatorContext(Context, State);
		EnterRule(_localctx, 714, RULE_bitOperator);
		try {
			State = 7640;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LESS_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7633;
				Match(LESS_SYMBOL);
				State = 7634;
				Match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7635;
				Match(GREATER_SYMBOL);
				State = 7636;
				Match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7637;
				Match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7638;
				Match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7639;
				Match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MathOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MariaDBParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(MariaDBParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(MariaDBParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MariaDBParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MariaDBParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MariaDBParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MariaDBParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mathOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterMathOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitMathOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMathOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MathOperatorContext mathOperator() {
		MathOperatorContext _localctx = new MathOperatorContext(Context, State);
		EnterRule(_localctx, 716, RULE_mathOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7642;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 1142)) & ~0x3f) == 0 && ((1L << (_la - 1142)) & 127L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MariaDBParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GREATER_SYMBOL() { return GetTokens(MariaDBParser.GREATER_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_SYMBOL(int i) {
			return GetToken(MariaDBParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterJsonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitJsonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonOperatorContext jsonOperator() {
		JsonOperatorContext _localctx = new JsonOperatorContext(Context, State);
		EnterRule(_localctx, 718, RULE_jsonOperator);
		try {
			State = 7649;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1129,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7644;
				Match(MINUS);
				State = 7645;
				Match(GREATER_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7646;
				Match(MINUS);
				State = 7647;
				Match(GREATER_SYMBOL);
				State = 7648;
				Match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARMSCII8() { return GetToken(MariaDBParser.ARMSCII8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII() { return GetToken(MariaDBParser.ASCII, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIG5() { return GetToken(MariaDBParser.BIG5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY() { return GetToken(MariaDBParser.BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1250() { return GetToken(MariaDBParser.CP1250, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1251() { return GetToken(MariaDBParser.CP1251, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1256() { return GetToken(MariaDBParser.CP1256, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP1257() { return GetToken(MariaDBParser.CP1257, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP850() { return GetToken(MariaDBParser.CP850, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP852() { return GetToken(MariaDBParser.CP852, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP866() { return GetToken(MariaDBParser.CP866, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CP932() { return GetToken(MariaDBParser.CP932, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEC8() { return GetToken(MariaDBParser.DEC8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUCJPMS() { return GetToken(MariaDBParser.EUCJPMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUCKR() { return GetToken(MariaDBParser.EUCKR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB18030() { return GetToken(MariaDBParser.GB18030, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GB2312() { return GetToken(MariaDBParser.GB2312, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GBK() { return GetToken(MariaDBParser.GBK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOSTD8() { return GetToken(MariaDBParser.GEOSTD8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREEK() { return GetToken(MariaDBParser.GREEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEBREW() { return GetToken(MariaDBParser.HEBREW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HP8() { return GetToken(MariaDBParser.HP8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYBCS2() { return GetToken(MariaDBParser.KEYBCS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOI8R() { return GetToken(MariaDBParser.KOI8R, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KOI8U() { return GetToken(MariaDBParser.KOI8U, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN1() { return GetToken(MariaDBParser.LATIN1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN2() { return GetToken(MariaDBParser.LATIN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN5() { return GetToken(MariaDBParser.LATIN5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATIN7() { return GetToken(MariaDBParser.LATIN7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACCE() { return GetToken(MariaDBParser.MACCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MACROMAN() { return GetToken(MariaDBParser.MACROMAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SJIS() { return GetToken(MariaDBParser.SJIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWE7() { return GetToken(MariaDBParser.SWE7, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIS620() { return GetToken(MariaDBParser.TIS620, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UCS2() { return GetToken(MariaDBParser.UCS2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UJIS() { return GetToken(MariaDBParser.UJIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF16() { return GetToken(MariaDBParser.UTF16, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF16LE() { return GetToken(MariaDBParser.UTF16LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF32() { return GetToken(MariaDBParser.UTF32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8() { return GetToken(MariaDBParser.UTF8, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8MB3() { return GetToken(MariaDBParser.UTF8MB3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTF8MB4() { return GetToken(MariaDBParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetNameBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterCharsetNameBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitCharsetNameBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharsetNameBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameBaseContext charsetNameBase() {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(Context, State);
		EnterRule(_localctx, 720, RULE_charsetNameBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7651;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY || ((((_la - 757)) & ~0x3f) == 0 && ((1L << (_la - 757)) & 2199023255551L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionLevelBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE() { return GetToken(MariaDBParser.REPEATABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED() { return GetToken(MariaDBParser.COMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED() { return GetToken(MariaDBParser.UNCOMMITTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE() { return GetToken(MariaDBParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionLevelBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterTransactionLevelBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitTransactionLevelBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionLevelBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionLevelBaseContext transactionLevelBase() {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(Context, State);
		EnterRule(_localctx, 722, RULE_transactionLevelBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7653;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 810)) & ~0x3f) == 0 && ((1L << (_la - 810)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegesBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES() { return GetToken(MariaDBParser.TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE() { return GetToken(MariaDBParser.ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE() { return GetToken(MariaDBParser.EXECUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE() { return GetToken(MariaDBParser.FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS() { return GetToken(MariaDBParser.PROCESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD() { return GetToken(MariaDBParser.RELOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN() { return GetToken(MariaDBParser.SHUTDOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER() { return GetToken(MariaDBParser.SUPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES() { return GetToken(MariaDBParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegesBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterPrivilegesBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitPrivilegesBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilegesBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegesBaseContext privilegesBase() {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(Context, State);
		EnterRule(_localctx, 724, RULE_privilegesBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7655;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & 11828396035L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTypeBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(MariaDBParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(MariaDBParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MariaDBParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(MariaDBParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(MariaDBParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(MariaDBParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(MariaDBParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(MariaDBParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalTypeBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterIntervalTypeBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitIntervalTypeBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalTypeBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTypeBaseContext intervalTypeBase() {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(Context, State);
		EnterRule(_localctx, 726, RULE_intervalTypeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7657;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 699)) & ~0x3f) == 0 && ((1L << (_la - 699)) & 255L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MariaDBParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MariaDBParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MariaDBParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME() { return GetToken(MariaDBParser.DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MariaDBParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(MariaDBParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(MariaDBParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterDataTypeBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitDataTypeBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDataTypeBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeBaseContext dataTypeBase() {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(Context, State);
		EnterRule(_localctx, 728, RULE_dataTypeBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7659;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & 1179679L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordsCanBeIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT() { return GetToken(MariaDBParser.ACCOUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION() { return GetToken(MariaDBParser.ACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN() { return GetToken(MariaDBParser.ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER() { return GetToken(MariaDBParser.AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE() { return GetToken(MariaDBParser.AGGREGATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM() { return GetToken(MariaDBParser.ALGORITHM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(MariaDBParser.ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT() { return GetToken(MariaDBParser.AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUDIT_ADMIN() { return GetToken(MariaDBParser.AUDIT_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHORS() { return GetToken(MariaDBParser.AUTHORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOCOMMIT() { return GetToken(MariaDBParser.AUTOCOMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MariaDBParser.AUTOEXTEND_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT() { return GetToken(MariaDBParser.AUTO_INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG() { return GetToken(MariaDBParser.AVG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MariaDBParser.AVG_ROW_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(MariaDBParser.ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_ADMIN() { return GetToken(MariaDBParser.BACKUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN() { return GetToken(MariaDBParser.BEGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG() { return GetToken(MariaDBParser.BINLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ADMIN() { return GetToken(MariaDBParser.BINLOG_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_ENCRYPTION_ADMIN() { return GetToken(MariaDBParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT() { return GetToken(MariaDBParser.BIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND() { return GetToken(MariaDBParser.BIT_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR() { return GetToken(MariaDBParser.BIT_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR() { return GetToken(MariaDBParser.BIT_XOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK() { return GetToken(MariaDBParser.BLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BODY() { return GetToken(MariaDBParser.BODY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(MariaDBParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(MariaDBParser.BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE() { return GetToken(MariaDBParser.BTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS() { return GetToken(MariaDBParser.BUCKETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE() { return GetToken(MariaDBParser.CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED() { return GetToken(MariaDBParser.CASCADED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN() { return GetToken(MariaDBParser.CHAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED() { return GetToken(MariaDBParser.CHANGED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL() { return GetToken(MariaDBParser.CHANNEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM() { return GetToken(MariaDBParser.CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_CHECKSUM() { return GetToken(MariaDBParser.PAGE_CHECKSUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME() { return GetToken(MariaDBParser.CATALOG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER() { return GetToken(MariaDBParser.CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN() { return GetToken(MariaDBParser.CLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT() { return GetToken(MariaDBParser.CLIENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_ADMIN() { return GetToken(MariaDBParser.CLONE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE() { return GetToken(MariaDBParser.CLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLUSTERING() { return GetToken(MariaDBParser.CLUSTERING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE() { return GetToken(MariaDBParser.COALESCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE() { return GetToken(MariaDBParser.CODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS() { return GetToken(MariaDBParser.COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT() { return GetToken(MariaDBParser.COLUMN_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME() { return GetToken(MariaDBParser.COLUMN_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT() { return GetToken(MariaDBParser.COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT() { return GetToken(MariaDBParser.COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT() { return GetToken(MariaDBParser.COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION() { return GetToken(MariaDBParser.COMPLETION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED() { return GetToken(MariaDBParser.COMPRESSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION() { return GetToken(MariaDBParser.COMPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT() { return GetToken(MariaDBParser.CONCURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION() { return GetToken(MariaDBParser.CONDITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECT() { return GetToken(MariaDBParser.CONNECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION() { return GetToken(MariaDBParser.CONNECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ADMIN() { return GetToken(MariaDBParser.CONNECTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT() { return GetToken(MariaDBParser.CONSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MariaDBParser.CONSTRAINT_CATALOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME() { return GetToken(MariaDBParser.CONSTRAINT_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MariaDBParser.CONSTRAINT_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(MariaDBParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT() { return GetToken(MariaDBParser.CONTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTRIBUTORS() { return GetToken(MariaDBParser.CONTRIBUTORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COPY() { return GetToken(MariaDBParser.COPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MariaDBParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU() { return GetToken(MariaDBParser.CPU, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT() { return GetToken(MariaDBParser.CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER() { return GetToken(MariaDBParser.CURRENT_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME() { return GetToken(MariaDBParser.CURSOR_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA() { return GetToken(MariaDBParser.DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE() { return GetToken(MariaDBParser.DATAFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE() { return GetToken(MariaDBParser.DEALLOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT() { return GetToken(MariaDBParser.DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH() { return GetToken(MariaDBParser.DEFAULT_AUTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER() { return GetToken(MariaDBParser.DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MariaDBParser.DELAY_KEY_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_KEY_FILE() { return GetToken(MariaDBParser.DES_KEY_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS() { return GetToken(MariaDBParser.DIAGNOSTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY() { return GetToken(MariaDBParser.DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE() { return GetToken(MariaDBParser.DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD() { return GetToken(MariaDBParser.DISCARD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK() { return GetToken(MariaDBParser.DISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(MariaDBParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE() { return GetToken(MariaDBParser.DUMPFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE() { return GetToken(MariaDBParser.DUPLICATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC() { return GetToken(MariaDBParser.DYNAMIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY() { return GetToken(MariaDBParser.EMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE() { return GetToken(MariaDBParser.ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION() { return GetToken(MariaDBParser.ENCRYPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_KEY_ADMIN() { return GetToken(MariaDBParser.ENCRYPTION_KEY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(MariaDBParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS() { return GetToken(MariaDBParser.ENDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(MariaDBParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE() { return GetToken(MariaDBParser.ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES() { return GetToken(MariaDBParser.ENGINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR() { return GetToken(MariaDBParser.ERROR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS() { return GetToken(MariaDBParser.ERRORS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE() { return GetToken(MariaDBParser.ESCAPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EUR() { return GetToken(MariaDBParser.EUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVEN() { return GetToken(MariaDBParser.EVEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(MariaDBParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS() { return GetToken(MariaDBParser.EVENTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY() { return GetToken(MariaDBParser.EVERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT() { return GetToken(MariaDBParser.EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE() { return GetToken(MariaDBParser.EXCHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUSIVE() { return GetToken(MariaDBParser.EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE() { return GetToken(MariaDBParser.EXPIRE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(MariaDBParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED() { return GetToken(MariaDBParser.EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE() { return GetToken(MariaDBParser.EXTENT_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILED_LOGIN_ATTEMPTS() { return GetToken(MariaDBParser.FAILED_LOGIN_ATTEMPTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST() { return GetToken(MariaDBParser.FAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS() { return GetToken(MariaDBParser.FAULTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELDS() { return GetToken(MariaDBParser.FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MariaDBParser.FILE_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(MariaDBParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_ADMIN() { return GetToken(MariaDBParser.FIREWALL_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIREWALL_USER() { return GetToken(MariaDBParser.FIREWALL_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST() { return GetToken(MariaDBParser.FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED() { return GetToken(MariaDBParser.FIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH() { return GetToken(MariaDBParser.FLUSH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS() { return GetToken(MariaDBParser.FOLLOWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND() { return GetToken(MariaDBParser.FOUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL() { return GetToken(MariaDBParser.FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(MariaDBParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL() { return GetToken(MariaDBParser.GENERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL() { return GetToken(MariaDBParser.GLOBAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS() { return GetToken(MariaDBParser.GRANTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(MariaDBParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT() { return GetToken(MariaDBParser.GROUP_CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION() { return GetToken(MariaDBParser.GROUP_REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_ADMIN() { return GetToken(MariaDBParser.GROUP_REPLICATION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER() { return GetToken(MariaDBParser.HANDLER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH() { return GetToken(MariaDBParser.HASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP() { return GetToken(MariaDBParser.HELP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY() { return GetToken(MariaDBParser.HISTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST() { return GetToken(MariaDBParser.HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS() { return GetToken(MariaDBParser.HOSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED() { return GetToken(MariaDBParser.IDENTIFIED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORED() { return GetToken(MariaDBParser.IGNORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MariaDBParser.IGNORE_SERVER_IDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(MariaDBParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES() { return GetToken(MariaDBParser.INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE() { return GetToken(MariaDBParser.INITIAL_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNODB_REDO_LOG_ARCHIVE() { return GetToken(MariaDBParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INPLACE() { return GetToken(MariaDBParser.INPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD() { return GetToken(MariaDBParser.INSERT_METHOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL() { return GetToken(MariaDBParser.INSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE() { return GetToken(MariaDBParser.INSTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANT() { return GetToken(MariaDBParser.INSTANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERNAL() { return GetToken(MariaDBParser.INTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKE() { return GetToken(MariaDBParser.INVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER() { return GetToken(MariaDBParser.INVOKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO() { return GetToken(MariaDBParser.IO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_THREAD() { return GetToken(MariaDBParser.IO_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC() { return GetToken(MariaDBParser.IPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISO() { return GetToken(MariaDBParser.ISO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION() { return GetToken(MariaDBParser.ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER() { return GetToken(MariaDBParser.ISSUER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JIS() { return GetToken(MariaDBParser.JIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON() { return GetToken(MariaDBParser.JSON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MariaDBParser.KEY_BLOCK_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAMBDA() { return GetToken(MariaDBParser.LAMBDA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE() { return GetToken(MariaDBParser.LANGUAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST() { return GetToken(MariaDBParser.LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL() { return GetToken(MariaDBParser.LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES() { return GetToken(MariaDBParser.LEAVES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(MariaDBParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL() { return GetToken(MariaDBParser.LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST() { return GetToken(MariaDBParser.LIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL() { return GetToken(MariaDBParser.LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCALES() { return GetToken(MariaDBParser.LOCALES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE() { return GetToken(MariaDBParser.LOGFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS() { return GetToken(MariaDBParser.LOGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER() { return GetToken(MariaDBParser.MASTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MariaDBParser.MASTER_AUTO_POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MariaDBParser.MASTER_CONNECT_RETRY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY() { return GetToken(MariaDBParser.MASTER_DELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MariaDBParser.MASTER_HEARTBEAT_PERIOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST() { return GetToken(MariaDBParser.MASTER_HOST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE() { return GetToken(MariaDBParser.MASTER_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS() { return GetToken(MariaDBParser.MASTER_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD() { return GetToken(MariaDBParser.MASTER_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT() { return GetToken(MariaDBParser.MASTER_PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MariaDBParser.MASTER_RETRY_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL() { return GetToken(MariaDBParser.MASTER_SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA() { return GetToken(MariaDBParser.MASTER_SSL_CA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MariaDBParser.MASTER_SSL_CAPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT() { return GetToken(MariaDBParser.MASTER_SSL_CERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MariaDBParser.MASTER_SSL_CIPHER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL() { return GetToken(MariaDBParser.MASTER_SSL_CRL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MariaDBParser.MASTER_SSL_CRLPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY() { return GetToken(MariaDBParser.MASTER_SSL_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MariaDBParser.MASTER_TLS_VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER() { return GetToken(MariaDBParser.MASTER_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MariaDBParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MariaDBParser.MAX_QUERIES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(MariaDBParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS() { return GetToken(MariaDBParser.MAX_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE() { return GetToken(MariaDBParser.MAX_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MariaDBParser.MAX_UPDATES_PER_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MariaDBParser.MAX_USER_CONNECTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM() { return GetToken(MariaDBParser.MEDIUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER() { return GetToken(MariaDBParser.MEMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(MariaDBParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE() { return GetToken(MariaDBParser.MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT() { return GetToken(MariaDBParser.MESSAGE_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MID() { return GetToken(MariaDBParser.MID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE() { return GetToken(MariaDBParser.MIGRATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN() { return GetToken(MariaDBParser.MIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS() { return GetToken(MariaDBParser.MIN_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE() { return GetToken(MariaDBParser.MODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY() { return GetToken(MariaDBParser.MODIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX() { return GetToken(MariaDBParser.MUTEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL() { return GetToken(MariaDBParser.MYSQL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO() { return GetToken(MariaDBParser.MYSQL_ERRNO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(MariaDBParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES() { return GetToken(MariaDBParser.NAMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR() { return GetToken(MariaDBParser.NCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDB_STORED_USER() { return GetToken(MariaDBParser.NDB_STORED_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED() { return GetToken(MariaDBParser.NESTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER() { return GetToken(MariaDBParser.NEVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT() { return GetToken(MariaDBParser.NEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO() { return GetToken(MariaDBParser.NO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCOPY() { return GetToken(MariaDBParser.NOCOPY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP() { return GetToken(MariaDBParser.NODEGROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE() { return GetToken(MariaDBParser.NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT() { return GetToken(MariaDBParser.NOWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(MariaDBParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ODBC() { return GetToken(MariaDBParser.ODBC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE() { return GetToken(MariaDBParser.OFFLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET() { return GetToken(MariaDBParser.OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(MariaDBParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OJ() { return GetToken(MariaDBParser.OJ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_PASSWORD() { return GetToken(MariaDBParser.OLD_PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE() { return GetToken(MariaDBParser.ONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE() { return GetToken(MariaDBParser.ONLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY() { return GetToken(MariaDBParser.ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN() { return GetToken(MariaDBParser.OPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MariaDBParser.OPTIMIZER_COSTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(MariaDBParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS() { return GetToken(MariaDBParser.OPTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER() { return GetToken(MariaDBParser.ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY() { return GetToken(MariaDBParser.ORDINALITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER() { return GetToken(MariaDBParser.OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(MariaDBParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS() { return GetToken(MariaDBParser.PACK_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE() { return GetToken(MariaDBParser.PAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER() { return GetToken(MariaDBParser.PARSER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL() { return GetToken(MariaDBParser.PARTIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING() { return GetToken(MariaDBParser.PARTITIONING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS() { return GetToken(MariaDBParser.PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD() { return GetToken(MariaDBParser.PASSWORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORDLESS_USER_ADMIN() { return GetToken(MariaDBParser.PASSWORDLESS_USER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_LOCK_TIME() { return GetToken(MariaDBParser.PASSWORD_LOCK_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH() { return GetToken(MariaDBParser.PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_RO_VARIABLES_ADMIN() { return GetToken(MariaDBParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE() { return GetToken(MariaDBParser.PHASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS() { return GetToken(MariaDBParser.PLUGINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR() { return GetToken(MariaDBParser.PLUGIN_DIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN() { return GetToken(MariaDBParser.PLUGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT() { return GetToken(MariaDBParser.PORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES() { return GetToken(MariaDBParser.PRECEDES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE() { return GetToken(MariaDBParser.PREPARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE() { return GetToken(MariaDBParser.PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV() { return GetToken(MariaDBParser.PREV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY() { return GetToken(MariaDBParser.PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST() { return GetToken(MariaDBParser.PROCESSLIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE() { return GetToken(MariaDBParser.PROFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES() { return GetToken(MariaDBParser.PROFILES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY() { return GetToken(MariaDBParser.PROXY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(MariaDBParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_RESPONSE_TIME() { return GetToken(MariaDBParser.QUERY_RESPONSE_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK() { return GetToken(MariaDBParser.QUICK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD() { return GetToken(MariaDBParser.REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER() { return GetToken(MariaDBParser.RECOVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE() { return GetToken(MariaDBParser.RECURSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MariaDBParser.REDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT() { return GetToken(MariaDBParser.REDUNDANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY() { return GetToken(MariaDBParser.RELAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG() { return GetToken(MariaDBParser.RELAYLOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE() { return GetToken(MariaDBParser.RELAY_LOG_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS() { return GetToken(MariaDBParser.RELAY_LOG_POS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE() { return GetToken(MariaDBParser.REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE() { return GetToken(MariaDBParser.REORGANIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR() { return GetToken(MariaDBParser.REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICAS() { return GetToken(MariaDBParser.REPLICAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB() { return GetToken(MariaDBParser.REPLICATE_DO_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MariaDBParser.REPLICATE_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MariaDBParser.REPLICATE_IGNORE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MariaDBParser.REPLICATE_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MariaDBParser.REPLICATE_REWRITE_DB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MariaDBParser.REPLICATE_WILD_DO_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MariaDBParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION() { return GetToken(MariaDBParser.REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_APPLIER() { return GetToken(MariaDBParser.REPLICATION_APPLIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SLAVE_ADMIN() { return GetToken(MariaDBParser.REPLICATION_SLAVE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET() { return GetToken(MariaDBParser.RESET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_ADMIN() { return GetToken(MariaDBParser.RESOURCE_GROUP_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_GROUP_USER() { return GetToken(MariaDBParser.RESOURCE_GROUP_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME() { return GetToken(MariaDBParser.RESUME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE() { return GetToken(MariaDBParser.RETURNED_SQLSTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(MariaDBParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REUSE() { return GetToken(MariaDBParser.REUSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE() { return GetToken(MariaDBParser.ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_ADMIN() { return GetToken(MariaDBParser.ROLE_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK() { return GetToken(MariaDBParser.ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP() { return GetToken(MariaDBParser.ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE() { return GetToken(MariaDBParser.ROTATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW() { return GetToken(MariaDBParser.ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS() { return GetToken(MariaDBParser.ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT() { return GetToken(MariaDBParser.ROW_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE() { return GetToken(MariaDBParser.RTREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S3() { return GetToken(MariaDBParser.S3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT() { return GetToken(MariaDBParser.SAVEPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE() { return GetToken(MariaDBParser.SCHEDULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME() { return GetToken(MariaDBParser.SCHEMA_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY() { return GetToken(MariaDBParser.SECURITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return GetToken(MariaDBParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL() { return GetToken(MariaDBParser.SERIAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER() { return GetToken(MariaDBParser.SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION() { return GetToken(MariaDBParser.SESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MariaDBParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_USER_ID() { return GetToken(MariaDBParser.SET_USER_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE() { return GetToken(MariaDBParser.SHARE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARED() { return GetToken(MariaDBParser.SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_ROUTINE() { return GetToken(MariaDBParser.SHOW_ROUTINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED() { return GetToken(MariaDBParser.SIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE() { return GetToken(MariaDBParser.SIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE() { return GetToken(MariaDBParser.SLAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVES() { return GetToken(MariaDBParser.SLAVES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW() { return GetToken(MariaDBParser.SLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT() { return GetToken(MariaDBParser.SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET() { return GetToken(MariaDBParser.SOCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME() { return GetToken(MariaDBParser.SOME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME() { return GetToken(MariaDBParser.SONAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS() { return GetToken(MariaDBParser.SOUNDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(MariaDBParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MariaDBParser.SQL_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MariaDBParser.SQL_AFTER_MTS_GAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MariaDBParser.SQL_BEFORE_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MariaDBParser.SQL_BUFFER_RESULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CACHE() { return GetToken(MariaDBParser.SQL_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE() { return GetToken(MariaDBParser.SQL_NO_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD() { return GetToken(MariaDBParser.SQL_THREAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED() { return GetToken(MariaDBParser.STACKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START() { return GetToken(MariaDBParser.START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS() { return GetToken(MariaDBParser.STARTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MariaDBParser.STATS_AUTO_RECALC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT() { return GetToken(MariaDBParser.STATS_PERSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MariaDBParser.STATS_SAMPLE_PAGES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS() { return GetToken(MariaDBParser.STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD() { return GetToken(MariaDBParser.STD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV() { return GetToken(MariaDBParser.STDDEV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_POP() { return GetToken(MariaDBParser.STDDEV_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_SAMP() { return GetToken(MariaDBParser.STDDEV_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP() { return GetToken(MariaDBParser.STOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE() { return GetToken(MariaDBParser.STORAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(MariaDBParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MariaDBParser.SUBCLASS_ORIGIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT() { return GetToken(MariaDBParser.SUBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION() { return GetToken(MariaDBParser.SUBPARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS() { return GetToken(MariaDBParser.SUBPARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM() { return GetToken(MariaDBParser.SUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND() { return GetToken(MariaDBParser.SUSPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS() { return GetToken(MariaDBParser.SWAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES() { return GetToken(MariaDBParser.SWITCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_VARIABLES_ADMIN() { return GetToken(MariaDBParser.SYSTEM_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME() { return GetToken(MariaDBParser.TABLE_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE() { return GetToken(MariaDBParser.TABLESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_ENCRYPTION_ADMIN() { return GetToken(MariaDBParser.TABLE_ENCRYPTION_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_TYPE() { return GetToken(MariaDBParser.TABLE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY() { return GetToken(MariaDBParser.TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE() { return GetToken(MariaDBParser.TEMPTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN() { return GetToken(MariaDBParser.THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRADITIONAL() { return GetToken(MariaDBParser.TRADITIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION() { return GetToken(MariaDBParser.TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTIONAL() { return GetToken(MariaDBParser.TRANSACTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS() { return GetToken(MariaDBParser.TRIGGERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE() { return GetToken(MariaDBParser.TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES() { return GetToken(MariaDBParser.TYPES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED() { return GetToken(MariaDBParser.UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED() { return GetToken(MariaDBParser.UNDEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE() { return GetToken(MariaDBParser.UNDOFILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MariaDBParser.UNDO_BUFFER_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL() { return GetToken(MariaDBParser.UNINSTALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN() { return GetToken(MariaDBParser.UNKNOWN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL() { return GetToken(MariaDBParser.UNTIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE() { return GetToken(MariaDBParser.UPGRADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USA() { return GetToken(MariaDBParser.USA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER() { return GetToken(MariaDBParser.USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM() { return GetToken(MariaDBParser.USE_FRM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES() { return GetToken(MariaDBParser.USER_RESOURCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION() { return GetToken(MariaDBParser.VALIDATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE() { return GetToken(MariaDBParser.VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_POP() { return GetToken(MariaDBParser.VAR_POP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_SAMP() { return GetToken(MariaDBParser.VAR_SAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES() { return GetToken(MariaDBParser.VARIABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE() { return GetToken(MariaDBParser.VARIANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION_TOKEN_ADMIN() { return GetToken(MariaDBParser.VERSION_TOKEN_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW() { return GetToken(MariaDBParser.VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL() { return GetToken(MariaDBParser.VIRTUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT() { return GetToken(MariaDBParser.WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS() { return GetToken(MariaDBParser.WARNINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT() { return GetToken(MariaDBParser.WITHOUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK() { return GetToken(MariaDBParser.WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER() { return GetToken(MariaDBParser.WRAPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSREP_MEMBERSHIP() { return GetToken(MariaDBParser.WSREP_MEMBERSHIP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WSREP_STATUS() { return GetToken(MariaDBParser.WSREP_STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509() { return GetToken(MariaDBParser.X509, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA() { return GetToken(MariaDBParser.XA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_RECOVER_ADMIN() { return GetToken(MariaDBParser.XA_RECOVER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML() { return GetToken(MariaDBParser.XML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YES() { return GetToken(MariaDBParser.YES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_MONITOR() { return GetToken(MariaDBParser.BINLOG_MONITOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_REPLAY() { return GetToken(MariaDBParser.BINLOG_REPLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_ROLE() { return GetToken(MariaDBParser.CURRENT_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CYCLE() { return GetToken(MariaDBParser.CYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTED() { return GetToken(MariaDBParser.ENCRYPTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_KEY_ID() { return GetToken(MariaDBParser.ENCRYPTION_KEY_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEDERATED_ADMIN() { return GetToken(MariaDBParser.FEDERATED_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(MariaDBParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTVAL() { return GetToken(MariaDBParser.LASTVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED() { return GetToken(MariaDBParser.LOCKED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE() { return GetToken(MariaDBParser.MAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINVALUE() { return GetToken(MariaDBParser.MINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXTVAL() { return GetToken(MariaDBParser.NEXTVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCACHE() { return GetToken(MariaDBParser.NOCACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOCYCLE() { return GetToken(MariaDBParser.NOCYCLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOMAXVALUE() { return GetToken(MariaDBParser.NOMAXVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOMINVALUE() { return GetToken(MariaDBParser.NOMINVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSISTENT() { return GetToken(MariaDBParser.PERSISTENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREVIOUS() { return GetToken(MariaDBParser.PREVIOUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY_ADMIN() { return GetToken(MariaDBParser.READ_ONLY_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA() { return GetToken(MariaDBParser.REPLICA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_MASTER_ADMIN() { return GetToken(MariaDBParser.REPLICATION_MASTER_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART() { return GetToken(MariaDBParser.RESTART, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEQUENCE() { return GetToken(MariaDBParser.SEQUENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETVAL() { return GetToken(MariaDBParser.SETVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_() { return GetToken(MariaDBParser.SKIP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATEMENT() { return GetToken(MariaDBParser.STATEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID() { return GetToken(MariaDBParser.UUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIA() { return GetToken(MariaDBParser.VIA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONITOR() { return GetToken(MariaDBParser.MONITOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY() { return GetToken(MariaDBParser.READ_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLAY() { return GetToken(MariaDBParser.REPLAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_STATISTICS() { return GetToken(MariaDBParser.USER_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT_STATISTICS() { return GetToken(MariaDBParser.CLIENT_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_STATISTICS() { return GetToken(MariaDBParser.INDEX_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_STATISTICS() { return GetToken(MariaDBParser.TABLE_STATISTICS, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordsCanBeId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterKeywordsCanBeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitKeywordsCanBeId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeywordsCanBeId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordsCanBeIdContext keywordsCanBeId() {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(Context, State);
		EnterRule(_localctx, 730, RULE_keywordsCanBeId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7661;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 649090574498545664L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 434896845670449217L) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & 5121L) != 0) || ((((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & 1769897061370560513L) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & -137573170945L) != 0) || ((((_la - 372)) & ~0x3f) == 0 && ((1L << (_la - 372)) & -1L) != 0) || ((((_la - 436)) & ~0x3f) == 0 && ((1L << (_la - 436)) & -134217731L) != 0) || ((((_la - 500)) & ~0x3f) == 0 && ((1L << (_la - 500)) & -3377699720527873L) != 0) || ((((_la - 565)) & ~0x3f) == 0 && ((1L << (_la - 565)) & -17179869185L) != 0) || ((((_la - 629)) & ~0x3f) == 0 && ((1L << (_la - 629)) & -40532396646367233L) != 0) || ((((_la - 693)) & ~0x3f) == 0 && ((1L << (_la - 693)) & -1596587810608398273L) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==SCHEMA_NAME || ((((_la - 1105)) & ~0x3f) == 0 && ((1L << (_la - 1105)) & 268431361L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameBaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(MariaDBParser.ABS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACOS() { return GetToken(MariaDBParser.ACOS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE() { return GetToken(MariaDBParser.ADDDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDTIME() { return GetToken(MariaDBParser.ADDTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_DECRYPT() { return GetToken(MariaDBParser.AES_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AES_ENCRYPT() { return GetToken(MariaDBParser.AES_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AREA() { return GetToken(MariaDBParser.AREA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASBINARY() { return GetToken(MariaDBParser.ASBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASIN() { return GetToken(MariaDBParser.ASIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTEXT() { return GetToken(MariaDBParser.ASTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASWKB() { return GetToken(MariaDBParser.ASWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASWKT() { return GetToken(MariaDBParser.ASWKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_DECRYPT() { return GetToken(MariaDBParser.ASYMMETRIC_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_DERIVE() { return GetToken(MariaDBParser.ASYMMETRIC_DERIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_ENCRYPT() { return GetToken(MariaDBParser.ASYMMETRIC_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_SIGN() { return GetToken(MariaDBParser.ASYMMETRIC_SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYMMETRIC_VERIFY() { return GetToken(MariaDBParser.ASYMMETRIC_VERIFY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN() { return GetToken(MariaDBParser.ATAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAN2() { return GetToken(MariaDBParser.ATAN2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BENCHMARK() { return GetToken(MariaDBParser.BENCHMARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(MariaDBParser.BIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_COUNT() { return GetToken(MariaDBParser.BIT_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_LENGTH() { return GetToken(MariaDBParser.BIT_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUFFER() { return GetToken(MariaDBParser.BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEIL() { return GetToken(MariaDBParser.CEIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEILING() { return GetToken(MariaDBParser.CEILING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CENTROID() { return GetToken(MariaDBParser.CENTROID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER_LENGTH() { return GetToken(MariaDBParser.CHARACTER_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET() { return GetToken(MariaDBParser.CHARSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_LENGTH() { return GetToken(MariaDBParser.CHAR_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COERCIBILITY() { return GetToken(MariaDBParser.COERCIBILITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION() { return GetToken(MariaDBParser.COLLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESS() { return GetToken(MariaDBParser.COMPRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT() { return GetToken(MariaDBParser.CONCAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_WS() { return GetToken(MariaDBParser.CONCAT_WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_ID() { return GetToken(MariaDBParser.CONNECTION_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONV() { return GetToken(MariaDBParser.CONV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_TZ() { return GetToken(MariaDBParser.CONVERT_TZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COS() { return GetToken(MariaDBParser.COS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COT() { return GetToken(MariaDBParser.COT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(MariaDBParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CRC32() { return GetToken(MariaDBParser.CRC32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return GetToken(MariaDBParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return GetToken(MariaDBParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_DH_PARAMETERS() { return GetToken(MariaDBParser.CREATE_DH_PARAMETERS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_DIGEST() { return GetToken(MariaDBParser.CREATE_DIGEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSSES() { return GetToken(MariaDBParser.CROSSES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST() { return GetToken(MariaDBParser.CUME_DIST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE() { return GetToken(MariaDBParser.DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(MariaDBParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATEDIFF() { return GetToken(MariaDBParser.DATEDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_FORMAT() { return GetToken(MariaDBParser.DATE_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(MariaDBParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYNAME() { return GetToken(MariaDBParser.DAYNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFMONTH() { return GetToken(MariaDBParser.DAYOFMONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFWEEK() { return GetToken(MariaDBParser.DAYOFWEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAYOFYEAR() { return GetToken(MariaDBParser.DAYOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECODE() { return GetToken(MariaDBParser.DECODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEGREES() { return GetToken(MariaDBParser.DEGREES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK() { return GetToken(MariaDBParser.DENSE_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_DECRYPT() { return GetToken(MariaDBParser.DES_DECRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DES_ENCRYPT() { return GetToken(MariaDBParser.DES_ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIMENSION() { return GetToken(MariaDBParser.DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISJOINT() { return GetToken(MariaDBParser.DISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELT() { return GetToken(MariaDBParser.ELT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCODE() { return GetToken(MariaDBParser.ENCODE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPT() { return GetToken(MariaDBParser.ENCRYPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDPOINT() { return GetToken(MariaDBParser.ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENVELOPE() { return GetToken(MariaDBParser.ENVELOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(MariaDBParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXP() { return GetToken(MariaDBParser.EXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SET() { return GetToken(MariaDBParser.EXPORT_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERIORRING() { return GetToken(MariaDBParser.EXTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACTVALUE() { return GetToken(MariaDBParser.EXTRACTVALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIELD() { return GetToken(MariaDBParser.FIELD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIND_IN_SET() { return GetToken(MariaDBParser.FIND_IN_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE() { return GetToken(MariaDBParser.FIRST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOOR() { return GetToken(MariaDBParser.FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT() { return GetToken(MariaDBParser.FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_ROWS() { return GetToken(MariaDBParser.FOUND_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_BASE64() { return GetToken(MariaDBParser.FROM_BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_DAYS() { return GetToken(MariaDBParser.FROM_DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_UNIXTIME() { return GetToken(MariaDBParser.FROM_UNIXTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLFROMTEXT() { return GetToken(MariaDBParser.GEOMCOLLFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMCOLLFROMWKB() { return GetToken(MariaDBParser.GEOMCOLLFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MariaDBParser.GEOMETRYCOLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MariaDBParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MariaDBParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYFROMTEXT() { return GetToken(MariaDBParser.GEOMETRYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYFROMWKB() { return GetToken(MariaDBParser.GEOMETRYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYN() { return GetToken(MariaDBParser.GEOMETRYN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYTYPE() { return GetToken(MariaDBParser.GEOMETRYTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMFROMTEXT() { return GetToken(MariaDBParser.GEOMFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMFROMWKB() { return GetToken(MariaDBParser.GEOMFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT() { return GetToken(MariaDBParser.GET_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_LOCK() { return GetToken(MariaDBParser.GET_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLENGTH() { return GetToken(MariaDBParser.GLENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATEST() { return GetToken(MariaDBParser.GREATEST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_SUBSET() { return GetToken(MariaDBParser.GTID_SUBSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_SUBTRACT() { return GetToken(MariaDBParser.GTID_SUBTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(MariaDBParser.HEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(MariaDBParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IFNULL() { return GetToken(MariaDBParser.IFNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET6_ATON() { return GetToken(MariaDBParser.INET6_ATON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET6_NTOA() { return GetToken(MariaDBParser.INET6_NTOA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET_ATON() { return GetToken(MariaDBParser.INET_ATON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INET_NTOA() { return GetToken(MariaDBParser.INET_NTOA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTR() { return GetToken(MariaDBParser.INSTR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERIORRINGN() { return GetToken(MariaDBParser.INTERIORRINGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECTS() { return GetToken(MariaDBParser.INTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE() { return GetToken(MariaDBParser.INVISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISCLOSED() { return GetToken(MariaDBParser.ISCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISEMPTY() { return GetToken(MariaDBParser.ISEMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISNULL() { return GetToken(MariaDBParser.ISNULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSIMPLE() { return GetToken(MariaDBParser.ISSIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_FREE_LOCK() { return GetToken(MariaDBParser.IS_FREE_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4() { return GetToken(MariaDBParser.IS_IPV4, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4_COMPAT() { return GetToken(MariaDBParser.IS_IPV4_COMPAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV4_MAPPED() { return GetToken(MariaDBParser.IS_IPV4_MAPPED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_IPV6() { return GetToken(MariaDBParser.IS_IPV6, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_USED_LOCK() { return GetToken(MariaDBParser.IS_USED_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG() { return GetToken(MariaDBParser.LAG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_INSERT_ID() { return GetToken(MariaDBParser.LAST_INSERT_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE() { return GetToken(MariaDBParser.LAST_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LCASE() { return GetToken(MariaDBParser.LCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD() { return GetToken(MariaDBParser.LEAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAST() { return GetToken(MariaDBParser.LEAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT() { return GetToken(MariaDBParser.LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(MariaDBParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEFROMTEXT() { return GetToken(MariaDBParser.LINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEFROMWKB() { return GetToken(MariaDBParser.LINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING() { return GetToken(MariaDBParser.LINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRINGFROMTEXT() { return GetToken(MariaDBParser.LINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRINGFROMWKB() { return GetToken(MariaDBParser.LINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LN() { return GetToken(MariaDBParser.LN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_FILE() { return GetToken(MariaDBParser.LOAD_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCATE() { return GetToken(MariaDBParser.LOCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG() { return GetToken(MariaDBParser.LOG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG10() { return GetToken(MariaDBParser.LOG10, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG2() { return GetToken(MariaDBParser.LOG2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOWER() { return GetToken(MariaDBParser.LOWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAD() { return GetToken(MariaDBParser.LPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTRIM() { return GetToken(MariaDBParser.LTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKEDATE() { return GetToken(MariaDBParser.MAKEDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKETIME() { return GetToken(MariaDBParser.MAKETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAKE_SET() { return GetToken(MariaDBParser.MAKE_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_POS_WAIT() { return GetToken(MariaDBParser.MASTER_POS_WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRCONTAINS() { return GetToken(MariaDBParser.MBRCONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRDISJOINT() { return GetToken(MariaDBParser.MBRDISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBREQUAL() { return GetToken(MariaDBParser.MBREQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRINTERSECTS() { return GetToken(MariaDBParser.MBRINTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBROVERLAPS() { return GetToken(MariaDBParser.MBROVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRTOUCHES() { return GetToken(MariaDBParser.MBRTOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MBRWITHIN() { return GetToken(MariaDBParser.MBRWITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MD5() { return GetToken(MariaDBParser.MD5, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND() { return GetToken(MariaDBParser.MICROSECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(MariaDBParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MLINEFROMTEXT() { return GetToken(MariaDBParser.MLINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MLINEFROMWKB() { return GetToken(MariaDBParser.MLINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(MariaDBParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(MariaDBParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTHNAME() { return GetToken(MariaDBParser.MONTHNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOINTFROMTEXT() { return GetToken(MariaDBParser.MPOINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOINTFROMWKB() { return GetToken(MariaDBParser.MPOINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOLYFROMTEXT() { return GetToken(MariaDBParser.MPOLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MPOLYFROMWKB() { return GetToken(MariaDBParser.MPOLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING() { return GetToken(MariaDBParser.MULTILINESTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRINGFROMTEXT() { return GetToken(MariaDBParser.MULTILINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRINGFROMWKB() { return GetToken(MariaDBParser.MULTILINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT() { return GetToken(MariaDBParser.MULTIPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINTFROMTEXT() { return GetToken(MariaDBParser.MULTIPOINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINTFROMWKB() { return GetToken(MariaDBParser.MULTIPOINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON() { return GetToken(MariaDBParser.MULTIPOLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGONFROMTEXT() { return GetToken(MariaDBParser.MULTIPOLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGONFROMWKB() { return GetToken(MariaDBParser.MULTIPOLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_CONST() { return GetToken(MariaDBParser.NAME_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE() { return GetToken(MariaDBParser.NTH_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE() { return GetToken(MariaDBParser.NTILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLIF() { return GetToken(MariaDBParser.NULLIF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMGEOMETRIES() { return GetToken(MariaDBParser.NUMGEOMETRIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMINTERIORRINGS() { return GetToken(MariaDBParser.NUMINTERIORRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMPOINTS() { return GetToken(MariaDBParser.NUMPOINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCT() { return GetToken(MariaDBParser.OCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OCTET_LENGTH() { return GetToken(MariaDBParser.OCTET_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORD() { return GetToken(MariaDBParser.ORD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVERLAPS() { return GetToken(MariaDBParser.OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK() { return GetToken(MariaDBParser.PERCENT_RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD_ADD() { return GetToken(MariaDBParser.PERIOD_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERIOD_DIFF() { return GetToken(MariaDBParser.PERIOD_DIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PI() { return GetToken(MariaDBParser.PI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT() { return GetToken(MariaDBParser.POINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTFROMTEXT() { return GetToken(MariaDBParser.POINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTFROMWKB() { return GetToken(MariaDBParser.POINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINTN() { return GetToken(MariaDBParser.POINTN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYFROMTEXT() { return GetToken(MariaDBParser.POLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYFROMWKB() { return GetToken(MariaDBParser.POLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON() { return GetToken(MariaDBParser.POLYGON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGONFROMTEXT() { return GetToken(MariaDBParser.POLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGONFROMWKB() { return GetToken(MariaDBParser.POLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION() { return GetToken(MariaDBParser.POSITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(MariaDBParser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POWER() { return GetToken(MariaDBParser.POWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER() { return GetToken(MariaDBParser.QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE() { return GetToken(MariaDBParser.QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RADIANS() { return GetToken(MariaDBParser.RADIANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RAND() { return GetToken(MariaDBParser.RAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK() { return GetToken(MariaDBParser.RANK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_BYTES() { return GetToken(MariaDBParser.RANDOM_BYTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE_LOCK() { return GetToken(MariaDBParser.RELEASE_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE() { return GetToken(MariaDBParser.REVERSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT() { return GetToken(MariaDBParser.RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(MariaDBParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT() { return GetToken(MariaDBParser.ROW_COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER() { return GetToken(MariaDBParser.ROW_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAD() { return GetToken(MariaDBParser.RPAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTRIM() { return GetToken(MariaDBParser.RTRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA() { return GetToken(MariaDBParser.SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(MariaDBParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEC_TO_TIME() { return GetToken(MariaDBParser.SEC_TO_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_USER() { return GetToken(MariaDBParser.SESSION_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MariaDBParser.SESSION_VARIABLES_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA() { return GetToken(MariaDBParser.SHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA1() { return GetToken(MariaDBParser.SHA1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHA2() { return GetToken(MariaDBParser.SHA2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGN() { return GetToken(MariaDBParser.SIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIN() { return GetToken(MariaDBParser.SIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLEEP() { return GetToken(MariaDBParser.SLEEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDEX() { return GetToken(MariaDBParser.SOUNDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return GetToken(MariaDBParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQRT() { return GetToken(MariaDBParser.SQRT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID() { return GetToken(MariaDBParser.SRID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTPOINT() { return GetToken(MariaDBParser.STARTPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRCMP() { return GetToken(MariaDBParser.STRCMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STR_TO_DATE() { return GetToken(MariaDBParser.STR_TO_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_AREA() { return GetToken(MariaDBParser.ST_AREA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASBINARY() { return GetToken(MariaDBParser.ST_ASBINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASTEXT() { return GetToken(MariaDBParser.ST_ASTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASWKB() { return GetToken(MariaDBParser.ST_ASWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ASWKT() { return GetToken(MariaDBParser.ST_ASWKT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_BUFFER() { return GetToken(MariaDBParser.ST_BUFFER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CENTROID() { return GetToken(MariaDBParser.ST_CENTROID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CONTAINS() { return GetToken(MariaDBParser.ST_CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_CROSSES() { return GetToken(MariaDBParser.ST_CROSSES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DIFFERENCE() { return GetToken(MariaDBParser.ST_DIFFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DIMENSION() { return GetToken(MariaDBParser.ST_DIMENSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DISJOINT() { return GetToken(MariaDBParser.ST_DISJOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_DISTANCE() { return GetToken(MariaDBParser.ST_DISTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ENDPOINT() { return GetToken(MariaDBParser.ST_ENDPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ENVELOPE() { return GetToken(MariaDBParser.ST_ENVELOPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_EQUALS() { return GetToken(MariaDBParser.ST_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_EXTERIORRING() { return GetToken(MariaDBParser.ST_EXTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMTEXT() { return GetToken(MariaDBParser.ST_GEOMCOLLFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMTXT() { return GetToken(MariaDBParser.ST_GEOMCOLLFROMTXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMCOLLFROMWKB() { return GetToken(MariaDBParser.ST_GEOMCOLLFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MariaDBParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MariaDBParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYFROMTEXT() { return GetToken(MariaDBParser.ST_GEOMETRYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYFROMWKB() { return GetToken(MariaDBParser.ST_GEOMETRYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYN() { return GetToken(MariaDBParser.ST_GEOMETRYN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMETRYTYPE() { return GetToken(MariaDBParser.ST_GEOMETRYTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMFROMTEXT() { return GetToken(MariaDBParser.ST_GEOMFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_GEOMFROMWKB() { return GetToken(MariaDBParser.ST_GEOMFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERIORRINGN() { return GetToken(MariaDBParser.ST_INTERIORRINGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERSECTION() { return GetToken(MariaDBParser.ST_INTERSECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_INTERSECTS() { return GetToken(MariaDBParser.ST_INTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISCLOSED() { return GetToken(MariaDBParser.ST_ISCLOSED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISEMPTY() { return GetToken(MariaDBParser.ST_ISEMPTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_ISSIMPLE() { return GetToken(MariaDBParser.ST_ISSIMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINEFROMTEXT() { return GetToken(MariaDBParser.ST_LINEFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINEFROMWKB() { return GetToken(MariaDBParser.ST_LINEFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINESTRINGFROMTEXT() { return GetToken(MariaDBParser.ST_LINESTRINGFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_LINESTRINGFROMWKB() { return GetToken(MariaDBParser.ST_LINESTRINGFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMGEOMETRIES() { return GetToken(MariaDBParser.ST_NUMGEOMETRIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMINTERIORRING() { return GetToken(MariaDBParser.ST_NUMINTERIORRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMINTERIORRINGS() { return GetToken(MariaDBParser.ST_NUMINTERIORRINGS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_NUMPOINTS() { return GetToken(MariaDBParser.ST_NUMPOINTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_OVERLAPS() { return GetToken(MariaDBParser.ST_OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTFROMTEXT() { return GetToken(MariaDBParser.ST_POINTFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTFROMWKB() { return GetToken(MariaDBParser.ST_POINTFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POINTN() { return GetToken(MariaDBParser.ST_POINTN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYFROMTEXT() { return GetToken(MariaDBParser.ST_POLYFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYFROMWKB() { return GetToken(MariaDBParser.ST_POLYFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYGONFROMTEXT() { return GetToken(MariaDBParser.ST_POLYGONFROMTEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_POLYGONFROMWKB() { return GetToken(MariaDBParser.ST_POLYGONFROMWKB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_SRID() { return GetToken(MariaDBParser.ST_SRID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_STARTPOINT() { return GetToken(MariaDBParser.ST_STARTPOINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_SYMDIFFERENCE() { return GetToken(MariaDBParser.ST_SYMDIFFERENCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_TOUCHES() { return GetToken(MariaDBParser.ST_TOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_UNION() { return GetToken(MariaDBParser.ST_UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_WITHIN() { return GetToken(MariaDBParser.ST_WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_X() { return GetToken(MariaDBParser.ST_X, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_Y() { return GetToken(MariaDBParser.ST_Y, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE() { return GetToken(MariaDBParser.SUBDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING_INDEX() { return GetToken(MariaDBParser.SUBSTRING_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBTIME() { return GetToken(MariaDBParser.SUBTIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_USER() { return GetToken(MariaDBParser.SYSTEM_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAN() { return GetToken(MariaDBParser.TAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(MariaDBParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMEDIFF() { return GetToken(MariaDBParser.TIMEDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP() { return GetToken(MariaDBParser.TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPADD() { return GetToken(MariaDBParser.TIMESTAMPADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPDIFF() { return GetToken(MariaDBParser.TIMESTAMPDIFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_FORMAT() { return GetToken(MariaDBParser.TIME_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_TO_SEC() { return GetToken(MariaDBParser.TIME_TO_SEC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOUCHES() { return GetToken(MariaDBParser.TOUCHES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_BASE64() { return GetToken(MariaDBParser.TO_BASE64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_DAYS() { return GetToken(MariaDBParser.TO_DAYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SECONDS() { return GetToken(MariaDBParser.TO_SECONDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UCASE() { return GetToken(MariaDBParser.UCASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMPRESS() { return GetToken(MariaDBParser.UNCOMPRESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMPRESSED_LENGTH() { return GetToken(MariaDBParser.UNCOMPRESSED_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNHEX() { return GetToken(MariaDBParser.UNHEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIX_TIMESTAMP() { return GetToken(MariaDBParser.UNIX_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATEXML() { return GetToken(MariaDBParser.UPDATEXML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPPER() { return GetToken(MariaDBParser.UPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID() { return GetToken(MariaDBParser.UUID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID_SHORT() { return GetToken(MariaDBParser.UUID_SHORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATE_PASSWORD_STRENGTH() { return GetToken(MariaDBParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VERSION() { return GetToken(MariaDBParser.VERSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE() { return GetToken(MariaDBParser.VISIBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return GetToken(MariaDBParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK() { return GetToken(MariaDBParser.WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKDAY() { return GetToken(MariaDBParser.WEEKDAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEKOFYEAR() { return GetToken(MariaDBParser.WEEKOFYEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING() { return GetToken(MariaDBParser.WEIGHT_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHIN() { return GetToken(MariaDBParser.WITHIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(MariaDBParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEARWEEK() { return GetToken(MariaDBParser.YEARWEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Y_FUNCTION() { return GetToken(MariaDBParser.Y_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X_FUNCTION() { return GetToken(MariaDBParser.X_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY() { return GetToken(MariaDBParser.JSON_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECT() { return GetToken(MariaDBParser.JSON_OBJECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_QUOTE() { return GetToken(MariaDBParser.JSON_QUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_CONTAINS() { return GetToken(MariaDBParser.JSON_CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_CONTAINS_PATH() { return GetToken(MariaDBParser.JSON_CONTAINS_PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_EXTRACT() { return GetToken(MariaDBParser.JSON_EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_KEYS() { return GetToken(MariaDBParser.JSON_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OVERLAPS() { return GetToken(MariaDBParser.JSON_OVERLAPS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SEARCH() { return GetToken(MariaDBParser.JSON_SEARCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE() { return GetToken(MariaDBParser.JSON_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY_APPEND() { return GetToken(MariaDBParser.JSON_ARRAY_APPEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAY_INSERT() { return GetToken(MariaDBParser.JSON_ARRAY_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_INSERT() { return GetToken(MariaDBParser.JSON_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE() { return GetToken(MariaDBParser.JSON_MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE_PATCH() { return GetToken(MariaDBParser.JSON_MERGE_PATCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_MERGE_PRESERVE() { return GetToken(MariaDBParser.JSON_MERGE_PRESERVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_REMOVE() { return GetToken(MariaDBParser.JSON_REMOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_REPLACE() { return GetToken(MariaDBParser.JSON_REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SET() { return GetToken(MariaDBParser.JSON_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_UNQUOTE() { return GetToken(MariaDBParser.JSON_UNQUOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_DEPTH() { return GetToken(MariaDBParser.JSON_DEPTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_LENGTH() { return GetToken(MariaDBParser.JSON_LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TYPE() { return GetToken(MariaDBParser.JSON_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALID() { return GetToken(MariaDBParser.JSON_VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TABLE() { return GetToken(MariaDBParser.JSON_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SCHEMA_VALID() { return GetToken(MariaDBParser.JSON_SCHEMA_VALID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return GetToken(MariaDBParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_PRETTY() { return GetToken(MariaDBParser.JSON_PRETTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_STORAGE_FREE() { return GetToken(MariaDBParser.JSON_STORAGE_FREE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_STORAGE_SIZE() { return GetToken(MariaDBParser.JSON_STORAGE_SIZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAYAGG() { return GetToken(MariaDBParser.JSON_ARRAYAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECTAGG() { return GetToken(MariaDBParser.JSON_OBJECTAGG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LASTVAL() { return GetToken(MariaDBParser.LASTVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXTVAL() { return GetToken(MariaDBParser.NEXTVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SETVAL() { return GetToken(MariaDBParser.SETVAL, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionNameBase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.EnterFunctionNameBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMariaDBParserListener typedListener = listener as IMariaDBParserListener;
			if (typedListener != null) typedListener.ExitFunctionNameBase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMariaDBParserVisitor<TResult> typedVisitor = visitor as IMariaDBParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionNameBase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameBaseContext functionNameBase() {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(Context, State);
		EnterRule(_localctx, 732, RULE_functionNameBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7663;
			_la = TokenStream.LA(1);
			if ( !(_la==DATABASE || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & 22517998136852481L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -17179869161L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 8796109397507L) != 0) || _la==INVISIBLE || ((((_la - 681)) & ~0x3f) == 0 && ((1L << (_la - 681)) & 66846721L) != 0) || _la==SESSION_VARIABLES_ADMIN || ((((_la - 814)) & ~0x3f) == 0 && ((1L << (_la - 814)) & -8589934599L) != 0) || ((((_la - 878)) & ~0x3f) == 0 && ((1L << (_la - 878)) & -257L) != 0) || ((((_la - 942)) & ~0x3f) == 0 && ((1L << (_la - 942)) & -1L) != 0) || ((((_la - 1006)) & ~0x3f) == 0 && ((1L << (_la - 1006)) & -529L) != 0) || ((((_la - 1070)) & ~0x3f) == 0 && ((1L << (_la - 1070)) & 2111062325329919L) != 0) || _la==MOD) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 351: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 352: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 353: return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 4);
		case 9: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 3);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 1);
		case 13: return Precpred(Context, 13);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,1186,7666,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
		14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
		21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
		28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
		35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
		42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
		49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
		56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
		63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
		70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
		77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
		84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
		91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,
		98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
		2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
		2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,
		2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,1,0,3,0,736,8,0,1,0,1,
		0,3,0,740,8,0,1,0,1,0,1,1,1,1,1,1,3,1,747,8,1,1,1,3,1,750,8,1,1,1,5,1,
		753,8,1,10,1,12,1,756,9,1,1,1,1,1,1,1,3,1,761,8,1,1,1,3,1,764,8,1,1,1,
		3,1,767,8,1,1,2,3,2,770,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,779,8,2,1,
		3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,790,8,3,10,3,12,3,793,9,3,1,3,1,
		3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,840,8,5,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,3,6,853,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,
		7,864,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		3,8,881,8,8,1,9,1,9,1,9,3,9,886,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,3,10,901,8,10,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
		11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,929,8,11,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,3,12,938,8,12,1,13,1,13,1,13,3,13,943,8,13,1,13,1,13,5,13,947,
		8,13,10,13,12,13,950,9,13,1,14,1,14,3,14,954,8,14,1,14,1,14,3,14,958,8,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,967,8,14,1,14,3,14,970,8,14,
		1,14,3,14,973,8,14,1,14,1,14,3,14,977,8,14,1,14,1,14,1,14,1,15,1,15,3,
		15,984,8,15,1,15,3,15,987,8,15,1,15,3,15,990,8,15,1,15,1,15,3,15,994,8,
		15,1,15,1,15,3,15,998,8,15,1,15,1,15,1,15,1,15,3,15,1004,8,15,1,15,5,15,
		1007,8,15,10,15,12,15,1010,9,15,1,15,1,15,3,15,1014,8,15,1,15,1,15,1,15,
		3,15,1019,8,15,1,15,5,15,1022,8,15,10,15,12,15,1025,9,15,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,3,16,1036,8,16,1,16,3,16,1039,8,16,1,16,
		1,16,3,16,1043,8,16,1,16,3,16,1046,8,16,1,16,1,16,3,16,1050,8,16,1,16,
		3,16,1053,8,16,1,16,1,16,3,16,1057,8,16,1,16,3,16,1060,8,16,1,16,3,16,
		1063,8,16,1,16,1,16,3,16,1067,8,16,1,16,3,16,1070,8,16,1,16,1,16,3,16,
		1074,8,16,1,16,1,16,1,17,1,17,3,17,1080,8,17,1,17,3,17,1083,8,17,1,17,
		1,17,1,17,1,17,3,17,1089,8,17,1,17,1,17,5,17,1093,8,17,10,17,12,17,1096,
		9,17,1,17,1,17,5,17,1100,8,17,10,17,12,17,1103,9,17,1,17,1,17,1,18,1,18,
		3,18,1109,8,18,1,18,3,18,1112,8,18,1,18,3,18,1115,8,18,1,18,1,18,3,18,
		1119,8,18,1,18,1,18,1,18,3,18,1124,8,18,1,18,1,18,5,18,1128,8,18,10,18,
		12,18,1131,9,18,1,18,1,18,1,18,1,18,5,18,1137,8,18,10,18,12,18,1140,9,
		18,1,18,1,18,3,18,1144,8,18,1,19,1,19,1,19,3,19,1149,8,19,1,19,1,19,1,
		19,5,19,1154,8,19,10,19,12,19,1157,9,19,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,5,20,1171,8,20,10,20,12,20,1174,9,20,1,20,
		1,20,1,21,1,21,3,21,1180,8,21,1,21,3,21,1183,8,21,1,21,1,21,3,21,1187,
		8,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1197,8,21,1,21,1,21,
		3,21,1201,8,21,1,21,3,21,1204,8,21,1,21,1,21,3,21,1208,8,21,1,21,1,21,
		3,21,1212,8,21,1,21,1,21,3,21,1216,8,21,1,21,5,21,1219,8,21,10,21,12,21,
		1222,9,21,3,21,1224,8,21,1,21,3,21,1227,8,21,1,21,3,21,1230,8,21,1,21,
		3,21,1233,8,21,1,21,1,21,1,21,1,21,3,21,1239,8,21,1,21,3,21,1242,8,21,
		1,21,1,21,3,21,1246,8,21,1,21,1,21,1,21,1,21,3,21,1252,8,21,1,21,5,21,
		1255,8,21,10,21,12,21,1258,9,21,3,21,1260,8,21,1,21,3,21,1263,8,21,3,21,
		1265,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,1276,8,22,
		1,22,1,22,3,22,1280,8,22,1,22,3,22,1283,8,22,1,23,1,23,1,23,1,23,1,23,
		1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,1297,8,23,1,23,3,23,1300,8,23,
		1,23,1,23,3,23,1304,8,23,1,23,3,23,1307,8,23,1,23,1,23,3,23,1311,8,23,
		1,23,3,23,1314,8,23,1,23,1,23,3,23,1318,8,23,1,23,3,23,1321,8,23,1,23,
		1,23,3,23,1325,8,23,1,23,3,23,1328,8,23,1,23,3,23,1331,8,23,1,23,1,23,
		3,23,1335,8,23,1,23,3,23,1338,8,23,1,23,1,23,3,23,1342,8,23,1,23,1,23,
		1,24,1,24,3,24,1348,8,24,1,24,3,24,1351,8,24,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,3,24,1364,8,24,1,24,1,24,1,25,1,25,3,25,
		1370,8,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,5,26,1379,8,26,10,26,12,26,
		1382,9,26,1,26,1,26,3,26,1386,8,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,
		1394,8,26,1,27,1,27,1,28,1,28,1,29,1,29,3,29,1402,8,29,1,29,1,29,1,29,
		3,29,1407,8,29,1,29,3,29,1410,8,29,1,29,1,29,1,29,3,29,1415,8,29,1,29,
		1,29,1,29,1,29,1,29,1,29,3,29,1423,8,29,1,29,1,29,1,29,3,29,1428,8,29,
		1,29,1,29,1,29,1,29,3,29,1434,8,29,1,29,1,29,1,29,3,29,1439,8,29,1,29,
		1,29,3,29,1443,8,29,3,29,1445,8,29,1,30,1,30,3,30,1449,8,30,1,30,3,30,
		1452,8,30,1,30,1,30,3,30,1456,8,30,1,30,1,30,1,30,5,30,1461,8,30,10,30,
		12,30,1464,9,30,1,31,1,31,3,31,1468,8,31,1,31,1,31,1,31,3,31,1473,8,31,
		1,31,1,31,1,31,1,31,1,31,1,31,3,31,1481,8,31,1,31,1,31,1,31,1,31,1,31,
		1,31,3,31,1489,8,31,1,31,1,31,1,31,3,31,1494,8,31,1,31,1,31,1,31,1,31,
		1,31,1,31,3,31,1502,8,31,1,31,3,31,1505,8,31,1,32,3,32,1508,8,32,1,32,
		1,32,3,32,1512,8,32,1,32,1,32,3,32,1516,8,32,1,32,3,32,1519,8,32,1,32,
		1,32,3,32,1523,8,32,1,32,1,32,3,32,1527,8,32,1,32,1,32,3,32,1531,8,32,
		1,32,1,32,1,32,1,32,3,32,1537,8,32,1,32,3,32,1540,8,32,1,33,1,33,1,33,
		1,33,1,33,3,33,1547,8,33,1,34,1,34,1,34,3,34,1552,8,34,1,35,1,35,1,35,
		1,35,1,35,3,35,1559,8,35,1,36,1,36,1,36,5,36,1564,8,36,10,36,12,36,1567,
		9,36,1,36,1,36,1,36,3,36,1572,8,36,1,36,1,36,1,36,1,36,5,36,1578,8,36,
		10,36,12,36,1581,9,36,3,36,1583,8,36,1,36,1,36,1,36,5,36,1588,8,36,10,
		36,12,36,1591,9,36,3,36,1593,8,36,3,36,1595,8,36,1,37,1,37,1,37,1,37,3,
		37,1601,8,37,1,38,1,38,1,38,1,38,3,38,1607,8,38,1,38,1,38,1,39,1,39,1,
		39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,1624,8,39,1,
		40,1,40,1,40,1,40,1,40,3,40,1631,8,40,1,41,1,41,1,41,1,42,1,42,3,42,1638,
		8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1650,8,42,
		1,42,1,42,1,42,3,42,1655,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
		1664,8,42,3,42,1666,8,42,1,43,3,43,1669,8,43,1,43,1,43,1,43,1,44,1,44,
		1,44,1,45,1,45,1,45,1,45,1,45,3,45,1682,8,45,1,45,1,45,1,45,1,45,1,45,
		1,45,1,45,1,45,1,45,1,45,1,45,3,45,1695,8,45,1,45,1,45,1,45,3,45,1700,
		8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
		1,46,3,46,1716,8,46,1,47,1,47,1,47,1,47,5,47,1722,8,47,10,47,12,47,1725,
		9,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,3,48,1734,8,48,1,49,1,49,5,49,
		1738,8,49,10,49,12,49,1741,9,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
		1,50,3,50,1752,8,50,1,50,3,50,1755,8,50,1,50,1,50,1,50,3,50,1760,8,50,
		1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1773,8,50,
		1,50,1,50,1,50,1,50,1,50,3,50,1780,8,50,1,50,1,50,1,50,1,50,1,50,3,50,
		1787,8,50,3,50,1789,8,50,1,50,1,50,1,50,1,50,1,50,3,50,1796,8,50,1,51,
		1,51,3,51,1800,8,51,3,51,1802,8,51,1,51,1,51,1,51,3,51,1807,8,51,1,51,
		3,51,1810,8,51,1,51,1,51,5,51,1814,8,51,10,51,12,51,1817,9,51,1,51,1,51,
		3,51,1821,8,51,3,51,1823,8,51,1,51,1,51,3,51,1827,8,51,1,51,3,51,1830,
		8,51,1,51,3,51,1833,8,51,1,51,1,51,5,51,1837,8,51,10,51,12,51,1840,9,51,
		1,51,1,51,3,51,1844,8,51,3,51,1846,8,51,1,51,1,51,1,51,3,51,1851,8,51,
		1,51,1,51,1,51,1,51,1,51,3,51,1858,8,51,3,51,1860,8,51,1,51,1,51,1,51,
		1,51,1,51,3,51,1867,8,51,1,52,1,52,1,52,3,52,1872,8,52,1,52,1,52,3,52,
		1876,8,52,1,52,3,52,1879,8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,1887,
		8,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,1895,8,53,3,53,1897,8,53,1,54,
		1,54,1,54,1,54,1,54,1,54,3,54,1905,8,54,1,55,1,55,3,55,1909,8,55,1,55,
		3,55,1912,8,55,1,55,1,55,5,55,1916,8,55,10,55,12,55,1919,9,55,1,55,1,55,
		3,55,1923,8,55,1,55,3,55,1926,8,55,1,55,1,55,5,55,1930,8,55,10,55,12,55,
		1933,9,55,3,55,1935,8,55,1,56,1,56,3,56,1939,8,56,1,56,3,56,1942,8,56,
		1,56,1,56,3,56,1946,8,56,1,56,1,56,1,56,3,56,1951,8,56,1,56,1,56,1,56,
		3,56,1956,8,56,1,56,1,56,1,56,3,56,1961,8,56,1,56,1,56,3,56,1965,8,56,
		1,56,1,56,3,56,1969,8,56,1,56,1,56,3,56,1973,8,56,1,56,1,56,3,56,1977,
		8,56,1,56,1,56,3,56,1981,8,56,1,56,1,56,3,56,1985,8,56,1,56,1,56,1,56,
		3,56,1990,8,56,1,56,1,56,1,56,3,56,1995,8,56,1,56,1,56,1,56,3,56,2000,
		8,56,1,56,1,56,1,56,1,56,3,56,2006,8,56,1,56,1,56,1,56,3,56,2011,8,56,
		1,56,1,56,1,56,3,56,2016,8,56,1,56,1,56,1,56,3,56,2021,8,56,1,56,1,56,
		1,56,1,56,3,56,2027,8,56,1,56,1,56,1,56,3,56,2032,8,56,1,56,1,56,1,56,
		3,56,2037,8,56,1,56,1,56,1,56,1,56,3,56,2043,8,56,1,56,1,56,1,56,3,56,
		2048,8,56,1,56,1,56,1,56,3,56,2053,8,56,1,56,1,56,1,56,3,56,2058,8,56,
		1,56,1,56,1,56,3,56,2063,8,56,1,56,1,56,1,56,3,56,2068,8,56,1,56,1,56,
		1,56,3,56,2073,8,56,1,56,1,56,1,56,3,56,2078,8,56,1,56,1,56,1,56,1,56,
		1,56,3,56,2085,8,56,1,56,1,56,1,56,3,56,2090,8,56,1,56,1,56,1,56,3,56,
		2095,8,56,1,56,1,56,1,56,3,56,2100,8,56,1,56,1,56,3,56,2104,8,56,1,56,
		1,56,1,56,3,56,2109,8,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,2117,8,56,
		1,56,1,56,1,56,3,56,2122,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,
		2131,8,56,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,3,59,2143,
		8,59,1,59,1,59,1,59,1,59,1,59,3,59,2150,8,59,3,59,2152,8,59,1,59,1,59,
		1,59,1,59,5,59,2158,8,59,10,59,12,59,2161,9,59,1,59,1,59,3,59,2165,8,59,
		1,60,3,60,2168,8,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,2176,8,60,1,60,
		1,60,1,60,1,60,3,60,2182,8,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
		1,60,1,60,1,60,1,60,1,60,1,60,3,60,2198,8,60,1,60,1,60,1,60,1,60,1,60,
		1,60,1,60,1,60,1,60,1,60,3,60,2210,8,60,1,60,1,60,1,60,1,60,3,60,2216,
		8,60,1,60,1,60,1,60,1,60,3,60,2222,8,60,3,60,2224,8,60,1,60,3,60,2227,
		8,60,1,60,3,60,2230,8,60,3,60,2232,8,60,1,61,1,61,1,61,1,61,5,61,2238,
		8,61,10,61,12,61,2241,9,61,1,61,1,61,1,62,1,62,1,62,1,62,1,63,3,63,2250,
		8,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,2258,8,63,1,63,1,63,1,63,1,63,
		3,63,2264,8,63,1,63,1,63,1,63,1,63,3,63,2270,8,63,1,64,1,64,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,5,64,2281,8,64,10,64,12,64,2284,9,64,1,64,1,64,
		5,64,2288,8,64,10,64,12,64,2291,9,64,1,64,1,64,1,64,1,64,5,64,2297,8,64,
		10,64,12,64,2300,9,64,1,64,1,64,3,64,2304,8,64,1,64,1,64,1,64,1,64,1,64,
		1,64,1,64,5,64,2313,8,64,10,64,12,64,2316,9,64,1,64,1,64,1,64,1,64,5,64,
		2322,8,64,10,64,12,64,2325,9,64,1,64,1,64,3,64,2329,8,64,1,64,1,64,1,64,
		1,64,1,64,1,64,1,64,1,64,5,64,2339,8,64,10,64,12,64,2342,9,64,1,64,1,64,
		5,64,2346,8,64,10,64,12,64,2349,9,64,1,64,1,64,1,64,1,64,5,64,2355,8,64,
		10,64,12,64,2358,9,64,1,64,1,64,3,64,2362,8,64,1,64,1,64,1,64,1,64,1,64,
		1,64,1,64,1,64,5,64,2372,8,64,10,64,12,64,2375,9,64,1,64,1,64,5,64,2379,
		8,64,10,64,12,64,2382,9,64,1,64,1,64,1,64,1,64,5,64,2388,8,64,10,64,12,
		64,2391,9,64,1,64,1,64,3,64,2395,8,64,1,64,1,64,1,64,5,64,2400,8,64,10,
		64,12,64,2403,9,64,1,64,1,64,1,64,1,64,5,64,2409,8,64,10,64,12,64,2412,
		9,64,1,64,1,64,3,64,2416,8,64,3,64,2418,8,64,1,65,1,65,1,65,3,65,2423,
		8,65,1,66,1,66,1,66,1,66,4,66,2429,8,66,11,66,12,66,2430,1,66,1,66,1,67,
		1,67,1,67,5,67,2438,8,67,10,67,12,67,2441,9,67,1,68,3,68,2444,8,68,1,68,
		3,68,2447,8,68,1,68,1,68,3,68,2451,8,68,1,68,1,68,1,68,3,68,2456,8,68,
		1,68,1,68,1,68,1,68,3,68,2462,8,68,1,68,1,68,1,68,1,68,3,68,2468,8,68,
		1,68,1,68,1,68,3,68,2473,8,68,1,68,1,68,1,68,3,68,2478,8,68,1,68,1,68,
		1,68,3,68,2483,8,68,1,68,1,68,1,68,3,68,2488,8,68,1,68,3,68,2491,8,68,
		1,69,1,69,1,69,3,69,2496,8,69,1,69,4,69,2499,8,69,11,69,12,69,2500,1,69,
		1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,2511,8,69,1,70,1,70,3,70,2515,
		8,70,1,70,1,70,1,70,1,70,1,70,3,70,2522,8,70,1,70,1,70,1,70,3,70,2527,
		8,70,1,70,3,70,2530,8,70,1,70,1,70,1,70,3,70,2535,8,70,1,70,3,70,2538,
		8,70,1,70,1,70,3,70,2542,8,70,1,70,1,70,3,70,2546,8,70,1,71,1,71,1,71,
		1,71,5,71,2552,8,71,10,71,12,71,2555,9,71,1,72,1,72,1,72,1,72,1,72,1,72,
		1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2573,8,73,1,73,
		3,73,2576,8,73,1,73,3,73,2579,8,73,1,73,1,73,3,73,2583,8,73,1,73,1,73,
		1,74,1,74,1,74,1,74,5,74,2591,8,74,10,74,12,74,2594,9,74,1,75,1,75,1,75,
		1,75,1,75,1,75,1,75,1,75,5,75,2604,8,75,10,75,12,75,2607,9,75,1,75,1,75,
		1,76,1,76,3,76,2613,8,76,1,76,3,76,2616,8,76,1,76,1,76,3,76,2620,8,76,
		1,76,1,76,3,76,2624,8,76,1,76,1,76,1,76,5,76,2629,8,76,10,76,12,76,2632,
		9,76,3,76,2634,8,76,1,76,3,76,2637,8,76,1,77,1,77,1,77,1,77,1,77,1,77,
		1,77,1,77,1,77,3,77,2648,8,77,1,77,3,77,2651,8,77,1,77,1,77,3,77,2655,
		8,77,1,77,1,77,1,78,1,78,1,78,1,78,3,78,2663,8,78,1,78,3,78,2666,8,78,
		1,78,1,78,1,78,3,78,2671,8,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,2679,
		8,78,1,78,1,78,1,78,1,78,3,78,2685,8,78,1,78,1,78,3,78,2689,8,78,1,79,
		1,79,1,79,3,79,2694,8,79,1,79,1,79,4,79,2698,8,79,11,79,12,79,2699,1,80,
		1,80,3,80,2704,8,80,1,80,5,80,2707,8,80,10,80,12,80,2710,9,80,1,80,1,80,
		3,80,2714,8,80,1,80,3,80,2717,8,80,1,80,1,80,1,80,1,80,1,80,3,80,2724,
		8,80,1,80,1,80,3,80,2728,8,80,1,80,3,80,2731,8,80,1,80,1,80,1,80,1,80,
		1,80,1,80,1,80,5,80,2740,8,80,10,80,12,80,2743,9,80,1,80,1,80,1,80,1,80,
		1,80,3,80,2750,8,80,1,80,3,80,2753,8,80,1,80,3,80,2756,8,80,1,80,1,80,
		5,80,2760,8,80,10,80,12,80,2763,9,80,1,80,1,80,1,80,3,80,2768,8,80,3,80,
		2770,8,80,1,80,1,80,1,80,3,80,2775,8,80,1,80,3,80,2778,8,80,1,80,1,80,
		5,80,2782,8,80,10,80,12,80,2785,9,80,1,80,1,80,1,80,3,80,2790,8,80,3,80,
		2792,8,80,1,80,1,80,3,80,2796,8,80,1,80,3,80,2799,8,80,1,80,3,80,2802,
		8,80,1,80,3,80,2805,8,80,1,80,1,80,5,80,2809,8,80,10,80,12,80,2812,9,80,
		1,80,1,80,1,80,3,80,2817,8,80,1,80,3,80,2820,8,80,1,80,1,80,5,80,2824,
		8,80,10,80,12,80,2827,9,80,1,80,1,80,1,80,3,80,2832,8,80,3,80,2834,8,80,
		1,80,1,80,1,80,3,80,2839,8,80,1,80,3,80,2842,8,80,1,80,1,80,1,80,1,80,
		1,80,1,80,3,80,2850,8,80,3,80,2852,8,80,1,80,1,80,1,80,1,80,1,80,1,80,
		1,80,3,80,2861,8,80,1,80,1,80,1,80,3,80,2866,8,80,1,80,1,80,1,80,1,80,
		1,80,1,80,3,80,2874,8,80,1,80,1,80,3,80,2878,8,80,1,80,3,80,2881,8,80,
		1,80,1,80,1,80,1,80,1,80,1,80,3,80,2889,8,80,1,80,1,80,1,80,1,80,1,80,
		1,80,1,80,1,80,3,80,2899,8,80,1,80,1,80,1,80,3,80,2904,8,80,1,80,3,80,
		2907,8,80,1,80,1,80,1,80,1,80,1,80,3,80,2914,8,80,1,80,1,80,3,80,2918,
		8,80,1,80,3,80,2921,8,80,1,80,1,80,3,80,2925,8,80,1,80,1,80,1,80,3,80,
		2930,8,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,2939,8,80,1,80,1,80,
		1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
		3,80,2957,8,80,1,80,1,80,3,80,2961,8,80,1,80,1,80,1,80,1,80,1,80,1,80,
		3,80,2969,8,80,1,80,1,80,3,80,2973,8,80,1,80,1,80,1,80,1,80,1,80,1,80,
		1,80,1,80,1,80,1,80,3,80,2985,8,80,1,80,3,80,2988,8,80,1,80,1,80,1,80,
		1,80,1,80,1,80,1,80,3,80,2997,8,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,
		1,80,1,80,3,80,3008,8,80,1,80,3,80,3011,8,80,1,80,1,80,1,80,1,80,5,80,
		3017,8,80,10,80,12,80,3020,9,80,1,80,1,80,1,80,3,80,3025,8,80,1,81,1,81,
		1,81,3,81,3030,8,81,1,81,1,81,1,81,1,81,5,81,3036,8,81,10,81,12,81,3039,
		9,81,1,81,1,81,1,81,1,81,1,81,3,81,3046,8,81,1,81,1,81,1,81,1,81,1,81,
		3,81,3053,8,81,1,81,1,81,1,81,1,81,1,81,3,81,3060,8,81,1,81,1,81,1,81,
		1,81,1,81,3,81,3067,8,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,5,81,3080,8,81,10,81,12,81,3083,9,81,1,81,1,81,1,81,1,81,1,81,
		1,81,1,81,1,81,1,81,1,81,3,81,3095,8,81,1,81,1,81,1,81,1,81,3,81,3101,
		8,81,1,81,1,81,1,81,1,81,3,81,3107,8,81,1,81,1,81,1,81,1,81,3,81,3113,
		8,81,1,81,1,81,1,81,1,81,3,81,3119,8,81,1,81,1,81,1,81,1,81,3,81,3125,
		8,81,1,81,1,81,1,81,1,81,3,81,3131,8,81,1,82,1,82,1,82,3,82,3136,8,82,
		1,82,1,82,1,83,1,83,1,83,3,83,3143,8,83,1,83,1,83,1,84,1,84,1,84,3,84,
		3150,8,84,1,84,3,84,3153,8,84,1,84,1,84,1,84,1,84,1,84,3,84,3160,8,84,
		1,84,1,84,1,84,3,84,3165,8,84,1,84,5,84,3168,8,84,10,84,12,84,3171,9,84,
		1,84,3,84,3174,8,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,
		1,86,3,86,3187,8,86,1,86,1,86,1,87,1,87,1,87,3,87,3194,8,87,1,87,1,87,
		1,88,1,88,1,88,3,88,3201,8,88,1,88,1,88,1,89,1,89,3,89,3207,8,89,1,89,
		1,89,3,89,3211,8,89,1,89,1,89,3,89,3215,8,89,1,89,3,89,3218,8,89,1,90,
		1,90,1,90,1,90,1,90,3,90,3225,8,90,1,90,3,90,3228,8,90,1,91,1,91,1,91,
		3,91,3233,8,91,1,91,1,91,1,92,1,92,1,92,3,92,3240,8,92,1,92,1,92,1,92,
		5,92,3245,8,92,10,92,12,92,3248,9,92,1,92,3,92,3251,8,92,1,93,1,93,1,93,
		3,93,3256,8,93,1,93,1,93,1,93,5,93,3261,8,93,10,93,12,93,3264,9,93,1,94,
		1,94,1,94,1,94,1,94,1,94,1,94,1,94,5,94,3274,8,94,10,94,12,94,3277,9,94,
		3,94,3279,8,94,1,94,1,94,1,94,3,94,3284,8,94,1,94,1,94,1,94,3,94,3289,
		8,94,5,94,3291,8,94,10,94,12,94,3294,9,94,1,94,1,94,1,94,3,94,3299,8,94,
		1,95,1,95,3,95,3303,8,95,1,95,1,95,3,95,3307,8,95,1,95,3,95,3310,8,95,
		1,95,1,95,1,95,5,95,3315,8,95,10,95,12,95,3318,9,95,1,96,1,96,1,96,3,96,
		3323,8,96,1,96,1,96,1,96,5,96,3328,8,96,10,96,12,96,3331,9,96,1,97,1,97,
		3,97,3335,8,97,1,97,1,97,1,97,1,98,1,98,3,98,3342,8,98,1,98,1,98,3,98,
		3346,8,98,1,99,1,99,1,99,1,99,1,99,3,99,3353,8,99,1,99,3,99,3356,8,99,
		1,100,1,100,3,100,3360,8,100,1,101,1,101,1,101,1,102,1,102,1,102,1,102,
		3,102,3369,8,102,1,103,1,103,3,103,3373,8,103,1,103,3,103,3376,8,103,1,
		103,3,103,3379,8,103,1,103,1,103,1,103,1,103,3,103,3385,8,103,1,103,3,
		103,3388,8,103,1,103,1,103,1,103,1,103,3,103,3394,8,103,1,103,1,103,1,
		103,1,103,1,103,5,103,3401,8,103,10,103,12,103,3404,9,103,3,103,3406,8,
		103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,5,103,3415,8,103,10,103,
		12,103,3418,9,103,3,103,3420,8,103,1,104,1,104,1,104,3,104,3425,8,104,
		1,104,3,104,3428,8,104,1,104,1,104,1,104,3,104,3433,8,104,1,104,1,104,
		1,104,1,104,1,104,1,104,1,104,1,104,3,104,3443,8,104,1,104,1,104,1,104,
		3,104,3448,8,104,1,104,1,104,4,104,3452,8,104,11,104,12,104,3453,3,104,
		3456,8,104,1,104,1,104,4,104,3460,8,104,11,104,12,104,3461,3,104,3464,
		8,104,1,104,1,104,1,104,1,104,3,104,3470,8,104,1,104,1,104,1,104,1,104,
		5,104,3476,8,104,10,104,12,104,3479,9,104,1,104,1,104,3,104,3483,8,104,
		1,104,1,104,1,104,1,104,5,104,3489,8,104,10,104,12,104,3492,9,104,3,104,
		3494,8,104,1,105,1,105,1,105,3,105,3499,8,105,1,105,3,105,3502,8,105,1,
		105,1,105,1,105,3,105,3507,8,105,1,105,1,105,1,105,1,105,1,105,1,105,3,
		105,3515,8,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,3523,8,105,1,
		105,1,105,1,105,1,105,3,105,3529,8,105,1,105,1,105,1,105,1,105,5,105,3535,
		8,105,10,105,12,105,3538,9,105,1,105,1,105,3,105,3542,8,105,1,105,1,105,
		1,105,1,105,5,105,3548,8,105,10,105,12,105,3551,9,105,3,105,3553,8,105,
		1,106,1,106,3,106,3557,8,106,1,106,3,106,3560,8,106,1,106,1,106,1,106,
		1,106,1,106,1,106,3,106,3568,8,106,1,106,1,106,1,106,1,106,3,106,3574,
		8,106,1,106,1,106,1,106,1,106,1,106,5,106,3581,8,106,10,106,12,106,3584,
		9,106,3,106,3586,8,106,1,107,1,107,3,107,3590,8,107,1,107,1,107,3,107,
		3594,8,107,1,107,1,107,4,107,3598,8,107,11,107,12,107,3599,1,107,1,107,
		3,107,3604,8,107,1,107,1,107,3,107,3608,8,107,3,107,3610,8,107,1,107,3,
		107,3613,8,107,1,107,3,107,3616,8,107,1,107,3,107,3619,8,107,1,107,1,107,
		4,107,3623,8,107,11,107,12,107,3624,1,107,1,107,3,107,3629,8,107,1,107,
		3,107,3632,8,107,1,107,3,107,3635,8,107,1,107,3,107,3638,8,107,1,107,3,
		107,3641,8,107,1,107,1,107,1,107,4,107,3646,8,107,11,107,12,107,3647,3,
		107,3650,8,107,1,108,1,108,3,108,3654,8,108,1,109,1,109,1,109,3,109,3659,
		8,109,1,109,1,109,1,109,1,109,3,109,3665,8,109,1,109,5,109,3668,8,109,
		10,109,12,109,3671,9,109,1,110,1,110,1,110,1,110,3,110,3677,8,110,1,110,
		1,110,1,110,1,110,3,110,3683,8,110,1,110,5,110,3686,8,110,10,110,12,110,
		3689,9,110,3,110,3691,8,110,1,111,1,111,1,111,1,111,3,111,3697,8,111,1,
		112,1,112,3,112,3701,8,112,1,113,1,113,1,113,1,113,1,113,1,113,3,113,3709,
		8,113,1,113,3,113,3712,8,113,1,114,1,114,3,114,3716,8,114,1,114,3,114,
		3719,8,114,1,114,3,114,3722,8,114,1,114,1,114,1,114,1,114,1,114,1,114,
		1,114,3,114,3731,8,114,1,114,1,114,3,114,3735,8,114,1,114,3,114,3738,8,
		114,1,114,1,114,3,114,3742,8,114,1,115,1,115,3,115,3746,8,115,1,115,3,
		115,3749,8,115,1,115,3,115,3752,8,115,1,115,1,115,1,115,3,115,3757,8,115,
		1,115,1,115,1,115,1,115,3,115,3763,8,115,5,115,3765,8,115,10,115,12,115,
		3768,9,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,3777,8,115,
		1,115,1,115,1,115,1,115,3,115,3783,8,115,5,115,3785,8,115,10,115,12,115,
		3788,9,115,1,115,1,115,1,115,3,115,3793,8,115,1,115,1,115,3,115,3797,8,
		115,1,116,1,116,1,116,1,116,3,116,3803,8,116,1,116,3,116,3806,8,116,1,
		117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,1,117,3,117,3818,8,
		117,1,117,1,117,3,117,3822,8,117,1,117,1,117,3,117,3826,8,117,1,118,1,
		118,1,118,1,118,1,118,1,118,3,118,3834,8,118,1,118,1,118,3,118,3838,8,
		118,1,119,1,119,1,119,1,119,1,120,1,120,3,120,3846,8,120,1,120,3,120,3849,
		8,120,1,120,1,120,3,120,3853,8,120,1,120,3,120,3856,8,120,1,120,1,120,
		1,120,1,120,5,120,3862,8,120,10,120,12,120,3865,9,120,1,120,1,120,3,120,
		3869,8,120,1,120,3,120,3872,8,120,1,120,3,120,3875,8,120,1,121,1,121,3,
		121,3879,8,121,1,121,3,121,3882,8,121,1,121,1,121,1,121,1,121,1,121,5,
		121,3889,8,121,10,121,12,121,3892,9,121,1,121,1,121,3,121,3896,8,121,1,
		122,1,122,1,122,1,122,1,122,5,122,3903,8,122,10,122,12,122,3906,9,122,
		1,123,1,123,3,123,3910,8,123,1,124,1,124,1,124,5,124,3915,8,124,10,124,
		12,124,3918,9,124,1,125,1,125,5,125,3922,8,125,10,125,12,125,3925,9,125,
		1,125,1,125,1,125,5,125,3930,8,125,10,125,12,125,3933,9,125,1,125,1,125,
		1,125,3,125,3938,8,125,1,126,1,126,1,126,1,126,1,126,1,126,3,126,3946,
		8,126,1,126,3,126,3949,8,126,1,126,3,126,3952,8,126,1,126,1,126,1,126,
		5,126,3957,8,126,10,126,12,126,3960,9,126,3,126,3962,8,126,1,126,1,126,
		1,126,1,126,1,126,3,126,3969,8,126,1,126,3,126,3972,8,126,1,126,1,126,
		1,126,1,126,1,126,1,126,3,126,3980,8,126,1,127,1,127,1,127,1,127,3,127,
		3986,8,127,1,127,1,127,1,127,1,127,1,128,1,128,1,128,1,128,1,128,3,128,
		3997,8,128,1,129,3,129,4000,8,129,1,129,1,129,3,129,4004,8,129,1,129,1,
		129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,4014,8,129,1,129,1,129,1,
		129,1,129,3,129,4020,8,129,1,129,1,129,3,129,4024,8,129,1,129,1,129,3,
		129,4028,8,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,1,129,3,129,4038,
		8,129,1,129,1,129,1,129,3,129,4043,8,129,3,129,4045,8,129,1,129,1,129,
		3,129,4049,8,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,3,130,
		4059,8,130,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,3,131,4069,
		8,131,1,132,1,132,5,132,4073,8,132,10,132,12,132,4076,9,132,1,132,1,132,
		3,132,4080,8,132,1,132,3,132,4083,8,132,1,132,3,132,4086,8,132,1,132,3,
		132,4089,8,132,1,132,3,132,4092,8,132,1,132,3,132,4095,8,132,1,132,3,132,
		4098,8,132,1,132,1,132,5,132,4102,8,132,10,132,12,132,4105,9,132,1,132,
		1,132,3,132,4109,8,132,1,132,3,132,4112,8,132,1,132,3,132,4115,8,132,1,
		132,3,132,4118,8,132,1,132,3,132,4121,8,132,1,132,3,132,4124,8,132,1,132,
		3,132,4127,8,132,3,132,4129,8,132,1,133,1,133,5,133,4133,8,133,10,133,
		12,133,4136,9,133,1,133,1,133,3,133,4140,8,133,1,133,3,133,4143,8,133,
		1,133,3,133,4146,8,133,1,133,3,133,4149,8,133,1,133,3,133,4152,8,133,1,
		133,3,133,4155,8,133,1,134,1,134,3,134,4159,8,134,1,134,1,134,1,135,1,
		135,3,135,4165,8,135,1,135,1,135,3,135,4169,8,135,1,136,1,136,1,136,1,
		136,1,136,1,136,3,136,4177,8,136,1,136,1,136,3,136,4181,8,136,1,136,3,
		136,4184,8,136,3,136,4186,8,136,1,137,1,137,1,137,1,137,1,137,1,137,1,
		137,1,137,1,137,1,137,1,137,3,137,4199,8,137,1,137,3,137,4202,8,137,1,
		138,1,138,1,138,5,138,4207,8,138,10,138,12,138,4210,9,138,1,139,1,139,
		1,139,1,139,1,139,1,139,1,139,3,139,4219,8,139,1,139,3,139,4222,8,139,
		1,139,1,139,1,139,3,139,4227,8,139,3,139,4229,8,139,1,139,1,139,3,139,
		4233,8,139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,4241,8,139,1,140,
		1,140,1,140,1,140,3,140,4247,8,140,1,140,1,140,1,140,1,141,1,141,1,141,
		1,141,3,141,4256,8,141,1,141,1,141,1,141,1,142,1,142,1,142,1,142,1,142,
		1,142,1,142,1,142,3,142,4269,8,142,1,143,1,143,3,143,4273,8,143,1,143,
		1,143,5,143,4277,8,143,10,143,12,143,4280,9,143,1,144,1,144,1,144,1,144,
		1,144,1,144,3,144,4288,8,144,1,144,3,144,4291,8,144,1,144,1,144,3,144,
		4295,8,144,1,144,3,144,4298,8,144,1,144,1,144,3,144,4302,8,144,1,144,1,
		144,3,144,4306,8,144,1,144,3,144,4309,8,144,3,144,4311,8,144,1,145,1,145,
		1,145,1,145,5,145,4317,8,145,10,145,12,145,4320,9,145,1,145,1,145,1,145,
		1,145,1,145,1,145,1,145,1,145,1,145,3,145,4331,8,145,1,145,1,145,4,145,
		4335,8,145,11,145,12,145,4336,3,145,4339,8,145,1,145,1,145,4,145,4343,
		8,145,11,145,12,145,4344,3,145,4347,8,145,3,145,4349,8,145,1,146,1,146,
		1,146,1,146,3,146,4355,8,146,1,146,1,146,1,146,1,146,1,146,1,146,3,146,
		4363,8,146,1,147,1,147,1,147,1,147,1,147,1,147,3,147,4371,8,147,1,148,
		1,148,3,148,4375,8,148,1,148,1,148,3,148,4379,8,148,1,149,1,149,1,149,
		1,149,1,149,5,149,4386,8,149,10,149,12,149,4389,9,149,1,149,1,149,3,149,
		4393,8,149,1,150,1,150,1,150,1,151,1,151,1,151,1,151,1,151,1,151,1,151,
		1,151,1,151,1,151,1,151,1,151,1,151,5,151,4411,8,151,10,151,12,151,4414,
		9,151,1,152,1,152,3,152,4418,8,152,1,153,1,153,1,153,1,153,3,153,4424,
		8,153,1,153,1,153,1,153,1,153,1,153,3,153,4431,8,153,1,154,1,154,1,154,
		3,154,4436,8,154,1,155,1,155,1,155,1,155,1,155,5,155,4443,8,155,10,155,
		12,155,4446,9,155,3,155,4448,8,155,1,156,1,156,3,156,4452,8,156,1,157,
		1,157,3,157,4456,8,157,1,157,1,157,3,157,4460,8,157,1,157,3,157,4463,8,
		157,1,157,3,157,4466,8,157,1,157,3,157,4469,8,157,1,158,1,158,3,158,4473,
		8,158,1,158,1,158,3,158,4477,8,158,1,158,3,158,4480,8,158,1,158,3,158,
		4483,8,158,1,158,3,158,4486,8,158,1,159,1,159,1,159,1,160,1,160,3,160,
		4493,8,160,1,160,1,160,3,160,4497,8,160,1,160,1,160,1,161,1,161,1,161,
		1,161,1,162,1,162,1,162,1,162,1,162,5,162,4510,8,162,10,162,12,162,4513,
		9,162,1,162,3,162,4516,8,162,1,163,1,163,1,163,1,164,1,164,1,164,1,164,
		1,164,1,165,1,165,3,165,4528,8,165,1,165,1,165,1,165,1,165,5,165,4534,
		8,165,10,165,12,165,4537,9,165,1,166,1,166,1,166,1,166,1,166,1,166,1,166,
		3,166,4546,8,166,1,167,1,167,3,167,4550,8,167,1,167,3,167,4553,8,167,1,
		167,1,167,1,168,1,168,3,168,4559,8,168,1,168,3,168,4562,8,168,1,168,3,
		168,4565,8,168,1,169,1,169,1,169,1,169,1,169,1,169,1,169,3,169,4574,8,
		169,1,170,1,170,1,170,1,170,1,170,1,170,1,170,3,170,4583,8,170,1,171,1,
		171,1,171,1,171,1,171,1,171,5,171,4591,8,171,10,171,12,171,4594,9,171,
		1,171,3,171,4597,8,171,1,172,1,172,1,172,1,172,1,172,1,172,5,172,4605,
		8,172,10,172,12,172,4608,9,172,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
		3,173,4617,8,173,1,174,1,174,1,174,1,175,1,175,1,175,3,175,4625,8,175,
		1,175,3,175,4628,8,175,1,176,1,176,1,176,1,176,1,176,5,176,4635,8,176,
		10,176,12,176,4638,9,176,3,176,4640,8,176,1,176,1,176,3,176,4644,8,176,
		1,176,5,176,4647,8,176,10,176,12,176,4650,9,176,1,176,3,176,4653,8,176,
		1,177,1,177,1,177,1,177,1,177,5,177,4660,8,177,10,177,12,177,4663,9,177,
		3,177,4665,8,177,1,178,1,178,1,178,1,179,1,179,1,179,1,180,1,180,1,180,
		1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,1,180,
		1,180,1,180,1,180,1,180,1,180,1,180,5,180,4694,8,180,10,180,12,180,4697,
		9,180,3,180,4699,8,180,1,180,3,180,4702,8,180,1,181,1,181,1,182,1,182,
		1,183,1,183,1,184,1,184,1,184,1,184,1,185,1,185,1,185,1,185,1,185,1,185,
		1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
		1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
		1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,1,185,
		5,185,4756,8,185,10,185,12,185,4759,9,185,1,185,1,185,3,185,4763,8,185,
		1,186,1,186,1,186,1,186,1,186,1,186,1,187,1,187,1,188,1,188,1,188,1,188,
		1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
		1,188,1,188,3,188,4791,8,188,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
		1,189,1,189,1,189,1,189,1,189,3,189,4805,8,189,1,190,1,190,1,190,5,190,
		4810,8,190,10,190,12,190,4813,9,190,1,190,3,190,4816,8,190,1,191,1,191,
		1,191,1,191,3,191,4822,8,191,1,192,1,192,1,192,1,192,1,192,1,192,3,192,
		4830,8,192,3,192,4832,8,192,1,193,1,193,1,193,1,193,1,194,1,194,1,194,
		1,194,1,194,3,194,4843,8,194,1,195,1,195,1,195,1,195,1,196,1,196,1,196,
		1,196,3,196,4853,8,196,1,197,1,197,1,197,1,197,1,197,3,197,4860,8,197,
		1,198,1,198,1,198,1,198,3,198,4866,8,198,1,199,1,199,1,199,1,199,1,200,
		1,200,3,200,4874,8,200,1,201,1,201,1,201,3,201,4879,8,201,1,201,1,201,
		1,201,1,201,5,201,4885,8,201,10,201,12,201,4888,9,201,1,201,1,201,1,201,
		5,201,4893,8,201,10,201,12,201,4896,9,201,1,201,1,201,1,201,5,201,4901,
		8,201,10,201,12,201,4904,9,201,1,201,1,201,1,201,5,201,4909,8,201,10,201,
		12,201,4912,9,201,1,201,5,201,4915,8,201,10,201,12,201,4918,9,201,3,201,
		4920,8,201,1,201,1,201,3,201,4924,8,201,1,202,1,202,1,202,3,202,4929,8,
		202,1,202,4,202,4932,8,202,11,202,12,202,4933,1,202,1,202,4,202,4938,8,
		202,11,202,12,202,4939,3,202,4942,8,202,1,202,1,202,1,202,1,203,1,203,
		1,203,1,203,4,203,4951,8,203,11,203,12,203,4952,1,203,5,203,4956,8,203,
		10,203,12,203,4959,9,203,1,203,1,203,4,203,4963,8,203,11,203,12,203,4964,
		3,203,4967,8,203,1,203,1,203,1,203,1,204,1,204,1,204,1,205,1,205,1,205,
		1,206,1,206,1,206,3,206,4981,8,206,1,206,1,206,4,206,4985,8,206,11,206,
		12,206,4986,1,206,1,206,1,206,3,206,4992,8,206,1,207,1,207,1,207,3,207,
		4997,8,207,1,207,1,207,4,207,5001,8,207,11,207,12,207,5002,1,207,1,207,
		1,207,1,207,1,207,3,207,5010,8,207,1,208,1,208,1,208,1,209,1,209,1,209,
		3,209,5018,8,209,1,209,1,209,1,209,1,209,4,209,5024,8,209,11,209,12,209,
		5025,1,209,1,209,1,209,3,209,5031,8,209,1,210,1,210,1,210,1,210,3,210,
		5037,8,210,1,210,3,210,5040,8,210,1,210,1,210,1,210,1,210,1,210,1,210,
		3,210,5048,8,210,1,211,1,211,1,211,1,211,1,211,3,211,5055,8,211,1,212,
		1,212,1,212,1,212,1,212,1,212,1,212,3,212,5064,8,212,1,212,3,212,5067,
		8,212,1,213,1,213,1,213,1,213,1,213,1,213,1,214,1,214,1,214,1,214,1,214,
		1,214,1,214,5,214,5082,8,214,10,214,12,214,5085,9,214,1,214,1,214,1,215,
		1,215,1,215,3,215,5092,8,215,1,215,1,215,1,215,1,215,1,215,1,215,3,215,
		5100,8,215,1,216,1,216,3,216,5104,8,216,1,216,1,216,1,217,1,217,1,217,
		3,217,5111,8,217,1,217,1,217,4,217,5115,8,217,11,217,12,217,5116,1,218,
		1,218,1,218,1,218,4,218,5123,8,218,11,218,12,218,5124,1,219,1,219,1,219,
		1,219,1,219,5,219,5132,8,219,10,219,12,219,5135,9,219,1,219,1,219,1,219,
		3,219,5140,8,219,1,219,1,219,1,219,5,219,5145,8,219,10,219,12,219,5148,
		9,219,1,219,1,219,1,219,1,219,3,219,5154,8,219,1,219,5,219,5157,8,219,
		10,219,12,219,5160,9,219,3,219,5162,8,219,3,219,5164,8,219,1,219,1,219,
		4,219,5168,8,219,11,219,12,219,5169,3,219,5172,8,219,1,219,1,219,5,219,
		5176,8,219,10,219,12,219,5179,9,219,1,219,1,219,1,219,1,219,3,219,5185,
		8,219,3,219,5187,8,219,1,220,1,220,1,220,1,220,1,220,5,220,5194,8,220,
		10,220,12,220,5197,9,220,1,220,1,220,1,220,3,220,5202,8,220,1,220,1,220,
		1,220,5,220,5207,8,220,10,220,12,220,5210,9,220,1,220,1,220,1,220,1,220,
		3,220,5216,8,220,1,220,5,220,5219,8,220,10,220,12,220,5222,9,220,3,220,
		5224,8,220,3,220,5226,8,220,1,220,1,220,4,220,5230,8,220,11,220,12,220,
		5231,3,220,5234,8,220,1,220,1,220,5,220,5238,8,220,10,220,12,220,5241,
		9,220,1,220,1,220,1,220,1,220,3,220,5247,8,220,3,220,5249,8,220,1,221,
		1,221,1,221,3,221,5254,8,221,1,221,1,221,1,221,5,221,5259,8,221,10,221,
		12,221,5262,9,221,1,222,1,222,1,222,1,222,5,222,5268,8,222,10,222,12,222,
		5271,9,222,1,222,1,222,3,222,5275,8,222,1,222,1,222,1,222,1,222,1,222,
		5,222,5282,8,222,10,222,12,222,5285,9,222,1,222,1,222,1,222,1,222,3,222,
		5291,8,222,1,222,5,222,5294,8,222,10,222,12,222,5297,9,222,3,222,5299,
		8,222,3,222,5301,8,222,1,222,1,222,1,222,1,222,5,222,5307,8,222,10,222,
		12,222,5310,9,222,3,222,5312,8,222,1,222,1,222,1,222,1,222,1,222,1,222,
		3,222,5320,8,222,1,222,1,222,1,222,3,222,5325,8,222,1,222,1,222,1,222,
		3,222,5330,8,222,5,222,5332,8,222,10,222,12,222,5335,9,222,1,222,1,222,
		1,222,3,222,5340,8,222,1,222,1,222,1,222,3,222,5345,8,222,5,222,5347,8,
		222,10,222,12,222,5350,9,222,1,222,1,222,1,222,3,222,5355,8,222,3,222,
		5357,8,222,1,223,1,223,1,223,1,223,1,223,1,223,1,223,5,223,5366,8,223,
		10,223,12,223,5369,9,223,3,223,5371,8,223,1,223,1,223,1,223,5,223,5376,
		8,223,10,223,12,223,5379,9,223,3,223,5381,8,223,1,224,1,224,1,224,1,224,
		1,224,1,224,1,224,1,224,5,224,5391,8,224,10,224,12,224,5394,9,224,1,224,
		1,224,1,224,3,224,5399,8,224,1,225,1,225,1,225,1,225,1,225,5,225,5406,
		8,225,10,225,12,225,5409,9,225,1,226,1,226,1,226,1,226,5,226,5415,8,226,
		10,226,12,226,5418,9,226,1,226,1,226,3,226,5422,8,226,1,226,1,226,1,226,
		1,226,1,226,5,226,5429,8,226,10,226,12,226,5432,9,226,1,226,1,226,1,226,
		3,226,5437,8,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,5,226,5446,
		8,226,10,226,12,226,5449,9,226,1,226,1,226,1,226,1,226,5,226,5455,8,226,
		10,226,12,226,5458,9,226,1,226,1,226,1,226,3,226,5463,8,226,1,226,1,226,
		1,226,3,226,5468,8,226,5,226,5470,8,226,10,226,12,226,5473,9,226,3,226,
		5475,8,226,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,5,227,5485,
		8,227,10,227,12,227,5488,9,227,1,228,1,228,1,228,1,228,3,228,5494,8,228,
		1,228,1,228,1,228,3,228,5499,8,228,1,229,1,229,1,229,1,230,1,230,1,230,
		1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,3,230,5517,
		8,230,1,230,1,230,1,230,1,230,1,230,1,230,5,230,5525,8,230,10,230,12,230,
		5528,9,230,1,230,3,230,5531,8,230,1,231,1,231,1,231,3,231,5536,8,231,1,
		231,1,231,1,231,1,231,3,231,5542,8,231,1,232,1,232,1,232,1,232,1,232,1,
		232,1,232,1,232,3,232,5552,8,232,1,233,1,233,1,233,1,233,1,233,1,233,1,
		233,1,233,3,233,5562,8,233,1,234,1,234,1,234,1,234,1,234,1,234,1,234,1,
		234,3,234,5572,8,234,1,234,1,234,1,234,1,234,3,234,5578,8,234,1,234,1,
		234,1,234,1,234,1,234,1,234,1,234,3,234,5587,8,234,1,234,1,234,1,234,1,
		234,3,234,5593,8,234,1,234,1,234,1,234,1,234,1,234,3,234,5600,8,234,3,
		234,5602,8,234,1,235,1,235,1,235,1,236,1,236,1,236,1,236,1,236,3,236,5612,
		8,236,1,237,1,237,3,237,5616,8,237,1,237,1,237,3,237,5620,8,237,1,237,
		1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,5630,8,237,1,237,1,237,
		3,237,5634,8,237,1,237,1,237,3,237,5638,8,237,1,237,1,237,1,237,1,237,
		1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
		3,237,5656,8,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
		1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
		1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
		1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
		1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,5712,8,237,
		1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,
		1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,1,237,3,237,
		5737,8,237,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,1,238,
		1,238,1,238,1,238,1,238,1,238,1,238,3,238,5755,8,238,1,239,1,239,1,239,
		1,239,1,240,1,240,3,240,5763,8,240,1,240,1,240,1,240,1,240,1,240,1,240,
		1,240,1,240,5,240,5773,8,240,10,240,12,240,5776,9,240,1,240,1,240,1,240,
		1,240,3,240,5782,8,240,3,240,5784,8,240,1,240,1,240,1,240,1,240,1,240,
		1,240,5,240,5792,8,240,10,240,12,240,5795,9,240,3,240,5797,8,240,1,241,
		1,241,1,241,1,241,5,241,5803,8,241,10,241,12,241,5806,9,241,1,242,1,242,
		1,242,1,242,3,242,5812,8,242,1,243,1,243,3,243,5816,8,243,1,243,1,243,
		1,243,3,243,5821,8,243,1,244,1,244,3,244,5825,8,244,1,244,1,244,1,244,
		3,244,5830,8,244,1,244,3,244,5833,8,244,1,244,3,244,5836,8,244,1,245,1,
		245,1,245,1,245,1,245,1,245,1,245,3,245,5845,8,245,1,246,1,246,3,246,5849,
		8,246,1,246,3,246,5852,8,246,1,246,1,246,3,246,5856,8,246,1,246,1,246,
		1,246,1,246,1,246,1,246,1,247,1,247,1,247,1,247,1,247,1,247,1,248,1,248,
		1,248,1,248,1,249,1,249,1,249,1,249,1,249,3,249,5879,8,249,1,249,1,249,
		1,249,1,249,1,249,3,249,5886,8,249,5,249,5888,8,249,10,249,12,249,5891,
		9,249,1,249,1,249,1,249,1,249,3,249,5897,8,249,1,249,1,249,1,249,1,249,
		1,249,3,249,5904,8,249,1,249,3,249,5907,8,249,1,249,1,249,1,249,1,249,
		1,249,1,249,1,249,1,249,1,249,1,249,1,249,1,249,5,249,5921,8,249,10,249,
		12,249,5924,9,249,3,249,5926,8,249,1,250,1,250,1,250,1,250,1,250,1,250,
		1,250,1,250,3,250,5936,8,250,1,250,1,250,3,250,5940,8,250,1,250,3,250,
		5943,8,250,1,250,1,250,1,250,3,250,5948,8,250,1,250,1,250,1,250,3,250,
		5953,8,250,1,250,1,250,3,250,5957,8,250,1,250,3,250,5960,8,250,1,250,1,
		250,1,250,3,250,5965,8,250,1,250,1,250,1,250,3,250,5970,8,250,1,250,1,
		250,3,250,5974,8,250,1,250,1,250,1,250,1,250,1,250,3,250,5981,8,250,1,
		250,3,250,5984,8,250,1,250,1,250,1,250,1,250,3,250,5990,8,250,1,250,1,
		250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,3,250,6001,8,250,1,250,1,
		250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,
		1,250,1,250,1,250,1,250,1,250,3,250,6021,8,250,1,250,1,250,1,250,1,250,
		1,250,1,250,1,250,1,250,1,250,1,250,3,250,6033,8,250,1,250,3,250,6036,
		8,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,1,250,3,250,6046,8,250,
		1,250,1,250,1,250,1,250,1,250,1,250,3,250,6054,8,250,1,250,1,250,3,250,
		6058,8,250,1,250,1,250,1,250,1,250,1,250,3,250,6065,8,250,1,250,3,250,
		6068,8,250,1,250,1,250,1,250,1,250,1,250,5,250,6075,8,250,10,250,12,250,
		6078,9,250,3,250,6080,8,250,1,250,1,250,1,250,3,250,6085,8,250,1,250,3,
		250,6088,8,250,1,250,1,250,1,250,3,250,6093,8,250,1,250,1,250,1,250,1,
		250,3,250,6099,8,250,1,250,1,250,1,250,1,250,1,250,3,250,6106,8,250,1,
		250,1,250,1,250,1,250,1,250,3,250,6113,8,250,1,250,1,250,3,250,6117,8,
		250,3,250,6119,8,250,1,251,1,251,3,251,6123,8,251,1,251,1,251,1,251,1,
		251,1,252,1,252,1,252,1,252,3,252,6133,8,252,1,252,3,252,6136,8,252,1,
		252,3,252,6139,8,252,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,
		253,1,253,3,253,6151,8,253,1,253,3,253,6154,8,253,1,254,1,254,1,254,1,
		254,3,254,6160,8,254,1,255,3,255,6163,8,255,1,255,1,255,1,255,1,255,1,
		255,1,255,1,255,3,255,6172,8,255,3,255,6174,8,255,1,255,1,255,3,255,6178,
		8,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,
		1,255,1,255,1,255,1,255,3,255,6195,8,255,1,256,1,256,1,256,1,256,3,256,
		6201,8,256,1,256,1,256,3,256,6205,8,256,1,257,1,257,1,257,1,257,1,257,
		1,257,1,257,1,257,1,257,1,257,1,257,1,257,3,257,6219,8,257,1,258,1,258,
		1,258,1,259,1,259,1,259,1,259,1,259,5,259,6229,8,259,10,259,12,259,6232,
		9,259,1,259,1,259,1,259,1,259,3,259,6238,8,259,1,259,3,259,6241,8,259,
		1,259,1,259,1,259,1,260,1,260,3,260,6248,8,260,1,260,1,260,1,260,5,260,
		6253,8,260,10,260,12,260,6256,9,260,1,260,1,260,3,260,6260,8,260,1,261,
		1,261,3,261,6264,8,261,1,261,1,261,1,262,1,262,1,262,1,262,1,262,1,262,
		1,262,5,262,6275,8,262,10,262,12,262,6278,9,262,1,263,1,263,1,263,1,263,
		1,264,1,264,1,265,1,265,3,265,6288,8,265,1,265,1,265,1,265,1,265,3,265,
		6294,8,265,1,266,1,266,1,266,3,266,6299,8,266,1,266,1,266,1,266,1,266,
		1,266,1,266,1,266,1,266,1,266,1,266,1,266,3,266,6312,8,266,3,266,6314,
		8,266,1,266,1,266,1,266,3,266,6319,8,266,1,266,1,266,3,266,6323,8,266,
		1,266,3,266,6326,8,266,3,266,6328,8,266,1,267,1,267,1,267,1,267,1,267,
		3,267,6335,8,267,1,268,1,268,1,268,1,268,1,268,3,268,6342,8,268,1,268,
		3,268,6345,8,268,1,268,3,268,6348,8,268,1,268,1,268,1,268,1,268,3,268,
		6354,8,268,1,268,1,268,3,268,6358,8,268,1,269,1,269,1,269,1,269,3,269,
		6364,8,269,1,270,1,270,1,270,1,270,3,270,6370,8,270,1,270,1,270,1,271,
		1,271,1,271,1,271,1,272,1,272,1,272,1,273,1,273,1,273,1,274,1,274,1,274,
		3,274,6387,8,274,1,274,1,274,1,274,3,274,6392,8,274,1,274,1,274,1,274,
		1,274,5,274,6398,8,274,10,274,12,274,6401,9,274,3,274,6403,8,274,1,275,
		1,275,1,275,3,275,6408,8,275,1,275,1,275,1,275,3,275,6413,8,275,1,275,
		1,275,1,275,1,275,5,275,6419,8,275,10,275,12,275,6422,9,275,3,275,6424,
		8,275,1,276,1,276,1,276,1,276,1,276,1,276,3,276,6432,8,276,1,277,1,277,
		3,277,6436,8,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,
		5,277,6447,8,277,10,277,12,277,6450,9,277,1,277,1,277,1,277,3,277,6455,
		8,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,5,277,6465,8,277,
		10,277,12,277,6468,9,277,3,277,6470,8,277,1,278,1,278,1,279,1,279,1,279,
		1,279,1,279,3,279,6479,8,279,1,279,1,279,1,279,3,279,6484,8,279,1,280,
		1,280,1,280,1,280,3,280,6490,8,280,1,281,1,281,1,282,1,282,3,282,6496,
		8,282,1,283,1,283,1,283,3,283,6501,8,283,3,283,6503,8,283,1,283,1,283,
		1,283,3,283,6508,8,283,3,283,6510,8,283,1,284,1,284,3,284,6514,8,284,1,
		284,1,284,1,284,1,284,3,284,6520,8,284,1,284,3,284,6523,8,284,1,284,3,
		284,6526,8,284,1,285,1,285,1,285,1,285,3,285,6532,8,285,1,286,1,286,1,
		287,1,287,1,287,1,287,1,287,3,287,6541,8,287,1,288,1,288,1,289,1,289,1,
		289,1,289,3,289,6549,8,289,1,290,1,290,3,290,6553,8,290,1,291,1,291,1,
		291,3,291,6558,8,291,1,292,1,292,1,293,1,293,1,294,1,294,1,294,1,294,1,
		294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,1,294,4,294,6578,8,
		294,11,294,12,294,6579,1,295,1,295,1,295,1,295,1,295,3,295,6587,8,295,
		3,295,6589,8,295,1,296,1,296,1,296,4,296,6594,8,296,11,296,12,296,6595,
		3,296,6598,8,296,1,297,1,297,3,297,6602,8,297,1,298,1,298,1,298,3,298,
		6607,8,298,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,3,299,
		6618,8,299,1,300,1,300,1,300,3,300,6623,8,300,1,301,1,301,1,302,1,302,
		3,302,6629,8,302,1,303,3,303,6632,8,303,1,303,1,303,3,303,6636,8,303,1,
		303,4,303,6639,8,303,11,303,12,303,6640,1,303,3,303,6644,8,303,1,303,1,
		303,3,303,6648,8,303,1,303,1,303,3,303,6652,8,303,3,303,6654,8,303,1,304,
		1,304,1,305,3,305,6659,8,305,1,305,1,305,1,306,3,306,6664,8,306,1,306,
		1,306,1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,1,307,3,307,6677,
		8,307,1,307,3,307,6680,8,307,1,308,1,308,3,308,6684,8,308,1,308,3,308,
		6687,8,308,1,308,3,308,6690,8,308,1,308,1,308,1,308,3,308,6695,8,308,1,
		308,1,308,1,308,3,308,6700,8,308,1,308,1,308,1,308,3,308,6705,8,308,1,
		308,3,308,6708,8,308,1,308,1,308,1,308,3,308,6713,8,308,1,308,3,308,6716,
		8,308,1,308,1,308,1,308,1,308,3,308,6722,8,308,1,308,3,308,6725,8,308,
		1,308,1,308,3,308,6729,8,308,1,308,5,308,6732,8,308,10,308,12,308,6735,
		9,308,1,308,1,308,3,308,6739,8,308,1,308,5,308,6742,8,308,10,308,12,308,
		6745,9,308,1,308,1,308,3,308,6749,8,308,1,308,3,308,6752,8,308,1,308,5,
		308,6755,8,308,10,308,12,308,6758,9,308,1,308,1,308,3,308,6762,8,308,1,
		308,5,308,6765,8,308,10,308,12,308,6768,9,308,1,308,1,308,1,308,3,308,
		6773,8,308,1,308,1,308,1,308,3,308,6778,8,308,1,308,1,308,1,308,3,308,
		6783,8,308,1,308,1,308,1,308,3,308,6788,8,308,1,308,3,308,6791,8,308,1,
		308,1,308,1,308,3,308,6796,8,308,1,308,1,308,3,308,6800,8,308,1,308,1,
		308,1,308,3,308,6805,8,308,1,309,1,309,1,309,1,309,5,309,6811,8,309,10,
		309,12,309,6814,9,309,1,309,1,309,1,310,1,310,1,311,1,311,3,311,6822,8,
		311,1,311,1,311,3,311,6826,8,311,1,311,1,311,1,311,3,311,6831,8,311,1,
		311,1,311,1,311,3,311,6836,8,311,1,311,1,311,3,311,6840,8,311,3,311,6842,
		8,311,1,311,3,311,6845,8,311,1,312,1,312,1,312,1,312,1,313,1,313,1,313,
		1,313,1,313,1,313,1,314,1,314,1,314,1,314,3,314,6861,8,314,1,314,1,314,
		1,315,1,315,1,315,5,315,6868,8,315,10,315,12,315,6871,9,315,1,316,1,316,
		1,316,5,316,6876,8,316,10,316,12,316,6879,9,316,1,317,1,317,1,317,1,317,
		5,317,6885,8,317,10,317,12,317,6888,9,317,1,317,1,317,1,318,1,318,1,318,
		5,318,6895,8,318,10,318,12,318,6898,9,318,1,319,1,319,1,319,5,319,6903,
		8,319,10,319,12,319,6906,9,319,1,320,1,320,1,320,5,320,6911,8,320,10,320,
		12,320,6914,9,320,1,321,1,321,1,321,5,321,6919,8,321,10,321,12,321,6922,
		9,321,1,322,1,322,1,322,5,322,6927,8,322,10,322,12,322,6930,9,322,1,323,
		1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,3,323,6941,8,323,1,323,
		1,323,1,323,1,323,1,323,3,323,6948,8,323,1,323,1,323,1,323,1,323,1,323,
		1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,1,323,
		3,323,6967,8,323,1,324,1,324,1,324,3,324,6972,8,324,1,324,3,324,6975,8,
		324,1,324,1,324,1,324,3,324,6980,8,324,1,324,3,324,6983,8,324,1,325,1,
		325,3,325,6987,8,325,1,326,1,326,1,326,1,327,1,327,1,327,1,327,1,328,1,
		328,1,328,1,329,1,329,1,329,3,329,7002,8,329,1,330,1,330,1,330,3,330,7007,
		8,330,1,331,1,331,1,331,1,331,1,331,1,331,3,331,7015,8,331,1,331,1,331,
		1,331,1,331,1,331,3,331,7022,8,331,1,331,1,331,1,331,3,331,7027,8,331,
		1,332,1,332,1,332,3,332,7032,8,332,1,332,1,332,1,332,1,332,1,332,1,332,
		1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,
		1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,4,332,
		7063,8,332,11,332,12,332,7064,1,332,1,332,3,332,7069,8,332,1,332,1,332,
		1,332,1,332,4,332,7075,8,332,11,332,12,332,7076,1,332,1,332,3,332,7081,
		8,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,3,332,7090,8,332,1,332,
		1,332,1,332,1,332,1,332,1,332,3,332,7098,8,332,1,332,1,332,1,332,3,332,
		7103,8,332,1,332,1,332,1,332,1,332,1,332,1,332,3,332,7111,8,332,1,332,
		1,332,1,332,3,332,7116,8,332,1,332,1,332,1,332,3,332,7121,8,332,3,332,
		7123,8,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,3,332,7132,8,332,
		1,332,1,332,1,332,3,332,7137,8,332,1,332,1,332,1,332,1,332,1,332,1,332,
		3,332,7145,8,332,1,332,1,332,1,332,3,332,7150,8,332,1,332,1,332,1,332,
		1,332,1,332,1,332,3,332,7158,8,332,1,332,1,332,1,332,1,332,1,332,1,332,
		3,332,7166,8,332,1,332,3,332,7169,8,332,1,332,1,332,1,332,1,332,1,332,
		1,332,1,332,1,332,3,332,7179,8,332,1,332,1,332,1,332,1,332,1,332,1,332,
		1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,3,332,7197,
		8,332,1,332,3,332,7200,8,332,1,332,3,332,7203,8,332,1,332,1,332,3,332,
		7207,8,332,1,333,1,333,1,333,1,333,1,333,1,334,1,334,1,334,1,334,5,334,
		7218,8,334,10,334,12,334,7221,9,334,1,334,1,334,1,334,1,334,1,334,3,334,
		7228,8,334,1,335,1,335,3,335,7232,8,335,1,336,1,336,1,336,3,336,7237,8,
		336,1,336,1,336,1,336,3,336,7242,8,336,1,336,1,336,1,336,1,336,3,336,7248,
		8,336,1,336,1,336,1,336,3,336,7253,8,336,1,336,1,336,3,336,7257,8,336,
		1,336,1,336,1,336,3,336,7262,8,336,1,336,1,336,1,336,3,336,7267,8,336,
		1,336,1,336,1,336,3,336,7272,8,336,1,336,1,336,1,336,1,336,1,336,1,336,
		5,336,7280,8,336,10,336,12,336,7283,9,336,3,336,7285,8,336,1,336,1,336,
		3,336,7289,8,336,1,336,1,336,3,336,7293,8,336,1,337,1,337,1,337,1,337,
		1,337,3,337,7300,8,337,1,337,1,337,3,337,7304,8,337,1,337,1,337,1,337,
		1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,
		1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,1,337,
		3,337,7333,8,337,1,338,1,338,1,338,3,338,7338,8,338,1,338,1,338,3,338,
		7342,8,338,1,339,3,339,7345,8,339,1,339,3,339,7348,8,339,1,339,3,339,7351,
		8,339,1,339,3,339,7354,8,339,1,340,1,340,1,341,1,341,1,341,1,342,1,342,
		1,343,1,343,3,343,7365,8,343,1,344,1,344,1,344,1,344,1,344,1,345,1,345,
		1,345,1,345,1,345,1,345,1,345,3,345,7379,8,345,1,346,1,346,1,346,1,346,
		1,346,5,346,7386,8,346,10,346,12,346,7389,9,346,1,347,1,347,1,347,1,347,
		1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,1,347,
		1,347,1,347,1,347,1,347,1,347,1,347,1,347,3,347,7414,8,347,1,348,1,348,
		1,348,1,348,1,348,1,349,1,349,1,349,1,349,3,349,7425,8,349,1,349,1,349,
		1,349,1,349,1,349,3,349,7432,8,349,5,349,7434,8,349,10,349,12,349,7437,
		9,349,1,350,1,350,1,350,1,350,3,350,7443,8,350,1,351,1,351,1,351,1,351,
		1,351,1,351,3,351,7451,8,351,1,351,1,351,1,351,3,351,7456,8,351,1,351,
		1,351,1,351,1,351,5,351,7462,8,351,10,351,12,351,7465,9,351,1,352,1,352,
		1,352,1,352,1,352,1,352,1,352,1,352,1,352,3,352,7476,8,352,1,352,1,352,
		1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,3,352,7489,8,352,
		1,352,1,352,1,352,1,352,3,352,7495,8,352,1,352,1,352,1,352,1,352,3,352,
		7501,8,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,
		1,352,1,352,1,352,1,352,3,352,7517,8,352,1,352,1,352,1,352,1,352,3,352,
		7523,8,352,1,352,1,352,1,352,1,352,1,352,1,352,1,352,5,352,7532,8,352,
		10,352,12,352,7535,9,352,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
		1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,5,353,7554,8,353,
		10,353,12,353,7557,9,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,4,353,
		7566,8,353,11,353,12,353,7567,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
		1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,3,353,7585,8,353,1,353,
		1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,
		1,353,1,353,5,353,7602,8,353,10,353,12,353,7605,9,353,1,354,1,354,1,355,
		1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,1,355,
		1,355,3,355,7623,8,355,1,356,1,356,1,356,1,356,1,356,1,356,1,356,3,356,
		7632,8,356,1,357,1,357,1,357,1,357,1,357,1,357,1,357,3,357,7641,8,357,
		1,358,1,358,1,359,1,359,1,359,1,359,1,359,3,359,7650,8,359,1,360,1,360,
		1,361,1,361,1,362,1,362,1,363,1,363,1,364,1,364,1,365,1,365,1,366,1,366,
		1,366,0,3,702,704,706,367,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
		122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
		158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,
		194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
		230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,
		266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,
		302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,
		338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,
		374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,
		410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,
		446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,
		482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,
		518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,
		554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,
		590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,622,624,
		626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,
		662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,
		698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,
		0,154,2,0,40,40,151,151,2,0,536,536,542,542,3,0,69,69,159,159,183,183,
		5,0,43,43,388,388,458,458,462,462,528,528,4,0,43,43,423,423,534,534,617,
		617,2,0,519,519,1173,1173,2,0,78,78,142,142,2,0,15,15,337,337,3,0,45,45,
		85,85,186,186,2,0,438,438,563,563,3,0,511,511,657,657,666,666,2,0,396,
		396,464,464,2,0,356,356,478,478,2,0,20,20,1149,1149,2,0,195,195,1149,1149,
		2,0,43,43,1163,1164,3,0,354,354,447,447,609,609,2,0,463,463,681,681,2,
		0,526,526,693,693,3,0,80,80,84,84,125,125,3,0,43,43,406,406,435,435,3,
		0,43,43,402,402,803,803,3,0,644,644,680,680,1122,1122,2,0,81,81,91,91,
		3,0,440,440,553,553,619,619,2,0,69,69,159,159,1,0,360,361,1,0,1163,1164,
		2,0,1173,1173,1181,1181,2,0,81,81,392,392,2,0,550,550,1173,1173,2,0,551,
		551,1173,1173,3,0,434,434,473,473,526,526,7,0,43,43,374,374,376,376,406,
		406,435,435,579,579,1181,1181,2,0,519,519,535,535,1,0,1164,1165,2,0,36,
		36,449,449,2,0,5,5,52,52,2,0,27,27,31,31,2,0,12,12,177,177,2,0,195,195,
		685,685,3,0,43,43,388,388,458,458,2,0,22,22,145,145,3,0,44,44,75,75,106,
		106,2,0,106,106,378,378,2,0,369,369,431,431,2,0,101,101,607,607,2,0,44,
		44,106,106,2,0,6,6,50,50,2,0,190,190,677,677,4,0,434,434,473,473,525,525,
		567,567,2,0,434,434,525,525,2,0,13,13,46,46,3,0,66,66,78,78,188,188,2,
		0,35,35,83,83,2,0,97,97,149,149,2,0,6,6,50,51,1,0,633,634,2,0,174,174,
		753,753,2,0,443,443,615,615,2,0,229,229,482,482,5,0,107,107,487,488,490,
		490,494,502,581,581,4,0,484,485,489,489,491,492,582,582,3,0,108,108,483,
		483,493,493,2,0,466,466,635,635,2,0,629,629,631,631,2,0,348,348,636,636,
		2,0,90,90,597,597,2,0,52,52,394,394,3,0,32,32,61,61,181,181,3,0,132,132,
		174,174,441,441,2,0,195,195,1117,1117,3,0,12,12,20,20,189,189,2,0,12,12,
		189,189,2,0,43,43,121,121,2,0,103,103,184,184,4,0,364,364,482,482,620,
		620,1127,1127,3,0,41,41,152,152,679,679,3,0,711,711,1130,1130,1132,1132,
		2,0,115,115,478,478,2,0,426,426,574,574,4,0,209,209,211,211,217,217,645,
		645,2,0,1133,1133,1149,1149,2,0,68,68,80,80,7,0,132,132,174,174,179,179,
		419,419,441,441,613,613,679,679,2,0,518,518,641,641,2,0,416,416,683,683,
		2,0,132,132,441,441,3,0,81,81,92,92,456,456,2,0,620,620,1127,1127,1,0,
		707,710,3,0,443,443,478,478,615,615,2,0,641,641,678,678,2,0,349,349,482,
		482,2,0,621,621,1128,1128,2,0,380,380,572,572,6,0,229,229,413,413,415,
		415,442,442,580,580,622,622,2,0,46,47,62,62,3,0,426,426,555,555,896,896,
		2,0,470,470,659,659,10,0,363,363,371,371,382,384,391,391,512,512,520,520,
		646,646,653,653,847,847,1015,1015,2,0,36,36,168,168,2,0,117,117,1006,1006,
		11,0,363,363,371,371,382,384,391,391,512,512,520,520,598,598,646,646,653,
		653,847,847,1015,1015,2,0,1162,1162,1183,1184,1,0,1184,1185,2,0,379,379,
		798,809,2,0,408,408,1173,1173,3,0,1163,1165,1174,1174,1176,1176,2,0,63,
		63,180,180,2,0,116,116,1177,1177,5,0,26,26,225,227,234,234,236,239,523,
		523,2,0,26,26,225,226,2,0,26,26,225,225,1,0,199,210,3,0,185,185,198,198,
		618,618,2,0,214,219,435,435,6,0,220,220,231,231,233,233,235,235,242,242,
		352,353,4,0,221,224,229,230,232,232,350,350,2,0,154,154,240,240,2,0,470,
		470,814,822,2,0,229,229,523,523,5,0,203,203,209,209,220,221,223,223,470,
		470,2,0,185,185,618,618,1,0,1118,1119,2,0,525,525,1121,1121,2,0,318,321,
		325,325,4,0,38,38,151,151,316,321,334,334,1,0,328,329,3,0,18,18,95,95,
		178,178,2,0,225,225,229,229,2,0,220,221,223,223,3,0,13,13,46,46,1004,1004,
		3,0,289,289,301,302,312,312,3,0,290,292,308,311,313,315,2,0,298,298,300,
		300,2,0,296,296,299,299,2,0,294,295,305,307,2,0,134,134,607,607,2,0,437,
		437,564,564,2,0,540,540,556,556,2,0,114,114,1152,1152,3,0,63,63,180,180,
		670,670,2,0,138,138,150,150,3,0,6,6,340,340,625,625,3,0,114,114,1145,1146,
		1152,1153,1,0,1142,1148,2,0,229,229,757,797,1,0,810,813,5,0,720,721,736,
		738,744,744,750,751,753,753,1,0,699,706,3,0,220,224,237,237,240,240,53,
		0,14,14,17,17,19,19,30,30,36,38,43,43,49,49,56,56,59,59,73,73,79,79,94,
		94,104,104,110,111,117,117,121,121,124,124,130,131,158,158,168,168,170,
		170,242,242,286,293,297,297,301,302,308,315,335,344,346,436,438,462,464,
		549,552,563,565,598,600,643,645,680,682,683,685,698,707,711,713,719,722,
		723,728,729,731,735,739,743,745,745,747,749,752,752,754,756,803,803,847,
		847,886,886,1010,1010,1015,1015,1105,1105,1117,1132,23,0,40,40,97,97,149,
		149,151,151,220,222,224,224,254,285,293,296,298,300,303,307,327,327,463,
		463,681,681,699,706,747,747,814,814,817,846,848,885,887,1009,1011,1014,
		1016,1116,1118,1120,1148,1148,9057,0,735,1,0,0,0,2,754,1,0,0,0,4,769,1,
		0,0,0,6,780,1,0,0,0,8,796,1,0,0,0,10,839,1,0,0,0,12,852,1,0,0,0,14,863,
		1,0,0,0,16,880,1,0,0,0,18,885,1,0,0,0,20,900,1,0,0,0,22,928,1,0,0,0,24,
		937,1,0,0,0,26,939,1,0,0,0,28,951,1,0,0,0,30,981,1,0,0,0,32,1026,1,0,0,
		0,34,1077,1,0,0,0,36,1106,1,0,0,0,38,1145,1,0,0,0,40,1158,1,0,0,0,42,1264,
		1,0,0,0,44,1266,1,0,0,0,46,1284,1,0,0,0,48,1345,1,0,0,0,50,1367,1,0,0,
		0,52,1373,1,0,0,0,54,1395,1,0,0,0,56,1397,1,0,0,0,58,1399,1,0,0,0,60,1446,
		1,0,0,0,62,1504,1,0,0,0,64,1539,1,0,0,0,66,1546,1,0,0,0,68,1548,1,0,0,
		0,70,1553,1,0,0,0,72,1594,1,0,0,0,74,1600,1,0,0,0,76,1602,1,0,0,0,78,1623,
		1,0,0,0,80,1630,1,0,0,0,82,1632,1,0,0,0,84,1665,1,0,0,0,86,1668,1,0,0,
		0,88,1673,1,0,0,0,90,1699,1,0,0,0,92,1715,1,0,0,0,94,1717,1,0,0,0,96,1733,
		1,0,0,0,98,1735,1,0,0,0,100,1795,1,0,0,0,102,1866,1,0,0,0,104,1868,1,0,
		0,0,106,1896,1,0,0,0,108,1904,1,0,0,0,110,1934,1,0,0,0,112,2130,1,0,0,
		0,114,2132,1,0,0,0,116,2134,1,0,0,0,118,2137,1,0,0,0,120,2231,1,0,0,0,
		122,2233,1,0,0,0,124,2244,1,0,0,0,126,2269,1,0,0,0,128,2417,1,0,0,0,130,
		2422,1,0,0,0,132,2424,1,0,0,0,134,2434,1,0,0,0,136,2490,1,0,0,0,138,2510,
		1,0,0,0,140,2512,1,0,0,0,142,2547,1,0,0,0,144,2556,1,0,0,0,146,2563,1,
		0,0,0,148,2586,1,0,0,0,150,2595,1,0,0,0,152,2610,1,0,0,0,154,2638,1,0,
		0,0,156,2658,1,0,0,0,158,2690,1,0,0,0,160,3024,1,0,0,0,162,3130,1,0,0,
		0,164,3132,1,0,0,0,166,3139,1,0,0,0,168,3146,1,0,0,0,170,3175,1,0,0,0,
		172,3183,1,0,0,0,174,3190,1,0,0,0,176,3197,1,0,0,0,178,3204,1,0,0,0,180,
		3219,1,0,0,0,182,3229,1,0,0,0,184,3236,1,0,0,0,186,3252,1,0,0,0,188,3298,
		1,0,0,0,190,3300,1,0,0,0,192,3319,1,0,0,0,194,3332,1,0,0,0,196,3339,1,
		0,0,0,198,3347,1,0,0,0,200,3359,1,0,0,0,202,3361,1,0,0,0,204,3368,1,0,
		0,0,206,3370,1,0,0,0,208,3421,1,0,0,0,210,3495,1,0,0,0,212,3554,1,0,0,
		0,214,3649,1,0,0,0,216,3653,1,0,0,0,218,3655,1,0,0,0,220,3690,1,0,0,0,
		222,3692,1,0,0,0,224,3700,1,0,0,0,226,3708,1,0,0,0,228,3713,1,0,0,0,230,
		3743,1,0,0,0,232,3798,1,0,0,0,234,3807,1,0,0,0,236,3827,1,0,0,0,238,3839,
		1,0,0,0,240,3843,1,0,0,0,242,3876,1,0,0,0,244,3897,1,0,0,0,246,3907,1,
		0,0,0,248,3911,1,0,0,0,250,3937,1,0,0,0,252,3979,1,0,0,0,254,3981,1,0,
		0,0,256,3996,1,0,0,0,258,4048,1,0,0,0,260,4058,1,0,0,0,262,4068,1,0,0,
		0,264,4128,1,0,0,0,266,4130,1,0,0,0,268,4156,1,0,0,0,270,4162,1,0,0,0,
		272,4170,1,0,0,0,274,4187,1,0,0,0,276,4203,1,0,0,0,278,4240,1,0,0,0,280,
		4246,1,0,0,0,282,4255,1,0,0,0,284,4268,1,0,0,0,286,4272,1,0,0,0,288,4310,
		1,0,0,0,290,4348,1,0,0,0,292,4362,1,0,0,0,294,4370,1,0,0,0,296,4374,1,
		0,0,0,298,4380,1,0,0,0,300,4394,1,0,0,0,302,4397,1,0,0,0,304,4415,1,0,
		0,0,306,4419,1,0,0,0,308,4435,1,0,0,0,310,4437,1,0,0,0,312,4449,1,0,0,
		0,314,4453,1,0,0,0,316,4470,1,0,0,0,318,4487,1,0,0,0,320,4490,1,0,0,0,
		322,4500,1,0,0,0,324,4504,1,0,0,0,326,4517,1,0,0,0,328,4520,1,0,0,0,330,
		4525,1,0,0,0,332,4545,1,0,0,0,334,4547,1,0,0,0,336,4564,1,0,0,0,338,4573,
		1,0,0,0,340,4582,1,0,0,0,342,4584,1,0,0,0,344,4598,1,0,0,0,346,4609,1,
		0,0,0,348,4618,1,0,0,0,350,4621,1,0,0,0,352,4629,1,0,0,0,354,4654,1,0,
		0,0,356,4666,1,0,0,0,358,4669,1,0,0,0,360,4701,1,0,0,0,362,4703,1,0,0,
		0,364,4705,1,0,0,0,366,4707,1,0,0,0,368,4709,1,0,0,0,370,4762,1,0,0,0,
		372,4764,1,0,0,0,374,4770,1,0,0,0,376,4790,1,0,0,0,378,4804,1,0,0,0,380,
		4815,1,0,0,0,382,4817,1,0,0,0,384,4823,1,0,0,0,386,4833,1,0,0,0,388,4837,
		1,0,0,0,390,4844,1,0,0,0,392,4848,1,0,0,0,394,4854,1,0,0,0,396,4861,1,
		0,0,0,398,4867,1,0,0,0,400,4873,1,0,0,0,402,4878,1,0,0,0,404,4925,1,0,
		0,0,406,4946,1,0,0,0,408,4971,1,0,0,0,410,4974,1,0,0,0,412,4980,1,0,0,
		0,414,4996,1,0,0,0,416,5011,1,0,0,0,418,5017,1,0,0,0,420,5047,1,0,0,0,
		422,5049,1,0,0,0,424,5056,1,0,0,0,426,5068,1,0,0,0,428,5074,1,0,0,0,430,
		5099,1,0,0,0,432,5103,1,0,0,0,434,5107,1,0,0,0,436,5118,1,0,0,0,438,5186,
		1,0,0,0,440,5248,1,0,0,0,442,5250,1,0,0,0,444,5356,1,0,0,0,446,5380,1,
		0,0,0,448,5382,1,0,0,0,450,5400,1,0,0,0,452,5474,1,0,0,0,454,5476,1,0,
		0,0,456,5489,1,0,0,0,458,5500,1,0,0,0,460,5530,1,0,0,0,462,5541,1,0,0,
		0,464,5551,1,0,0,0,466,5561,1,0,0,0,468,5601,1,0,0,0,470,5603,1,0,0,0,
		472,5606,1,0,0,0,474,5736,1,0,0,0,476,5754,1,0,0,0,478,5756,1,0,0,0,480,
		5760,1,0,0,0,482,5798,1,0,0,0,484,5807,1,0,0,0,486,5813,1,0,0,0,488,5822,
		1,0,0,0,490,5844,1,0,0,0,492,5846,1,0,0,0,494,5863,1,0,0,0,496,5869,1,
		0,0,0,498,5925,1,0,0,0,500,6118,1,0,0,0,502,6120,1,0,0,0,504,6138,1,0,
		0,0,506,6153,1,0,0,0,508,6159,1,0,0,0,510,6194,1,0,0,0,512,6204,1,0,0,
		0,514,6218,1,0,0,0,516,6220,1,0,0,0,518,6223,1,0,0,0,520,6259,1,0,0,0,
		522,6261,1,0,0,0,524,6267,1,0,0,0,526,6279,1,0,0,0,528,6283,1,0,0,0,530,
		6285,1,0,0,0,532,6327,1,0,0,0,534,6334,1,0,0,0,536,6336,1,0,0,0,538,6359,
		1,0,0,0,540,6365,1,0,0,0,542,6373,1,0,0,0,544,6377,1,0,0,0,546,6380,1,
		0,0,0,548,6383,1,0,0,0,550,6404,1,0,0,0,552,6425,1,0,0,0,554,6433,1,0,
		0,0,556,6471,1,0,0,0,558,6483,1,0,0,0,560,6485,1,0,0,0,562,6491,1,0,0,
		0,564,6495,1,0,0,0,566,6509,1,0,0,0,568,6522,1,0,0,0,570,6531,1,0,0,0,
		572,6533,1,0,0,0,574,6540,1,0,0,0,576,6542,1,0,0,0,578,6548,1,0,0,0,580,
		6552,1,0,0,0,582,6557,1,0,0,0,584,6559,1,0,0,0,586,6561,1,0,0,0,588,6563,
		1,0,0,0,590,6581,1,0,0,0,592,6597,1,0,0,0,594,6601,1,0,0,0,596,6606,1,
		0,0,0,598,6617,1,0,0,0,600,6622,1,0,0,0,602,6624,1,0,0,0,604,6628,1,0,
		0,0,606,6653,1,0,0,0,608,6655,1,0,0,0,610,6658,1,0,0,0,612,6663,1,0,0,
		0,614,6679,1,0,0,0,616,6804,1,0,0,0,618,6806,1,0,0,0,620,6817,1,0,0,0,
		622,6841,1,0,0,0,624,6846,1,0,0,0,626,6850,1,0,0,0,628,6856,1,0,0,0,630,
		6864,1,0,0,0,632,6872,1,0,0,0,634,6880,1,0,0,0,636,6891,1,0,0,0,638,6899,
		1,0,0,0,640,6907,1,0,0,0,642,6915,1,0,0,0,644,6923,1,0,0,0,646,6966,1,
		0,0,0,648,6982,1,0,0,0,650,6986,1,0,0,0,652,6988,1,0,0,0,654,6991,1,0,
		0,0,656,6995,1,0,0,0,658,7001,1,0,0,0,660,7006,1,0,0,0,662,7026,1,0,0,
		0,664,7206,1,0,0,0,666,7208,1,0,0,0,668,7227,1,0,0,0,670,7229,1,0,0,0,
		672,7292,1,0,0,0,674,7332,1,0,0,0,676,7334,1,0,0,0,678,7344,1,0,0,0,680,
		7355,1,0,0,0,682,7357,1,0,0,0,684,7360,1,0,0,0,686,7364,1,0,0,0,688,7366,
		1,0,0,0,690,7378,1,0,0,0,692,7380,1,0,0,0,694,7413,1,0,0,0,696,7415,1,
		0,0,0,698,7424,1,0,0,0,700,7442,1,0,0,0,702,7455,1,0,0,0,704,7466,1,0,
		0,0,706,7584,1,0,0,0,708,7606,1,0,0,0,710,7622,1,0,0,0,712,7631,1,0,0,
		0,714,7640,1,0,0,0,716,7642,1,0,0,0,718,7649,1,0,0,0,720,7651,1,0,0,0,
		722,7653,1,0,0,0,724,7655,1,0,0,0,726,7657,1,0,0,0,728,7659,1,0,0,0,730,
		7661,1,0,0,0,732,7663,1,0,0,0,734,736,3,2,1,0,735,734,1,0,0,0,735,736,
		1,0,0,0,736,739,1,0,0,0,737,738,5,1146,0,0,738,740,5,1146,0,0,739,737,
		1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,742,5,0,0,1,742,1,1,0,0,0,
		743,746,3,4,2,0,744,745,5,1146,0,0,745,747,5,1146,0,0,746,744,1,0,0,0,
		746,747,1,0,0,0,747,749,1,0,0,0,748,750,5,1161,0,0,749,748,1,0,0,0,749,
		750,1,0,0,0,750,753,1,0,0,0,751,753,3,8,4,0,752,743,1,0,0,0,752,751,1,
		0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,754,755,1,0,0,0,755,766,1,0,0,0,
		756,754,1,0,0,0,757,763,3,4,2,0,758,759,5,1146,0,0,759,761,5,1146,0,0,
		760,758,1,0,0,0,760,761,1,0,0,0,761,762,1,0,0,0,762,764,5,1161,0,0,763,
		760,1,0,0,0,763,764,1,0,0,0,764,767,1,0,0,0,765,767,3,8,4,0,766,757,1,
		0,0,0,766,765,1,0,0,0,767,3,1,0,0,0,768,770,3,6,3,0,769,768,1,0,0,0,769,
		770,1,0,0,0,770,778,1,0,0,0,771,779,3,10,5,0,772,779,3,12,6,0,773,779,
		3,14,7,0,774,779,3,16,8,0,775,779,3,18,9,0,776,779,3,22,11,0,777,779,3,
		24,12,0,778,771,1,0,0,0,778,772,1,0,0,0,778,773,1,0,0,0,778,774,1,0,0,
		0,778,775,1,0,0,0,778,776,1,0,0,0,778,777,1,0,0,0,779,5,1,0,0,0,780,781,
		5,154,0,0,781,782,5,170,0,0,782,783,5,1181,0,0,783,784,5,1149,0,0,784,
		791,3,614,307,0,785,786,5,1160,0,0,786,787,5,1181,0,0,787,788,5,1149,0,
		0,788,790,3,614,307,0,789,785,1,0,0,0,790,793,1,0,0,0,791,789,1,0,0,0,
		791,792,1,0,0,0,792,794,1,0,0,0,793,791,1,0,0,0,794,795,5,65,0,0,795,7,
		1,0,0,0,796,797,5,1161,0,0,797,9,1,0,0,0,798,840,3,26,13,0,799,840,3,28,
		14,0,800,840,3,30,15,0,801,840,3,32,16,0,802,840,3,34,17,0,803,840,3,36,
		18,0,804,840,3,40,20,0,805,840,3,42,21,0,806,840,3,44,22,0,807,840,3,46,
		23,0,808,840,3,48,24,0,809,840,3,58,29,0,810,840,3,38,19,0,811,840,3,60,
		30,0,812,840,3,138,69,0,813,840,3,140,70,0,814,840,3,142,71,0,815,840,
		3,144,72,0,816,840,3,146,73,0,817,840,3,148,74,0,818,840,3,150,75,0,819,
		840,3,152,76,0,820,840,3,154,77,0,821,840,3,156,78,0,822,840,3,158,79,
		0,823,840,3,164,82,0,824,840,3,166,83,0,825,840,3,168,84,0,826,840,3,170,
		85,0,827,840,3,172,86,0,828,840,3,174,87,0,829,840,3,176,88,0,830,840,
		3,178,89,0,831,840,3,180,90,0,832,840,3,182,91,0,833,840,3,184,92,0,834,
		840,3,186,93,0,835,840,3,190,95,0,836,840,3,188,94,0,837,840,3,192,96,
		0,838,840,3,196,98,0,839,798,1,0,0,0,839,799,1,0,0,0,839,800,1,0,0,0,839,
		801,1,0,0,0,839,802,1,0,0,0,839,803,1,0,0,0,839,804,1,0,0,0,839,805,1,
		0,0,0,839,806,1,0,0,0,839,807,1,0,0,0,839,808,1,0,0,0,839,809,1,0,0,0,
		839,810,1,0,0,0,839,811,1,0,0,0,839,812,1,0,0,0,839,813,1,0,0,0,839,814,
		1,0,0,0,839,815,1,0,0,0,839,816,1,0,0,0,839,817,1,0,0,0,839,818,1,0,0,
		0,839,819,1,0,0,0,839,820,1,0,0,0,839,821,1,0,0,0,839,822,1,0,0,0,839,
		823,1,0,0,0,839,824,1,0,0,0,839,825,1,0,0,0,839,826,1,0,0,0,839,827,1,
		0,0,0,839,828,1,0,0,0,839,829,1,0,0,0,839,830,1,0,0,0,839,831,1,0,0,0,
		839,832,1,0,0,0,839,833,1,0,0,0,839,834,1,0,0,0,839,835,1,0,0,0,839,836,
		1,0,0,0,839,837,1,0,0,0,839,838,1,0,0,0,840,11,1,0,0,0,841,853,3,214,107,
		0,842,853,3,206,103,0,843,853,3,216,108,0,844,853,3,200,100,0,845,853,
		3,212,106,0,846,853,3,198,99,0,847,853,3,208,104,0,848,853,3,210,105,0,
		849,853,3,202,101,0,850,853,3,204,102,0,851,853,3,218,109,0,852,841,1,
		0,0,0,852,842,1,0,0,0,852,843,1,0,0,0,852,844,1,0,0,0,852,845,1,0,0,0,
		852,846,1,0,0,0,852,847,1,0,0,0,852,848,1,0,0,0,852,849,1,0,0,0,852,850,
		1,0,0,0,852,851,1,0,0,0,853,13,1,0,0,0,854,864,3,310,155,0,855,864,3,312,
		156,0,856,864,3,314,157,0,857,864,3,316,158,0,858,864,3,318,159,0,859,
		864,3,320,160,0,860,864,3,322,161,0,861,864,3,324,162,0,862,864,3,326,
		163,0,863,854,1,0,0,0,863,855,1,0,0,0,863,856,1,0,0,0,863,857,1,0,0,0,
		863,858,1,0,0,0,863,859,1,0,0,0,863,860,1,0,0,0,863,861,1,0,0,0,863,862,
		1,0,0,0,864,15,1,0,0,0,865,881,3,342,171,0,866,881,3,344,172,0,867,881,
		3,346,173,0,868,881,3,348,174,0,869,881,3,350,175,0,870,881,3,352,176,
		0,871,881,3,354,177,0,872,881,3,356,178,0,873,881,3,358,179,0,874,881,
		3,382,191,0,875,881,3,384,192,0,876,881,3,386,193,0,877,881,3,388,194,
		0,878,881,3,390,195,0,879,881,3,392,196,0,880,865,1,0,0,0,880,866,1,0,
		0,0,880,867,1,0,0,0,880,868,1,0,0,0,880,869,1,0,0,0,880,870,1,0,0,0,880,
		871,1,0,0,0,880,872,1,0,0,0,880,873,1,0,0,0,880,874,1,0,0,0,880,875,1,
		0,0,0,880,876,1,0,0,0,880,877,1,0,0,0,880,878,1,0,0,0,880,879,1,0,0,0,
		881,17,1,0,0,0,882,886,3,394,197,0,883,886,3,396,198,0,884,886,3,398,199,
		0,885,882,1,0,0,0,885,883,1,0,0,0,885,884,1,0,0,0,886,19,1,0,0,0,887,901,
		3,402,201,0,888,901,3,404,202,0,889,901,3,406,203,0,890,901,3,410,205,
		0,891,901,3,412,206,0,892,901,3,414,207,0,893,901,3,418,209,0,894,901,
		3,408,204,0,895,901,3,416,208,0,896,901,3,420,210,0,897,898,3,50,25,0,
		898,899,3,12,6,0,899,901,1,0,0,0,900,887,1,0,0,0,900,888,1,0,0,0,900,889,
		1,0,0,0,900,890,1,0,0,0,900,891,1,0,0,0,900,892,1,0,0,0,900,893,1,0,0,
		0,900,894,1,0,0,0,900,895,1,0,0,0,900,896,1,0,0,0,900,897,1,0,0,0,901,
		21,1,0,0,0,902,929,3,438,219,0,903,929,3,440,220,0,904,929,3,442,221,0,
		905,929,3,444,222,0,906,929,3,448,224,0,907,929,3,450,225,0,908,929,3,
		452,226,0,909,929,3,454,227,0,910,929,3,480,240,0,911,929,3,482,241,0,
		912,929,3,484,242,0,913,929,3,486,243,0,914,929,3,488,244,0,915,929,3,
		492,246,0,916,929,3,494,247,0,917,929,3,496,248,0,918,929,3,498,249,0,
		919,929,3,500,250,0,920,929,3,516,258,0,921,929,3,518,259,0,922,929,3,
		520,260,0,923,929,3,522,261,0,924,929,3,524,262,0,925,929,3,526,263,0,
		926,929,3,528,264,0,927,929,3,502,251,0,928,902,1,0,0,0,928,903,1,0,0,
		0,928,904,1,0,0,0,928,905,1,0,0,0,928,906,1,0,0,0,928,907,1,0,0,0,928,
		908,1,0,0,0,928,909,1,0,0,0,928,910,1,0,0,0,928,911,1,0,0,0,928,912,1,
		0,0,0,928,913,1,0,0,0,928,914,1,0,0,0,928,915,1,0,0,0,928,916,1,0,0,0,
		928,917,1,0,0,0,928,918,1,0,0,0,928,919,1,0,0,0,928,920,1,0,0,0,928,921,
		1,0,0,0,928,922,1,0,0,0,928,923,1,0,0,0,928,924,1,0,0,0,928,925,1,0,0,
		0,928,926,1,0,0,0,928,927,1,0,0,0,929,23,1,0,0,0,930,938,3,538,269,0,931,
		938,3,540,270,0,932,938,3,544,272,0,933,938,3,546,273,0,934,938,3,548,
		274,0,935,938,3,550,275,0,936,938,3,554,277,0,937,930,1,0,0,0,937,931,
		1,0,0,0,937,932,1,0,0,0,937,933,1,0,0,0,937,934,1,0,0,0,937,935,1,0,0,
		0,937,936,1,0,0,0,938,25,1,0,0,0,939,940,5,34,0,0,940,942,7,0,0,0,941,
		943,3,654,327,0,942,941,1,0,0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,948,
		3,596,298,0,945,947,3,64,32,0,946,945,1,0,0,0,947,950,1,0,0,0,948,946,
		1,0,0,0,948,949,1,0,0,0,949,27,1,0,0,0,950,948,1,0,0,0,951,953,5,34,0,
		0,952,954,3,70,35,0,953,952,1,0,0,0,953,954,1,0,0,0,954,955,1,0,0,0,955,
		957,5,419,0,0,956,958,3,654,327,0,957,956,1,0,0,0,957,958,1,0,0,0,958,
		959,1,0,0,0,959,960,3,560,280,0,960,961,5,118,0,0,961,962,5,611,0,0,962,
		969,3,72,36,0,963,964,5,118,0,0,964,966,5,375,0,0,965,967,5,114,0,0,966,
		965,1,0,0,0,966,967,1,0,0,0,967,968,1,0,0,0,968,970,5,566,0,0,969,963,
		1,0,0,0,969,970,1,0,0,0,970,972,1,0,0,0,971,973,3,80,40,0,972,971,1,0,
		0,0,972,973,1,0,0,0,973,976,1,0,0,0,974,975,5,372,0,0,975,977,5,1173,0,
		0,976,974,1,0,0,0,976,977,1,0,0,0,977,978,1,0,0,0,978,979,5,403,0,0,979,
		980,3,400,200,0,980,29,1,0,0,0,981,983,5,34,0,0,982,984,3,656,328,0,983,
		982,1,0,0,0,983,984,1,0,0,0,984,986,1,0,0,0,985,987,7,1,0,0,986,985,1,
		0,0,0,986,987,1,0,0,0,987,989,1,0,0,0,988,990,7,2,0,0,989,988,1,0,0,0,
		989,990,1,0,0,0,990,991,1,0,0,0,991,993,5,81,0,0,992,994,3,654,327,0,993,
		992,1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,997,3,596,298,0,996,998,
		3,82,41,0,997,996,1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1000,5,118,
		0,0,1000,1001,3,562,281,0,1001,1003,3,634,317,0,1002,1004,3,658,329,0,
		1003,1002,1,0,0,0,1003,1004,1,0,0,0,1004,1008,1,0,0,0,1005,1007,3,84,42,
		0,1006,1005,1,0,0,0,1007,1010,1,0,0,0,1008,1006,1,0,0,0,1008,1009,1,0,
		0,0,1009,1023,1,0,0,0,1010,1008,1,0,0,0,1011,1013,5,339,0,0,1012,1014,
		5,1149,0,0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,1015,1,0,0,0,1015,
		1022,7,3,0,0,1016,1018,5,103,0,0,1017,1019,5,1149,0,0,1018,1017,1,0,0,
		0,1018,1019,1,0,0,0,1019,1020,1,0,0,0,1020,1022,7,4,0,0,1021,1011,1,0,
		0,0,1021,1016,1,0,0,0,1022,1025,1,0,0,0,1023,1021,1,0,0,0,1023,1024,1,
		0,0,0,1024,31,1,0,0,0,1025,1023,1,0,0,0,1026,1027,5,34,0,0,1027,1028,5,
		480,0,0,1028,1029,5,73,0,0,1029,1030,3,596,298,0,1030,1031,5,5,0,0,1031,
		1032,5,667,0,0,1032,1038,5,1173,0,0,1033,1035,5,457,0,0,1034,1036,5,1149,
		0,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,1039,3,
		604,302,0,1038,1033,1,0,0,0,1038,1039,1,0,0,0,1039,1045,1,0,0,0,1040,1042,
		5,668,0,0,1041,1043,5,1149,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,
		1044,1,0,0,0,1044,1046,3,604,302,0,1045,1040,1,0,0,0,1045,1046,1,0,0,0,
		1046,1052,1,0,0,0,1047,1049,5,578,0,0,1048,1050,5,1149,0,0,1049,1048,1,
		0,0,0,1049,1050,1,0,0,0,1050,1051,1,0,0,0,1051,1053,3,604,302,0,1052,1047,
		1,0,0,0,1052,1053,1,0,0,0,1053,1059,1,0,0,0,1054,1056,5,533,0,0,1055,1057,
		5,1149,0,0,1056,1055,1,0,0,0,1056,1057,1,0,0,0,1057,1058,1,0,0,0,1058,
		1060,3,596,298,0,1059,1054,1,0,0,0,1059,1060,1,0,0,0,1060,1062,1,0,0,0,
		1061,1063,5,682,0,0,1062,1061,1,0,0,0,1062,1063,1,0,0,0,1063,1069,1,0,
		0,0,1064,1066,5,372,0,0,1065,1067,5,1149,0,0,1066,1065,1,0,0,0,1066,1067,
		1,0,0,0,1067,1068,1,0,0,0,1068,1070,5,1173,0,0,1069,1064,1,0,0,0,1069,
		1070,1,0,0,0,1070,1071,1,0,0,0,1071,1073,5,413,0,0,1072,1074,5,1149,0,
		0,1073,1072,1,0,0,0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,1076,3,582,
		291,0,1076,33,1,0,0,0,1077,1079,5,34,0,0,1078,1080,3,656,328,0,1079,1078,
		1,0,0,0,1079,1080,1,0,0,0,1080,1082,1,0,0,0,1081,1083,3,70,35,0,1082,1081,
		1,0,0,0,1082,1083,1,0,0,0,1083,1084,1,0,0,0,1084,1085,5,132,0,0,1085,1086,
		3,560,280,0,1086,1088,5,1158,0,0,1087,1089,3,86,43,0,1088,1087,1,0,0,0,
		1088,1089,1,0,0,0,1089,1094,1,0,0,0,1090,1091,5,1160,0,0,1091,1093,3,86,
		43,0,1092,1090,1,0,0,0,1093,1096,1,0,0,0,1094,1092,1,0,0,0,1094,1095,1,
		0,0,0,1095,1097,1,0,0,0,1096,1094,1,0,0,0,1097,1101,5,1159,0,0,1098,1100,
		3,90,45,0,1099,1098,1,0,0,0,1100,1103,1,0,0,0,1101,1099,1,0,0,0,1101,1102,
		1,0,0,0,1102,1104,1,0,0,0,1103,1101,1,0,0,0,1104,1105,3,400,200,0,1105,
		35,1,0,0,0,1106,1108,5,34,0,0,1107,1109,3,656,328,0,1108,1107,1,0,0,0,
		1108,1109,1,0,0,0,1109,1111,1,0,0,0,1110,1112,3,70,35,0,1111,1110,1,0,
		0,0,1111,1112,1,0,0,0,1112,1114,1,0,0,0,1113,1115,5,338,0,0,1114,1113,
		1,0,0,0,1114,1115,1,0,0,0,1115,1116,1,0,0,0,1116,1118,5,441,0,0,1117,1119,
		3,654,327,0,1118,1117,1,0,0,0,1118,1119,1,0,0,0,1119,1120,1,0,0,0,1120,
		1121,3,560,280,0,1121,1123,5,1158,0,0,1122,1124,3,88,44,0,1123,1122,1,
		0,0,0,1123,1124,1,0,0,0,1124,1129,1,0,0,0,1125,1126,5,1160,0,0,1126,1128,
		3,88,44,0,1127,1125,1,0,0,0,1128,1131,1,0,0,0,1129,1127,1,0,0,0,1129,1130,
		1,0,0,0,1130,1132,1,0,0,0,1131,1129,1,0,0,0,1132,1133,5,1159,0,0,1133,
		1134,5,600,0,0,1134,1138,3,616,308,0,1135,1137,3,90,45,0,1136,1135,1,0,
		0,0,1137,1140,1,0,0,0,1138,1136,1,0,0,0,1138,1139,1,0,0,0,1139,1143,1,
		0,0,0,1140,1138,1,0,0,0,1141,1144,3,400,200,0,1142,1144,3,416,208,0,1143,
		1141,1,0,0,0,1143,1142,1,0,0,0,1144,37,1,0,0,0,1145,1146,5,34,0,0,1146,
		1148,5,602,0,0,1147,1149,3,654,327,0,1148,1147,1,0,0,0,1148,1149,1,0,0,
		0,1149,1150,1,0,0,0,1150,1155,3,564,282,0,1151,1152,5,1160,0,0,1152,1154,
		3,564,282,0,1153,1151,1,0,0,0,1154,1157,1,0,0,0,1155,1153,1,0,0,0,1155,
		1156,1,0,0,0,1156,39,1,0,0,0,1157,1155,1,0,0,0,1158,1159,5,34,0,0,1159,
		1160,5,614,0,0,1160,1161,3,596,298,0,1161,1162,5,67,0,0,1162,1163,5,392,
		0,0,1163,1164,5,687,0,0,1164,1165,7,5,0,0,1165,1166,5,546,0,0,1166,1167,
		5,1158,0,0,1167,1172,3,92,46,0,1168,1169,5,1160,0,0,1169,1171,3,92,46,
		0,1170,1168,1,0,0,0,1171,1174,1,0,0,0,1172,1170,1,0,0,0,1172,1173,1,0,
		0,0,1173,1175,1,0,0,0,1174,1172,1,0,0,0,1175,1176,5,1159,0,0,1176,41,1,
		0,0,0,1177,1179,5,34,0,0,1178,1180,3,656,328,0,1179,1178,1,0,0,0,1179,
		1180,1,0,0,0,1180,1182,1,0,0,0,1181,1183,5,656,0,0,1182,1181,1,0,0,0,1182,
		1183,1,0,0,0,1183,1184,1,0,0,0,1184,1186,5,174,0,0,1185,1187,3,654,327,
		0,1186,1185,1,0,0,0,1186,1187,1,0,0,0,1187,1188,1,0,0,0,1188,1196,3,562,
		281,0,1189,1190,5,98,0,0,1190,1197,3,562,281,0,1191,1192,5,1158,0,0,1192,
		1193,5,98,0,0,1193,1194,3,562,281,0,1194,1195,5,1159,0,0,1195,1197,1,0,
		0,0,1196,1189,1,0,0,0,1196,1191,1,0,0,0,1197,1265,1,0,0,0,1198,1200,5,
		34,0,0,1199,1201,3,656,328,0,1200,1199,1,0,0,0,1200,1201,1,0,0,0,1201,
		1203,1,0,0,0,1202,1204,5,656,0,0,1203,1202,1,0,0,0,1203,1204,1,0,0,0,1204,
		1205,1,0,0,0,1205,1207,5,174,0,0,1206,1208,3,654,327,0,1207,1206,1,0,0,
		0,1207,1208,1,0,0,0,1208,1209,1,0,0,0,1209,1211,3,562,281,0,1210,1212,
		3,94,47,0,1211,1210,1,0,0,0,1211,1212,1,0,0,0,1212,1223,1,0,0,0,1213,1220,
		3,112,56,0,1214,1216,5,1160,0,0,1215,1214,1,0,0,0,1215,1216,1,0,0,0,1216,
		1217,1,0,0,0,1217,1219,3,112,56,0,1218,1215,1,0,0,0,1219,1222,1,0,0,0,
		1220,1218,1,0,0,0,1220,1221,1,0,0,0,1221,1224,1,0,0,0,1222,1220,1,0,0,
		0,1223,1213,1,0,0,0,1223,1224,1,0,0,0,1224,1226,1,0,0,0,1225,1227,3,118,
		59,0,1226,1225,1,0,0,0,1226,1227,1,0,0,0,1227,1229,1,0,0,0,1228,1230,7,
		6,0,0,1229,1228,1,0,0,0,1229,1230,1,0,0,0,1230,1232,1,0,0,0,1231,1233,
		5,12,0,0,1232,1231,1,0,0,0,1232,1233,1,0,0,0,1233,1234,1,0,0,0,1234,1235,
		3,214,107,0,1235,1265,1,0,0,0,1236,1238,5,34,0,0,1237,1239,3,656,328,0,
		1238,1237,1,0,0,0,1238,1239,1,0,0,0,1239,1241,1,0,0,0,1240,1242,5,656,
		0,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,1243,1,0,0,0,1243,1245,5,
		174,0,0,1244,1246,3,654,327,0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,
		1247,1,0,0,0,1247,1248,3,562,281,0,1248,1259,3,94,47,0,1249,1256,3,112,
		56,0,1250,1252,5,1160,0,0,1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1253,
		1,0,0,0,1253,1255,3,112,56,0,1254,1251,1,0,0,0,1255,1258,1,0,0,0,1256,
		1254,1,0,0,0,1256,1257,1,0,0,0,1257,1260,1,0,0,0,1258,1256,1,0,0,0,1259,
		1249,1,0,0,0,1259,1260,1,0,0,0,1260,1262,1,0,0,0,1261,1263,3,118,59,0,
		1262,1261,1,0,0,0,1262,1263,1,0,0,0,1263,1265,1,0,0,0,1264,1177,1,0,0,
		0,1264,1198,1,0,0,0,1264,1236,1,0,0,0,1265,43,1,0,0,0,1266,1267,5,34,0,
		0,1267,1268,5,654,0,0,1268,1269,3,596,298,0,1269,1270,5,5,0,0,1270,1271,
		5,393,0,0,1271,1275,5,1173,0,0,1272,1273,5,432,0,0,1273,1274,5,1149,0,
		0,1274,1276,3,604,302,0,1275,1272,1,0,0,0,1275,1276,1,0,0,0,1276,1282,
		1,0,0,0,1277,1279,5,413,0,0,1278,1280,5,1149,0,0,1279,1278,1,0,0,0,1279,
		1280,1,0,0,0,1280,1281,1,0,0,0,1281,1283,3,582,291,0,1282,1277,1,0,0,0,
		1282,1283,1,0,0,0,1283,45,1,0,0,0,1284,1285,5,34,0,0,1285,1286,5,654,0,
		0,1286,1287,3,596,298,0,1287,1288,5,5,0,0,1288,1289,5,393,0,0,1289,1290,
		5,1173,0,0,1290,1291,5,188,0,0,1291,1292,5,480,0,0,1292,1293,5,73,0,0,
		1293,1299,3,596,298,0,1294,1296,5,427,0,0,1295,1297,5,1149,0,0,1296,1295,
		1,0,0,0,1296,1297,1,0,0,0,1297,1298,1,0,0,0,1298,1300,3,604,302,0,1299,
		1294,1,0,0,0,1299,1300,1,0,0,0,1300,1306,1,0,0,0,1301,1303,5,457,0,0,1302,
		1304,5,1149,0,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,1305,1,0,0,0,
		1305,1307,3,604,302,0,1306,1301,1,0,0,0,1306,1307,1,0,0,0,1307,1313,1,
		0,0,0,1308,1310,5,344,0,0,1309,1311,5,1149,0,0,1310,1309,1,0,0,0,1310,
		1311,1,0,0,0,1311,1312,1,0,0,0,1312,1314,3,604,302,0,1313,1308,1,0,0,0,
		1313,1314,1,0,0,0,1314,1320,1,0,0,0,1315,1317,5,506,0,0,1316,1318,5,1149,
		0,0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,1319,1,0,0,0,1319,1321,3,
		604,302,0,1320,1315,1,0,0,0,1320,1321,1,0,0,0,1321,1327,1,0,0,0,1322,1324,
		5,533,0,0,1323,1325,5,1149,0,0,1324,1323,1,0,0,0,1324,1325,1,0,0,0,1325,
		1326,1,0,0,0,1326,1328,3,596,298,0,1327,1322,1,0,0,0,1327,1328,1,0,0,0,
		1328,1330,1,0,0,0,1329,1331,5,682,0,0,1330,1329,1,0,0,0,1330,1331,1,0,
		0,0,1331,1337,1,0,0,0,1332,1334,5,372,0,0,1333,1335,5,1149,0,0,1334,1333,
		1,0,0,0,1334,1335,1,0,0,0,1335,1336,1,0,0,0,1336,1338,5,1173,0,0,1337,
		1332,1,0,0,0,1337,1338,1,0,0,0,1338,1339,1,0,0,0,1339,1341,5,413,0,0,1340,
		1342,5,1149,0,0,1341,1340,1,0,0,0,1341,1342,1,0,0,0,1342,1343,1,0,0,0,
		1343,1344,3,582,291,0,1344,47,1,0,0,0,1345,1347,5,34,0,0,1346,1348,3,656,
		328,0,1347,1346,1,0,0,0,1347,1348,1,0,0,0,1348,1350,1,0,0,0,1349,1351,
		3,70,35,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,1352,1,0,0,0,1352,1353,
		5,179,0,0,1353,1354,3,560,280,0,1354,1355,7,7,0,0,1355,1356,7,8,0,0,1356,
		1357,5,118,0,0,1357,1358,3,562,281,0,1358,1359,5,65,0,0,1359,1360,5,53,
		0,0,1360,1363,5,606,0,0,1361,1362,7,9,0,0,1362,1364,3,560,280,0,1363,1361,
		1,0,0,0,1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,1366,3,400,200,0,1366,
		49,1,0,0,0,1367,1369,5,195,0,0,1368,1370,5,577,0,0,1369,1368,1,0,0,0,1369,
		1370,1,0,0,0,1370,1371,1,0,0,0,1371,1372,3,52,26,0,1372,51,1,0,0,0,1373,
		1385,3,54,27,0,1374,1375,5,1158,0,0,1375,1380,3,56,28,0,1376,1377,5,1160,
		0,0,1377,1379,3,56,28,0,1378,1376,1,0,0,0,1379,1382,1,0,0,0,1380,1378,
		1,0,0,0,1380,1381,1,0,0,0,1381,1383,1,0,0,0,1382,1380,1,0,0,0,1383,1384,
		5,1159,0,0,1384,1386,1,0,0,0,1385,1374,1,0,0,0,1385,1386,1,0,0,0,1386,
		1387,1,0,0,0,1387,1388,5,12,0,0,1388,1389,5,1158,0,0,1389,1390,3,12,6,
		0,1390,1393,5,1159,0,0,1391,1392,5,1160,0,0,1392,1394,3,52,26,0,1393,1391,
		1,0,0,0,1393,1394,1,0,0,0,1394,53,1,0,0,0,1395,1396,3,596,298,0,1396,55,
		1,0,0,0,1397,1398,3,596,298,0,1398,57,1,0,0,0,1399,1401,5,34,0,0,1400,
		1402,3,656,328,0,1401,1400,1,0,0,0,1401,1402,1,0,0,0,1402,1406,1,0,0,0,
		1403,1404,5,339,0,0,1404,1405,5,1149,0,0,1405,1407,7,10,0,0,1406,1403,
		1,0,0,0,1406,1407,1,0,0,0,1407,1409,1,0,0,0,1408,1410,3,70,35,0,1409,1408,
		1,0,0,0,1409,1410,1,0,0,0,1410,1414,1,0,0,0,1411,1412,5,160,0,0,1412,1413,
		5,612,0,0,1413,1415,7,11,0,0,1414,1411,1,0,0,0,1414,1415,1,0,0,0,1415,
		1416,1,0,0,0,1416,1417,5,679,0,0,1417,1422,3,560,280,0,1418,1419,5,1158,
		0,0,1419,1420,3,630,315,0,1420,1421,5,1159,0,0,1421,1423,1,0,0,0,1422,
		1418,1,0,0,0,1422,1423,1,0,0,0,1423,1424,1,0,0,0,1424,1444,5,12,0,0,1425,
		1427,5,1158,0,0,1426,1428,3,50,25,0,1427,1426,1,0,0,0,1427,1428,1,0,0,
		0,1428,1429,1,0,0,0,1429,1430,3,214,107,0,1430,1431,5,1159,0,0,1431,1445,
		1,0,0,0,1432,1434,3,50,25,0,1433,1432,1,0,0,0,1433,1434,1,0,0,0,1434,1435,
		1,0,0,0,1435,1442,3,214,107,0,1436,1438,5,195,0,0,1437,1439,7,12,0,0,1438,
		1437,1,0,0,0,1438,1439,1,0,0,0,1439,1440,1,0,0,0,1440,1441,5,27,0,0,1441,
		1443,5,120,0,0,1442,1436,1,0,0,0,1442,1443,1,0,0,0,1443,1445,1,0,0,0,1444,
		1425,1,0,0,0,1444,1433,1,0,0,0,1445,59,1,0,0,0,1446,1448,5,34,0,0,1447,
		1449,3,656,328,0,1448,1447,1,0,0,0,1448,1449,1,0,0,0,1449,1451,1,0,0,0,
		1450,1452,5,656,0,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,1453,1,0,
		0,0,1453,1455,5,613,0,0,1454,1456,3,654,327,0,1455,1454,1,0,0,0,1455,1456,
		1,0,0,0,1456,1457,1,0,0,0,1457,1462,3,560,280,0,1458,1461,3,62,31,0,1459,
		1461,3,112,56,0,1460,1458,1,0,0,0,1460,1459,1,0,0,0,1461,1464,1,0,0,0,
		1462,1460,1,0,0,0,1462,1463,1,0,0,0,1463,61,1,0,0,0,1464,1462,1,0,0,0,
		1465,1467,5,455,0,0,1466,1468,7,13,0,0,1467,1466,1,0,0,0,1467,1468,1,0,
		0,0,1468,1469,1,0,0,0,1469,1505,3,602,301,0,1470,1472,5,111,0,0,1471,1473,
		5,1149,0,0,1472,1471,1,0,0,0,1472,1473,1,0,0,0,1473,1474,1,0,0,0,1474,
		1505,3,602,301,0,1475,1476,5,526,0,0,1476,1505,5,111,0,0,1477,1505,5,531,
		0,0,1478,1480,5,110,0,0,1479,1481,5,1149,0,0,1480,1479,1,0,0,0,1480,1481,
		1,0,0,0,1481,1482,1,0,0,0,1482,1505,3,602,301,0,1483,1484,5,526,0,0,1484,
		1505,5,110,0,0,1485,1505,5,530,0,0,1486,1488,5,636,0,0,1487,1489,7,14,
		0,0,1488,1487,1,0,0,0,1488,1489,1,0,0,0,1489,1490,1,0,0,0,1490,1505,3,
		602,301,0,1491,1493,5,355,0,0,1492,1494,5,1149,0,0,1493,1492,1,0,0,0,1493,
		1494,1,0,0,0,1494,1495,1,0,0,0,1495,1505,3,602,301,0,1496,1505,5,527,0,
		0,1497,1505,5,390,0,0,1498,1505,5,529,0,0,1499,1501,5,596,0,0,1500,1502,
		7,14,0,0,1501,1500,1,0,0,0,1501,1502,1,0,0,0,1502,1503,1,0,0,0,1503,1505,
		3,602,301,0,1504,1465,1,0,0,0,1504,1470,1,0,0,0,1504,1475,1,0,0,0,1504,
		1477,1,0,0,0,1504,1478,1,0,0,0,1504,1483,1,0,0,0,1504,1485,1,0,0,0,1504,
		1486,1,0,0,0,1504,1491,1,0,0,0,1504,1496,1,0,0,0,1504,1497,1,0,0,0,1504,
		1498,1,0,0,0,1504,1499,1,0,0,0,1505,63,1,0,0,0,1506,1508,5,43,0,0,1507,
		1506,1,0,0,0,1507,1508,1,0,0,0,1508,1509,1,0,0,0,1509,1511,3,66,33,0,1510,
		1512,5,1149,0,0,1511,1510,1,0,0,0,1511,1512,1,0,0,0,1512,1515,1,0,0,0,
		1513,1516,3,578,289,0,1514,1516,5,43,0,0,1515,1513,1,0,0,0,1515,1514,1,
		0,0,0,1516,1540,1,0,0,0,1517,1519,5,43,0,0,1518,1517,1,0,0,0,1518,1519,
		1,0,0,0,1519,1520,1,0,0,0,1520,1522,5,28,0,0,1521,1523,5,1149,0,0,1522,
		1521,1,0,0,0,1522,1523,1,0,0,0,1523,1524,1,0,0,0,1524,1540,3,580,290,0,
		1525,1527,5,43,0,0,1526,1525,1,0,0,0,1526,1527,1,0,0,0,1527,1528,1,0,0,
		0,1528,1530,5,409,0,0,1529,1531,5,1149,0,0,1530,1529,1,0,0,0,1530,1531,
		1,0,0,0,1531,1532,1,0,0,0,1532,1540,5,1173,0,0,1533,1534,5,135,0,0,1534,
		1536,5,543,0,0,1535,1537,5,1149,0,0,1536,1535,1,0,0,0,1536,1537,1,0,0,
		0,1537,1538,1,0,0,0,1538,1540,7,15,0,0,1539,1507,1,0,0,0,1539,1518,1,0,
		0,0,1539,1526,1,0,0,0,1539,1533,1,0,0,0,1540,65,1,0,0,0,1541,1542,5,26,
		0,0,1542,1547,5,154,0,0,1543,1547,5,852,0,0,1544,1545,5,225,0,0,1545,1547,
		5,154,0,0,1546,1541,1,0,0,0,1546,1543,1,0,0,0,1546,1544,1,0,0,0,1547,67,
		1,0,0,0,1548,1551,5,38,0,0,1549,1550,5,1158,0,0,1550,1552,5,1159,0,0,1551,
		1549,1,0,0,0,1551,1552,1,0,0,0,1552,69,1,0,0,0,1553,1554,5,396,0,0,1554,
		1558,5,1149,0,0,1555,1559,3,574,287,0,1556,1559,3,68,34,0,1557,1559,5,
		37,0,0,1558,1555,1,0,0,0,1558,1556,1,0,0,0,1558,1557,1,0,0,0,1559,71,1,
		0,0,0,1560,1561,5,341,0,0,1561,1565,3,74,37,0,1562,1564,3,76,38,0,1563,
		1562,1,0,0,0,1564,1567,1,0,0,0,1565,1563,1,0,0,0,1565,1566,1,0,0,0,1566,
		1595,1,0,0,0,1567,1565,1,0,0,0,1568,1571,5,421,0,0,1569,1572,3,602,301,
		0,1570,1572,3,702,351,0,1571,1569,1,0,0,0,1571,1570,1,0,0,0,1572,1573,
		1,0,0,0,1573,1582,3,78,39,0,1574,1575,5,637,0,0,1575,1579,3,74,37,0,1576,
		1578,3,76,38,0,1577,1576,1,0,0,0,1578,1581,1,0,0,0,1579,1577,1,0,0,0,1579,
		1580,1,0,0,0,1580,1583,1,0,0,0,1581,1579,1,0,0,0,1582,1574,1,0,0,0,1582,
		1583,1,0,0,0,1583,1592,1,0,0,0,1584,1585,5,412,0,0,1585,1589,3,74,37,0,
		1586,1588,3,76,38,0,1587,1586,1,0,0,0,1588,1591,1,0,0,0,1589,1587,1,0,
		0,0,1589,1590,1,0,0,0,1590,1593,1,0,0,0,1591,1589,1,0,0,0,1592,1584,1,
		0,0,0,1592,1593,1,0,0,0,1593,1595,1,0,0,0,1594,1560,1,0,0,0,1594,1568,
		1,0,0,0,1595,73,1,0,0,0,1596,1601,5,318,0,0,1597,1601,3,606,303,0,1598,
		1601,3,602,301,0,1599,1601,3,702,351,0,1600,1596,1,0,0,0,1600,1597,1,0,
		0,0,1600,1598,1,0,0,0,1600,1599,1,0,0,0,1601,75,1,0,0,0,1602,1603,5,1145,
		0,0,1603,1606,5,86,0,0,1604,1607,3,602,301,0,1605,1607,3,702,351,0,1606,
		1604,1,0,0,0,1606,1605,1,0,0,0,1607,1608,1,0,0,0,1608,1609,3,78,39,0,1609,
		77,1,0,0,0,1610,1624,3,726,363,0,1611,1624,5,224,0,0,1612,1624,5,243,0,
		0,1613,1624,5,244,0,0,1614,1624,5,245,0,0,1615,1624,5,246,0,0,1616,1624,
		5,247,0,0,1617,1624,5,248,0,0,1618,1624,5,249,0,0,1619,1624,5,250,0,0,
		1620,1624,5,251,0,0,1621,1624,5,252,0,0,1622,1624,5,253,0,0,1623,1610,
		1,0,0,0,1623,1611,1,0,0,0,1623,1612,1,0,0,0,1623,1613,1,0,0,0,1623,1614,
		1,0,0,0,1623,1615,1,0,0,0,1623,1616,1,0,0,0,1623,1617,1,0,0,0,1623,1618,
		1,0,0,0,1623,1619,1,0,0,0,1623,1620,1,0,0,0,1623,1621,1,0,0,0,1623,1622,
		1,0,0,0,1624,79,1,0,0,0,1625,1631,5,407,0,0,1626,1631,5,400,0,0,1627,1628,
		5,400,0,0,1628,1629,5,118,0,0,1629,1631,5,620,0,0,1630,1625,1,0,0,0,1630,
		1626,1,0,0,0,1630,1627,1,0,0,0,1631,81,1,0,0,0,1632,1633,5,189,0,0,1633,
		1634,7,16,0,0,1634,83,1,0,0,0,1635,1637,5,471,0,0,1636,1638,5,1149,0,0,
		1637,1636,1,0,0,0,1637,1638,1,0,0,0,1638,1639,1,0,0,0,1639,1666,3,604,
		302,0,1640,1666,3,82,41,0,1641,1642,5,195,0,0,1642,1643,5,552,0,0,1643,
		1666,3,596,298,0,1644,1645,5,372,0,0,1645,1666,5,1173,0,0,1646,1666,7,
		17,0,0,1647,1649,5,886,0,0,1648,1650,5,1149,0,0,1649,1648,1,0,0,0,1649,
		1650,1,0,0,0,1650,1651,1,0,0,0,1651,1666,5,1173,0,0,1652,1654,5,1010,0,
		0,1653,1655,5,1149,0,0,1654,1653,1,0,0,0,1654,1655,1,0,0,0,1655,1656,1,
		0,0,0,1656,1666,5,1173,0,0,1657,1658,5,366,0,0,1658,1659,5,1149,0,0,1659,
		1666,7,18,0,0,1660,1664,5,79,0,0,1661,1662,5,114,0,0,1662,1664,5,79,0,
		0,1663,1660,1,0,0,0,1663,1661,1,0,0,0,1664,1666,1,0,0,0,1665,1635,1,0,
		0,0,1665,1640,1,0,0,0,1665,1641,1,0,0,0,1665,1644,1,0,0,0,1665,1646,1,
		0,0,0,1665,1647,1,0,0,0,1665,1652,1,0,0,0,1665,1657,1,0,0,0,1665,1663,
		1,0,0,0,1666,85,1,0,0,0,1667,1669,7,19,0,0,1668,1667,1,0,0,0,1668,1669,
		1,0,0,0,1669,1670,1,0,0,0,1670,1671,3,596,298,0,1671,1672,3,616,308,0,
		1672,87,1,0,0,0,1673,1674,3,596,298,0,1674,1675,3,616,308,0,1675,89,1,
		0,0,0,1676,1677,5,372,0,0,1677,1700,5,1173,0,0,1678,1679,5,472,0,0,1679,
		1700,5,160,0,0,1680,1682,5,114,0,0,1681,1680,1,0,0,0,1681,1682,1,0,0,0,
		1682,1683,1,0,0,0,1683,1700,5,48,0,0,1684,1685,5,385,0,0,1685,1695,5,160,
		0,0,1686,1687,5,526,0,0,1687,1695,5,160,0,0,1688,1689,5,136,0,0,1689,1690,
		5,160,0,0,1690,1695,5,392,0,0,1691,1692,5,112,0,0,1692,1693,5,160,0,0,
		1693,1695,5,392,0,0,1694,1684,1,0,0,0,1694,1686,1,0,0,0,1694,1688,1,0,
		0,0,1694,1691,1,0,0,0,1695,1700,1,0,0,0,1696,1697,5,160,0,0,1697,1698,
		5,612,0,0,1698,1700,7,11,0,0,1699,1676,1,0,0,0,1699,1678,1,0,0,0,1699,
		1681,1,0,0,0,1699,1694,1,0,0,0,1699,1696,1,0,0,0,1700,91,1,0,0,0,1701,
		1702,5,450,0,0,1702,1716,5,1173,0,0,1703,1704,5,40,0,0,1704,1716,5,1173,
		0,0,1705,1706,5,673,0,0,1706,1716,5,1173,0,0,1707,1708,5,556,0,0,1708,
		1716,5,1173,0,0,1709,1710,5,624,0,0,1710,1716,5,1173,0,0,1711,1712,5,547,
		0,0,1712,1716,5,1173,0,0,1713,1714,5,562,0,0,1714,1716,3,602,301,0,1715,
		1701,1,0,0,0,1715,1703,1,0,0,0,1715,1705,1,0,0,0,1715,1707,1,0,0,0,1715,
		1709,1,0,0,0,1715,1711,1,0,0,0,1715,1713,1,0,0,0,1716,93,1,0,0,0,1717,
		1718,5,1158,0,0,1718,1723,3,96,48,0,1719,1720,5,1160,0,0,1720,1722,3,96,
		48,0,1721,1719,1,0,0,0,1722,1725,1,0,0,0,1723,1721,1,0,0,0,1723,1724,1,
		0,0,0,1724,1726,1,0,0,0,1725,1723,1,0,0,0,1726,1727,5,1159,0,0,1727,95,
		1,0,0,0,1728,1729,3,596,298,0,1729,1730,3,98,49,0,1730,1734,1,0,0,0,1731,
		1734,3,102,51,0,1732,1734,3,110,55,0,1733,1728,1,0,0,0,1733,1731,1,0,0,
		0,1733,1732,1,0,0,0,1734,97,1,0,0,0,1735,1739,3,616,308,0,1736,1738,3,
		100,50,0,1737,1736,1,0,0,0,1738,1741,1,0,0,0,1739,1737,1,0,0,0,1739,1740,
		1,0,0,0,1740,99,1,0,0,0,1741,1739,1,0,0,0,1742,1796,3,612,306,0,1743,1744,
		5,43,0,0,1744,1796,3,646,323,0,1745,1796,5,681,0,0,1746,1796,5,463,0,0,
		1747,1752,5,346,0,0,1748,1749,5,118,0,0,1749,1750,5,186,0,0,1750,1752,
		3,648,324,0,1751,1747,1,0,0,0,1751,1748,1,0,0,0,1752,1796,1,0,0,0,1753,
		1755,5,130,0,0,1754,1753,1,0,0,0,1754,1755,1,0,0,0,1755,1756,1,0,0,0,1756,
		1796,5,91,0,0,1757,1759,5,183,0,0,1758,1760,5,91,0,0,1759,1758,1,0,0,0,
		1759,1760,1,0,0,0,1760,1796,1,0,0,0,1761,1762,5,372,0,0,1762,1796,5,1173,
		0,0,1763,1764,5,370,0,0,1764,1796,7,20,0,0,1765,1766,5,643,0,0,1766,1796,
		7,21,0,0,1767,1796,3,104,52,0,1768,1769,5,28,0,0,1769,1796,3,580,290,0,
		1770,1771,5,70,0,0,1771,1773,5,8,0,0,1772,1770,1,0,0,0,1772,1773,1,0,0,
		0,1773,1774,1,0,0,0,1774,1775,5,12,0,0,1775,1776,5,1158,0,0,1776,1777,
		3,702,351,0,1777,1779,5,1159,0,0,1778,1780,7,22,0,0,1779,1778,1,0,0,0,
		1779,1780,1,0,0,0,1780,1796,1,0,0,0,1781,1782,5,242,0,0,1782,1783,5,43,
		0,0,1783,1796,5,677,0,0,1784,1786,5,31,0,0,1785,1787,3,596,298,0,1786,
		1785,1,0,0,0,1786,1787,1,0,0,0,1787,1789,1,0,0,0,1788,1784,1,0,0,0,1788,
		1789,1,0,0,0,1789,1790,1,0,0,0,1790,1791,5,27,0,0,1791,1792,5,1158,0,0,
		1792,1793,3,702,351,0,1793,1794,5,1159,0,0,1794,1796,1,0,0,0,1795,1742,
		1,0,0,0,1795,1743,1,0,0,0,1795,1745,1,0,0,0,1795,1746,1,0,0,0,1795,1751,
		1,0,0,0,1795,1754,1,0,0,0,1795,1757,1,0,0,0,1795,1761,1,0,0,0,1795,1763,
		1,0,0,0,1795,1765,1,0,0,0,1795,1767,1,0,0,0,1795,1768,1,0,0,0,1795,1772,
		1,0,0,0,1795,1781,1,0,0,0,1795,1788,1,0,0,0,1796,101,1,0,0,0,1797,1799,
		5,31,0,0,1798,1800,3,596,298,0,1799,1798,1,0,0,0,1799,1800,1,0,0,0,1800,
		1802,1,0,0,0,1801,1797,1,0,0,0,1801,1802,1,0,0,0,1802,1803,1,0,0,0,1803,
		1804,5,130,0,0,1804,1806,5,91,0,0,1805,1807,3,596,298,0,1806,1805,1,0,
		0,0,1806,1807,1,0,0,0,1807,1809,1,0,0,0,1808,1810,3,82,41,0,1809,1808,
		1,0,0,0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,1811,1815,3,634,317,0,1812,
		1814,3,84,42,0,1813,1812,1,0,0,0,1814,1817,1,0,0,0,1815,1813,1,0,0,0,1815,
		1816,1,0,0,0,1816,1867,1,0,0,0,1817,1815,1,0,0,0,1818,1820,5,31,0,0,1819,
		1821,3,596,298,0,1820,1819,1,0,0,0,1820,1821,1,0,0,0,1821,1823,1,0,0,0,
		1822,1818,1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1826,5,183,
		0,0,1825,1827,7,23,0,0,1826,1825,1,0,0,0,1826,1827,1,0,0,0,1827,1829,1,
		0,0,0,1828,1830,3,596,298,0,1829,1828,1,0,0,0,1829,1830,1,0,0,0,1830,1832,
		1,0,0,0,1831,1833,3,82,41,0,1832,1831,1,0,0,0,1832,1833,1,0,0,0,1833,1834,
		1,0,0,0,1834,1838,3,634,317,0,1835,1837,3,84,42,0,1836,1835,1,0,0,0,1837,
		1840,1,0,0,0,1838,1836,1,0,0,0,1838,1839,1,0,0,0,1839,1867,1,0,0,0,1840,
		1838,1,0,0,0,1841,1843,5,31,0,0,1842,1844,3,596,298,0,1843,1842,1,0,0,
		0,1843,1844,1,0,0,0,1844,1846,1,0,0,0,1845,1841,1,0,0,0,1845,1846,1,0,
		0,0,1846,1847,1,0,0,0,1847,1848,5,67,0,0,1848,1850,5,91,0,0,1849,1851,
		3,596,298,0,1850,1849,1,0,0,0,1850,1851,1,0,0,0,1851,1852,1,0,0,0,1852,
		1853,3,634,317,0,1853,1854,3,104,52,0,1854,1867,1,0,0,0,1855,1857,5,31,
		0,0,1856,1858,3,596,298,0,1857,1856,1,0,0,0,1857,1858,1,0,0,0,1858,1860,
		1,0,0,0,1859,1855,1,0,0,0,1859,1860,1,0,0,0,1860,1861,1,0,0,0,1861,1862,
		5,27,0,0,1862,1863,5,1158,0,0,1863,1864,3,702,351,0,1864,1865,5,1159,0,
		0,1865,1867,1,0,0,0,1866,1801,1,0,0,0,1866,1822,1,0,0,0,1866,1845,1,0,
		0,0,1866,1859,1,0,0,0,1867,103,1,0,0,0,1868,1869,5,137,0,0,1869,1871,3,
		562,281,0,1870,1872,3,634,317,0,1871,1870,1,0,0,0,1871,1872,1,0,0,0,1872,
		1875,1,0,0,0,1873,1874,5,109,0,0,1874,1876,7,24,0,0,1875,1873,1,0,0,0,
		1875,1876,1,0,0,0,1876,1878,1,0,0,0,1877,1879,3,106,53,0,1878,1877,1,0,
		0,0,1878,1879,1,0,0,0,1879,105,1,0,0,0,1880,1881,5,118,0,0,1881,1882,5,
		45,0,0,1882,1886,3,108,54,0,1883,1884,5,118,0,0,1884,1885,5,186,0,0,1885,
		1887,3,108,54,0,1886,1883,1,0,0,0,1886,1887,1,0,0,0,1887,1897,1,0,0,0,
		1888,1889,5,118,0,0,1889,1890,5,186,0,0,1890,1894,3,108,54,0,1891,1892,
		5,118,0,0,1892,1893,5,45,0,0,1893,1895,3,108,54,0,1894,1891,1,0,0,0,1894,
		1895,1,0,0,0,1895,1897,1,0,0,0,1896,1880,1,0,0,0,1896,1888,1,0,0,0,1897,
		107,1,0,0,0,1898,1905,5,145,0,0,1899,1905,5,22,0,0,1900,1901,5,154,0,0,
		1901,1905,5,116,0,0,1902,1903,5,526,0,0,1903,1905,5,336,0,0,1904,1898,
		1,0,0,0,1904,1899,1,0,0,0,1904,1900,1,0,0,0,1904,1902,1,0,0,0,1905,109,
		1,0,0,0,1906,1908,7,23,0,0,1907,1909,3,596,298,0,1908,1907,1,0,0,0,1908,
		1909,1,0,0,0,1909,1911,1,0,0,0,1910,1912,3,82,41,0,1911,1910,1,0,0,0,1911,
		1912,1,0,0,0,1912,1913,1,0,0,0,1913,1917,3,634,317,0,1914,1916,3,84,42,
		0,1915,1914,1,0,0,0,1916,1919,1,0,0,0,1917,1915,1,0,0,0,1917,1918,1,0,
		0,0,1918,1935,1,0,0,0,1919,1917,1,0,0,0,1920,1922,7,25,0,0,1921,1923,7,
		23,0,0,1922,1921,1,0,0,0,1922,1923,1,0,0,0,1923,1925,1,0,0,0,1924,1926,
		3,596,298,0,1925,1924,1,0,0,0,1925,1926,1,0,0,0,1926,1927,1,0,0,0,1927,
		1931,3,634,317,0,1928,1930,3,84,42,0,1929,1928,1,0,0,0,1930,1933,1,0,0,
		0,1931,1929,1,0,0,0,1931,1932,1,0,0,0,1932,1935,1,0,0,0,1933,1931,1,0,
		0,0,1934,1906,1,0,0,0,1934,1920,1,0,0,0,1935,111,1,0,0,0,1936,1938,5,413,
		0,0,1937,1939,5,1149,0,0,1938,1937,1,0,0,0,1938,1939,1,0,0,0,1939,1941,
		1,0,0,0,1940,1942,3,582,291,0,1941,1940,1,0,0,0,1941,1942,1,0,0,0,1942,
		2131,1,0,0,0,1943,1945,5,886,0,0,1944,1946,5,1149,0,0,1945,1944,1,0,0,
		0,1945,1946,1,0,0,0,1946,1947,1,0,0,0,1947,2131,5,1173,0,0,1948,1950,5,
		344,0,0,1949,1951,5,1149,0,0,1950,1949,1,0,0,0,1950,1951,1,0,0,0,1951,
		1952,1,0,0,0,1952,2131,3,602,301,0,1953,1955,5,346,0,0,1954,1956,5,1149,
		0,0,1955,1954,1,0,0,0,1955,1956,1,0,0,0,1956,1957,1,0,0,0,1957,2131,3,
		602,301,0,1958,1960,5,347,0,0,1959,1961,5,1149,0,0,1960,1959,1,0,0,0,1960,
		1961,1,0,0,0,1961,1962,1,0,0,0,1962,2131,3,602,301,0,1963,1965,5,43,0,
		0,1964,1963,1,0,0,0,1964,1965,1,0,0,0,1965,1966,1,0,0,0,1966,1968,3,66,
		33,0,1967,1969,5,1149,0,0,1968,1967,1,0,0,0,1968,1969,1,0,0,0,1969,1972,
		1,0,0,0,1970,1973,3,578,289,0,1971,1973,5,43,0,0,1972,1970,1,0,0,0,1972,
		1971,1,0,0,0,1973,2131,1,0,0,0,1974,1976,7,26,0,0,1975,1977,5,1149,0,0,
		1976,1975,1,0,0,0,1976,1977,1,0,0,0,1977,1978,1,0,0,0,1978,2131,7,27,0,
		0,1979,1981,5,43,0,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,
		0,0,1982,1984,5,28,0,0,1983,1985,5,1149,0,0,1984,1983,1,0,0,0,1984,1985,
		1,0,0,0,1985,1986,1,0,0,0,1986,2131,3,580,290,0,1987,1989,5,372,0,0,1988,
		1990,5,1149,0,0,1989,1988,1,0,0,0,1989,1990,1,0,0,0,1990,1991,1,0,0,0,
		1991,2131,5,1173,0,0,1992,1994,5,377,0,0,1993,1995,5,1149,0,0,1994,1993,
		1,0,0,0,1994,1995,1,0,0,0,1995,1996,1,0,0,0,1996,2131,7,28,0,0,1997,1999,
		5,380,0,0,1998,2000,5,1149,0,0,1999,1998,1,0,0,0,1999,2000,1,0,0,0,2000,
		2001,1,0,0,0,2001,2131,5,1173,0,0,2002,2003,7,29,0,0,2003,2005,5,399,0,
		0,2004,2006,5,1149,0,0,2005,2004,1,0,0,0,2005,2006,1,0,0,0,2006,2007,1,
		0,0,0,2007,2131,5,1173,0,0,2008,2010,5,397,0,0,2009,2011,5,1149,0,0,2010,
		2009,1,0,0,0,2010,2011,1,0,0,0,2011,2012,1,0,0,0,2012,2131,7,27,0,0,2013,
		2015,5,409,0,0,2014,2016,5,1149,0,0,2015,2014,1,0,0,0,2015,2016,1,0,0,
		0,2016,2017,1,0,0,0,2017,2131,5,1173,0,0,2018,2020,3,586,293,0,2019,2021,
		5,1149,0,0,2020,2019,1,0,0,0,2020,2021,1,0,0,0,2021,2022,1,0,0,0,2022,
		2023,7,18,0,0,2023,2131,1,0,0,0,2024,2026,7,30,0,0,2025,2027,5,1149,0,
		0,2026,2025,1,0,0,0,2026,2027,1,0,0,0,2027,2028,1,0,0,0,2028,2131,7,27,
		0,0,2029,2031,7,31,0,0,2030,2032,5,1149,0,0,2031,2030,1,0,0,0,2031,2032,
		1,0,0,0,2032,2033,1,0,0,0,2033,2131,3,602,301,0,2034,2036,5,410,0,0,2035,
		2037,5,1149,0,0,2036,2035,1,0,0,0,2036,2037,1,0,0,0,2037,2038,1,0,0,0,
		2038,2131,3,602,301,0,2039,2040,5,81,0,0,2040,2042,5,399,0,0,2041,2043,
		5,1149,0,0,2042,2041,1,0,0,0,2042,2043,1,0,0,0,2043,2044,1,0,0,0,2044,
		2131,5,1173,0,0,2045,2047,5,459,0,0,2046,2048,5,1149,0,0,2047,2046,1,0,
		0,0,2047,2048,1,0,0,0,2048,2049,1,0,0,0,2049,2131,7,32,0,0,2050,2052,5,
		471,0,0,2051,2053,5,1149,0,0,2052,2051,1,0,0,0,2052,2053,1,0,0,0,2053,
		2054,1,0,0,0,2054,2131,3,604,302,0,2055,2057,5,505,0,0,2056,2058,5,1149,
		0,0,2057,2056,1,0,0,0,2057,2058,1,0,0,0,2058,2059,1,0,0,0,2059,2131,3,
		602,301,0,2060,2062,5,515,0,0,2061,2063,5,1149,0,0,2062,2061,1,0,0,0,2062,
		2063,1,0,0,0,2063,2064,1,0,0,0,2064,2131,3,602,301,0,2065,2067,5,548,0,
		0,2066,2068,5,1149,0,0,2067,2066,1,0,0,0,2067,2068,1,0,0,0,2068,2069,1,
		0,0,0,2069,2131,7,15,0,0,2070,2072,5,556,0,0,2071,2073,5,1149,0,0,2072,
		2071,1,0,0,0,2072,2073,1,0,0,0,2073,2074,1,0,0,0,2074,2131,5,1173,0,0,
		2075,2077,5,608,0,0,2076,2078,5,1149,0,0,2077,2076,1,0,0,0,2077,2078,1,
		0,0,0,2078,2079,1,0,0,0,2079,2131,7,33,0,0,2080,2081,5,636,0,0,2081,2131,
		5,660,0,0,2082,2084,5,1010,0,0,2083,2085,5,1149,0,0,2084,2083,1,0,0,0,
		2084,2085,1,0,0,0,2085,2086,1,0,0,0,2086,2131,5,1173,0,0,2087,2089,5,638,
		0,0,2088,2090,5,1149,0,0,2089,2088,1,0,0,0,2089,2090,1,0,0,0,2090,2091,
		1,0,0,0,2091,2131,7,15,0,0,2092,2094,5,639,0,0,2093,2095,5,1149,0,0,2094,
		2093,1,0,0,0,2094,2095,1,0,0,0,2095,2096,1,0,0,0,2096,2131,7,15,0,0,2097,
		2099,5,640,0,0,2098,2100,5,1149,0,0,2099,2098,1,0,0,0,2099,2100,1,0,0,
		0,2100,2103,1,0,0,0,2101,2104,5,43,0,0,2102,2104,3,602,301,0,2103,2101,
		1,0,0,0,2103,2102,1,0,0,0,2104,2131,1,0,0,0,2105,2106,5,654,0,0,2106,2108,
		3,596,298,0,2107,2109,3,116,58,0,2108,2107,1,0,0,0,2108,2109,1,0,0,0,2109,
		2131,1,0,0,0,2110,2111,5,655,0,0,2111,2112,5,1149,0,0,2112,2131,3,114,
		57,0,2113,2131,3,116,58,0,2114,2116,5,661,0,0,2115,2117,5,1149,0,0,2116,
		2115,1,0,0,0,2116,2117,1,0,0,0,2117,2118,1,0,0,0,2118,2131,7,27,0,0,2119,
		2121,5,182,0,0,2120,2122,5,1149,0,0,2121,2120,1,0,0,0,2121,2122,1,0,0,
		0,2122,2123,1,0,0,0,2123,2124,5,1158,0,0,2124,2125,3,632,316,0,2125,2126,
		5,1159,0,0,2126,2131,1,0,0,0,2127,2128,5,195,0,0,2128,2129,5,172,0,0,2129,
		2131,5,191,0,0,2130,1936,1,0,0,0,2130,1943,1,0,0,0,2130,1948,1,0,0,0,2130,
		1953,1,0,0,0,2130,1958,1,0,0,0,2130,1964,1,0,0,0,2130,1974,1,0,0,0,2130,
		1980,1,0,0,0,2130,1987,1,0,0,0,2130,1992,1,0,0,0,2130,1997,1,0,0,0,2130,
		2002,1,0,0,0,2130,2008,1,0,0,0,2130,2013,1,0,0,0,2130,2018,1,0,0,0,2130,
		2024,1,0,0,0,2130,2029,1,0,0,0,2130,2034,1,0,0,0,2130,2039,1,0,0,0,2130,
		2045,1,0,0,0,2130,2050,1,0,0,0,2130,2055,1,0,0,0,2130,2060,1,0,0,0,2130,
		2065,1,0,0,0,2130,2070,1,0,0,0,2130,2075,1,0,0,0,2130,2080,1,0,0,0,2130,
		2082,1,0,0,0,2130,2087,1,0,0,0,2130,2092,1,0,0,0,2130,2097,1,0,0,0,2130,
		2105,1,0,0,0,2130,2110,1,0,0,0,2130,2113,1,0,0,0,2130,2114,1,0,0,0,2130,
		2119,1,0,0,0,2130,2127,1,0,0,0,2131,113,1,0,0,0,2132,2133,7,34,0,0,2133,
		115,1,0,0,0,2134,2135,5,643,0,0,2135,2136,7,21,0,0,2136,117,1,0,0,0,2137,
		2138,5,129,0,0,2138,2139,5,20,0,0,2139,2142,3,120,60,0,2140,2141,5,555,
		0,0,2141,2143,3,602,301,0,2142,2140,1,0,0,0,2142,2143,1,0,0,0,2143,2151,
		1,0,0,0,2144,2145,5,648,0,0,2145,2146,5,20,0,0,2146,2149,3,126,63,0,2147,
		2148,5,649,0,0,2148,2150,3,602,301,0,2149,2147,1,0,0,0,2149,2150,1,0,0,
		0,2150,2152,1,0,0,0,2151,2144,1,0,0,0,2151,2152,1,0,0,0,2152,2164,1,0,
		0,0,2153,2154,5,1158,0,0,2154,2159,3,128,64,0,2155,2156,5,1160,0,0,2156,
		2158,3,128,64,0,2157,2155,1,0,0,0,2158,2161,1,0,0,0,2159,2157,1,0,0,0,
		2159,2160,1,0,0,0,2160,2162,1,0,0,0,2161,2159,1,0,0,0,2162,2163,5,1159,
		0,0,2163,2165,1,0,0,0,2164,2153,1,0,0,0,2164,2165,1,0,0,0,2165,119,1,0,
		0,0,2166,2168,5,100,0,0,2167,2166,1,0,0,0,2167,2168,1,0,0,0,2168,2169,
		1,0,0,0,2169,2170,5,447,0,0,2170,2171,5,1158,0,0,2171,2172,3,702,351,0,
		2172,2173,5,1159,0,0,2173,2232,1,0,0,0,2174,2176,5,100,0,0,2175,2174,1,
		0,0,0,2175,2176,1,0,0,0,2176,2177,1,0,0,0,2177,2181,5,91,0,0,2178,2179,
		5,339,0,0,2179,2180,5,1149,0,0,2180,2182,7,35,0,0,2181,2178,1,0,0,0,2181,
		2182,1,0,0,0,2182,2183,1,0,0,0,2183,2184,5,1158,0,0,2184,2185,3,630,315,
		0,2185,2186,5,1159,0,0,2186,2232,1,0,0,0,2187,2197,5,134,0,0,2188,2189,
		5,1158,0,0,2189,2190,3,702,351,0,2190,2191,5,1159,0,0,2191,2198,1,0,0,
		0,2192,2193,5,369,0,0,2193,2194,5,1158,0,0,2194,2195,3,630,315,0,2195,
		2196,5,1159,0,0,2196,2198,1,0,0,0,2197,2188,1,0,0,0,2197,2192,1,0,0,0,
		2198,2232,1,0,0,0,2199,2209,5,477,0,0,2200,2201,5,1158,0,0,2201,2202,3,
		702,351,0,2202,2203,5,1159,0,0,2203,2210,1,0,0,0,2204,2205,5,369,0,0,2205,
		2206,5,1158,0,0,2206,2207,3,630,315,0,2207,2208,5,1159,0,0,2208,2210,1,
		0,0,0,2209,2200,1,0,0,0,2209,2204,1,0,0,0,2210,2232,1,0,0,0,2211,2215,
		5,173,0,0,2212,2216,3,702,351,0,2213,2214,5,99,0,0,2214,2216,3,702,351,
		0,2215,2212,1,0,0,0,2215,2213,1,0,0,0,2216,2223,1,0,0,0,2217,2221,5,637,
		0,0,2218,2219,5,222,0,0,2219,2222,3,74,37,0,2220,2222,3,74,37,0,2221,2218,
		1,0,0,0,2221,2220,1,0,0,0,2222,2224,1,0,0,0,2223,2217,1,0,0,0,2223,2224,
		1,0,0,0,2224,2226,1,0,0,0,2225,2227,5,345,0,0,2226,2225,1,0,0,0,2226,2227,
		1,0,0,0,2227,2229,1,0,0,0,2228,2230,3,122,61,0,2229,2228,1,0,0,0,2229,
		2230,1,0,0,0,2230,2232,1,0,0,0,2231,2167,1,0,0,0,2231,2175,1,0,0,0,2231,
		2187,1,0,0,0,2231,2199,1,0,0,0,2231,2211,1,0,0,0,2232,121,1,0,0,0,2233,
		2234,5,1158,0,0,2234,2239,3,124,62,0,2235,2236,5,1160,0,0,2236,2238,3,
		124,62,0,2237,2235,1,0,0,0,2238,2241,1,0,0,0,2239,2237,1,0,0,0,2239,2240,
		1,0,0,0,2240,2242,1,0,0,0,2241,2239,1,0,0,0,2242,2243,5,1159,0,0,2243,
		123,1,0,0,0,2244,2245,5,129,0,0,2245,2246,3,596,298,0,2246,2247,7,36,0,
		0,2247,125,1,0,0,0,2248,2250,5,100,0,0,2249,2248,1,0,0,0,2249,2250,1,0,
		0,0,2250,2251,1,0,0,0,2251,2252,5,447,0,0,2252,2253,5,1158,0,0,2253,2254,
		3,702,351,0,2254,2255,5,1159,0,0,2255,2270,1,0,0,0,2256,2258,5,100,0,0,
		2257,2256,1,0,0,0,2257,2258,1,0,0,0,2258,2259,1,0,0,0,2259,2263,5,91,0,
		0,2260,2261,5,339,0,0,2261,2262,5,1149,0,0,2262,2264,7,35,0,0,2263,2260,
		1,0,0,0,2263,2264,1,0,0,0,2264,2265,1,0,0,0,2265,2266,5,1158,0,0,2266,
		2267,3,630,315,0,2267,2268,5,1159,0,0,2268,2270,1,0,0,0,2269,2249,1,0,
		0,0,2269,2257,1,0,0,0,2270,127,1,0,0,0,2271,2272,5,129,0,0,2272,2273,3,
		596,298,0,2273,2274,5,190,0,0,2274,2275,5,475,0,0,2275,2276,5,658,0,0,
		2276,2277,5,1158,0,0,2277,2282,3,130,65,0,2278,2279,5,1160,0,0,2279,2281,
		3,130,65,0,2280,2278,1,0,0,0,2281,2284,1,0,0,0,2282,2280,1,0,0,0,2282,
		2283,1,0,0,0,2283,2285,1,0,0,0,2284,2282,1,0,0,0,2285,2289,5,1159,0,0,
		2286,2288,3,136,68,0,2287,2286,1,0,0,0,2288,2291,1,0,0,0,2289,2287,1,0,
		0,0,2289,2290,1,0,0,0,2290,2303,1,0,0,0,2291,2289,1,0,0,0,2292,2293,5,
		1158,0,0,2293,2298,3,134,67,0,2294,2295,5,1160,0,0,2295,2297,3,134,67,
		0,2296,2294,1,0,0,0,2297,2300,1,0,0,0,2298,2296,1,0,0,0,2298,2299,1,0,
		0,0,2299,2301,1,0,0,0,2300,2298,1,0,0,0,2301,2302,5,1159,0,0,2302,2304,
		1,0,0,0,2303,2292,1,0,0,0,2303,2304,1,0,0,0,2304,2418,1,0,0,0,2305,2306,
		5,129,0,0,2306,2307,3,596,298,0,2307,2308,5,190,0,0,2308,2309,5,475,0,
		0,2309,2310,5,658,0,0,2310,2314,3,130,65,0,2311,2313,3,136,68,0,2312,2311,
		1,0,0,0,2313,2316,1,0,0,0,2314,2312,1,0,0,0,2314,2315,1,0,0,0,2315,2328,
		1,0,0,0,2316,2314,1,0,0,0,2317,2318,5,1158,0,0,2318,2323,3,134,67,0,2319,
		2320,5,1160,0,0,2320,2322,3,134,67,0,2321,2319,1,0,0,0,2322,2325,1,0,0,
		0,2323,2321,1,0,0,0,2323,2324,1,0,0,0,2324,2326,1,0,0,0,2325,2323,1,0,
		0,0,2326,2327,5,1159,0,0,2327,2329,1,0,0,0,2328,2317,1,0,0,0,2328,2329,
		1,0,0,0,2329,2418,1,0,0,0,2330,2331,5,129,0,0,2331,2332,3,596,298,0,2332,
		2333,5,190,0,0,2333,2334,5,80,0,0,2334,2335,5,1158,0,0,2335,2340,3,130,
		65,0,2336,2337,5,1160,0,0,2337,2339,3,130,65,0,2338,2336,1,0,0,0,2339,
		2342,1,0,0,0,2340,2338,1,0,0,0,2340,2341,1,0,0,0,2341,2343,1,0,0,0,2342,
		2340,1,0,0,0,2343,2347,5,1159,0,0,2344,2346,3,136,68,0,2345,2344,1,0,0,
		0,2346,2349,1,0,0,0,2347,2345,1,0,0,0,2347,2348,1,0,0,0,2348,2361,1,0,
		0,0,2349,2347,1,0,0,0,2350,2351,5,1158,0,0,2351,2356,3,134,67,0,2352,2353,
		5,1160,0,0,2353,2355,3,134,67,0,2354,2352,1,0,0,0,2355,2358,1,0,0,0,2356,
		2354,1,0,0,0,2356,2357,1,0,0,0,2357,2359,1,0,0,0,2358,2356,1,0,0,0,2359,
		2360,5,1159,0,0,2360,2362,1,0,0,0,2361,2350,1,0,0,0,2361,2362,1,0,0,0,
		2362,2418,1,0,0,0,2363,2364,5,129,0,0,2364,2365,3,596,298,0,2365,2366,
		5,190,0,0,2366,2367,5,80,0,0,2367,2368,5,1158,0,0,2368,2373,3,132,66,0,
		2369,2370,5,1160,0,0,2370,2372,3,132,66,0,2371,2369,1,0,0,0,2372,2375,
		1,0,0,0,2373,2371,1,0,0,0,2373,2374,1,0,0,0,2374,2376,1,0,0,0,2375,2373,
		1,0,0,0,2376,2380,5,1159,0,0,2377,2379,3,136,68,0,2378,2377,1,0,0,0,2379,
		2382,1,0,0,0,2380,2378,1,0,0,0,2380,2381,1,0,0,0,2381,2394,1,0,0,0,2382,
		2380,1,0,0,0,2383,2384,5,1158,0,0,2384,2389,3,134,67,0,2385,2386,5,1160,
		0,0,2386,2388,3,134,67,0,2387,2385,1,0,0,0,2388,2391,1,0,0,0,2389,2387,
		1,0,0,0,2389,2390,1,0,0,0,2390,2392,1,0,0,0,2391,2389,1,0,0,0,2392,2393,
		5,1159,0,0,2393,2395,1,0,0,0,2394,2383,1,0,0,0,2394,2395,1,0,0,0,2395,
		2418,1,0,0,0,2396,2397,5,129,0,0,2397,2401,3,596,298,0,2398,2400,3,136,
		68,0,2399,2398,1,0,0,0,2400,2403,1,0,0,0,2401,2399,1,0,0,0,2401,2402,1,
		0,0,0,2402,2415,1,0,0,0,2403,2401,1,0,0,0,2404,2405,5,1158,0,0,2405,2410,
		3,134,67,0,2406,2407,5,1160,0,0,2407,2409,3,134,67,0,2408,2406,1,0,0,0,
		2409,2412,1,0,0,0,2410,2408,1,0,0,0,2410,2411,1,0,0,0,2411,2413,1,0,0,
		0,2412,2410,1,0,0,0,2413,2414,5,1159,0,0,2414,2416,1,0,0,0,2415,2404,1,
		0,0,0,2415,2416,1,0,0,0,2416,2418,1,0,0,0,2417,2271,1,0,0,0,2417,2305,
		1,0,0,0,2417,2330,1,0,0,0,2417,2363,1,0,0,0,2417,2396,1,0,0,0,2418,129,
		1,0,0,0,2419,2423,3,614,307,0,2420,2423,3,702,351,0,2421,2423,5,110,0,
		0,2422,2419,1,0,0,0,2422,2420,1,0,0,0,2422,2421,1,0,0,0,2423,131,1,0,0,
		0,2424,2425,5,1158,0,0,2425,2428,3,130,65,0,2426,2427,5,1160,0,0,2427,
		2429,3,130,65,0,2428,2426,1,0,0,0,2429,2430,1,0,0,0,2430,2428,1,0,0,0,
		2430,2431,1,0,0,0,2431,2432,1,0,0,0,2432,2433,5,1159,0,0,2433,133,1,0,
		0,0,2434,2435,5,648,0,0,2435,2439,3,596,298,0,2436,2438,3,136,68,0,2437,
		2436,1,0,0,0,2438,2441,1,0,0,0,2439,2437,1,0,0,0,2439,2440,1,0,0,0,2440,
		135,1,0,0,0,2441,2439,1,0,0,0,2442,2444,5,43,0,0,2443,2442,1,0,0,0,2443,
		2444,1,0,0,0,2444,2446,1,0,0,0,2445,2447,5,643,0,0,2446,2445,1,0,0,0,2446,
		2447,1,0,0,0,2447,2448,1,0,0,0,2448,2450,5,413,0,0,2449,2451,5,1149,0,
		0,2450,2449,1,0,0,0,2450,2451,1,0,0,0,2451,2452,1,0,0,0,2452,2491,3,582,
		291,0,2453,2455,5,372,0,0,2454,2456,5,1149,0,0,2455,2454,1,0,0,0,2455,
		2456,1,0,0,0,2456,2457,1,0,0,0,2457,2491,5,1173,0,0,2458,2459,5,392,0,
		0,2459,2461,5,399,0,0,2460,2462,5,1149,0,0,2461,2460,1,0,0,0,2461,2462,
		1,0,0,0,2462,2463,1,0,0,0,2463,2491,5,1173,0,0,2464,2465,5,81,0,0,2465,
		2467,5,399,0,0,2466,2468,5,1149,0,0,2467,2466,1,0,0,0,2467,2468,1,0,0,
		0,2468,2469,1,0,0,0,2469,2491,5,1173,0,0,2470,2472,5,505,0,0,2471,2473,
		5,1149,0,0,2472,2471,1,0,0,0,2472,2473,1,0,0,0,2473,2474,1,0,0,0,2474,
		2491,3,602,301,0,2475,2477,5,515,0,0,2476,2478,5,1149,0,0,2477,2476,1,
		0,0,0,2477,2478,1,0,0,0,2478,2479,1,0,0,0,2479,2491,3,602,301,0,2480,2482,
		5,654,0,0,2481,2483,5,1149,0,0,2482,2481,1,0,0,0,2482,2483,1,0,0,0,2483,
		2484,1,0,0,0,2484,2491,3,596,298,0,2485,2487,5,533,0,0,2486,2488,5,1149,
		0,0,2487,2486,1,0,0,0,2487,2488,1,0,0,0,2488,2489,1,0,0,0,2489,2491,3,
		596,298,0,2490,2443,1,0,0,0,2490,2453,1,0,0,0,2490,2458,1,0,0,0,2490,2464,
		1,0,0,0,2490,2470,1,0,0,0,2490,2475,1,0,0,0,2490,2480,1,0,0,0,2490,2485,
		1,0,0,0,2491,137,1,0,0,0,2492,2493,5,7,0,0,2493,2495,7,0,0,0,2494,2496,
		3,596,298,0,2495,2494,1,0,0,0,2495,2496,1,0,0,0,2496,2498,1,0,0,0,2497,
		2499,3,64,32,0,2498,2497,1,0,0,0,2499,2500,1,0,0,0,2500,2498,1,0,0,0,2500,
		2501,1,0,0,0,2501,2511,1,0,0,0,2502,2503,5,7,0,0,2503,2504,7,0,0,0,2504,
		2505,3,596,298,0,2505,2506,5,672,0,0,2506,2507,5,392,0,0,2507,2508,5,399,
		0,0,2508,2509,5,521,0,0,2509,2511,1,0,0,0,2510,2492,1,0,0,0,2510,2502,
		1,0,0,0,2511,139,1,0,0,0,2512,2514,5,7,0,0,2513,2515,3,70,35,0,2514,2513,
		1,0,0,0,2514,2515,1,0,0,0,2515,2516,1,0,0,0,2516,2517,5,419,0,0,2517,2521,
		3,560,280,0,2518,2519,5,118,0,0,2519,2520,5,611,0,0,2520,2522,3,72,36,
		0,2521,2518,1,0,0,0,2521,2522,1,0,0,0,2522,2529,1,0,0,0,2523,2524,5,118,
		0,0,2524,2526,5,375,0,0,2525,2527,5,114,0,0,2526,2525,1,0,0,0,2526,2527,
		1,0,0,0,2527,2528,1,0,0,0,2528,2530,5,566,0,0,2529,2523,1,0,0,0,2529,2530,
		1,0,0,0,2530,2534,1,0,0,0,2531,2532,5,140,0,0,2532,2533,5,177,0,0,2533,
		2535,3,560,280,0,2534,2531,1,0,0,0,2534,2535,1,0,0,0,2535,2537,1,0,0,0,
		2536,2538,3,80,40,0,2537,2536,1,0,0,0,2537,2538,1,0,0,0,2538,2541,1,0,
		0,0,2539,2540,5,372,0,0,2540,2542,5,1173,0,0,2541,2539,1,0,0,0,2541,2542,
		1,0,0,0,2542,2545,1,0,0,0,2543,2544,5,403,0,0,2544,2546,3,400,200,0,2545,
		2543,1,0,0,0,2545,2546,1,0,0,0,2546,141,1,0,0,0,2547,2548,5,7,0,0,2548,
		2549,5,441,0,0,2549,2553,3,560,280,0,2550,2552,3,90,45,0,2551,2550,1,0,
		0,0,2552,2555,1,0,0,0,2553,2551,1,0,0,0,2553,2554,1,0,0,0,2554,143,1,0,
		0,0,2555,2553,1,0,0,0,2556,2557,5,7,0,0,2557,2558,5,461,0,0,2558,2559,
		5,605,0,0,2559,2560,5,802,0,0,2560,2561,5,482,0,0,2561,2562,5,91,0,0,2562,
		145,1,0,0,0,2563,2564,5,7,0,0,2564,2565,5,480,0,0,2565,2566,5,73,0,0,2566,
		2567,3,596,298,0,2567,2568,5,5,0,0,2568,2569,5,667,0,0,2569,2575,5,1173,
		0,0,2570,2572,5,457,0,0,2571,2573,5,1149,0,0,2572,2571,1,0,0,0,2572,2573,
		1,0,0,0,2573,2574,1,0,0,0,2574,2576,3,604,302,0,2575,2570,1,0,0,0,2575,
		2576,1,0,0,0,2576,2578,1,0,0,0,2577,2579,5,682,0,0,2578,2577,1,0,0,0,2578,
		2579,1,0,0,0,2579,2580,1,0,0,0,2580,2582,5,413,0,0,2581,2583,5,1149,0,
		0,2582,2581,1,0,0,0,2582,2583,1,0,0,0,2583,2584,1,0,0,0,2584,2585,3,582,
		291,0,2585,147,1,0,0,0,2586,2587,5,7,0,0,2587,2588,5,132,0,0,2588,2592,
		3,560,280,0,2589,2591,3,90,45,0,2590,2589,1,0,0,0,2591,2594,1,0,0,0,2592,
		2590,1,0,0,0,2592,2593,1,0,0,0,2593,149,1,0,0,0,2594,2592,1,0,0,0,2595,
		2596,5,7,0,0,2596,2597,5,614,0,0,2597,2598,3,596,298,0,2598,2599,5,546,
		0,0,2599,2600,5,1158,0,0,2600,2605,3,92,46,0,2601,2602,5,1160,0,0,2602,
		2604,3,92,46,0,2603,2601,1,0,0,0,2604,2607,1,0,0,0,2605,2603,1,0,0,0,2605,
		2606,1,0,0,0,2606,2608,1,0,0,0,2607,2605,1,0,0,0,2608,2609,5,1159,0,0,
		2609,151,1,0,0,0,2610,2612,5,7,0,0,2611,2613,7,1,0,0,2612,2611,1,0,0,0,
		2612,2613,1,0,0,0,2613,2615,1,0,0,0,2614,2616,5,78,0,0,2615,2614,1,0,0,
		0,2615,2616,1,0,0,0,2616,2617,1,0,0,0,2617,2619,5,174,0,0,2618,2620,3,
		652,326,0,2619,2618,1,0,0,0,2619,2620,1,0,0,0,2620,2621,1,0,0,0,2621,2623,
		3,562,281,0,2622,2624,3,658,329,0,2623,2622,1,0,0,0,2623,2624,1,0,0,0,
		2624,2633,1,0,0,0,2625,2630,3,160,80,0,2626,2627,5,1160,0,0,2627,2629,
		3,160,80,0,2628,2626,1,0,0,0,2629,2632,1,0,0,0,2630,2628,1,0,0,0,2630,
		2631,1,0,0,0,2631,2634,1,0,0,0,2632,2630,1,0,0,0,2633,2625,1,0,0,0,2633,
		2634,1,0,0,0,2634,2636,1,0,0,0,2635,2637,3,118,59,0,2636,2635,1,0,0,0,
		2636,2637,1,0,0,0,2637,153,1,0,0,0,2638,2639,5,7,0,0,2639,2640,5,654,0,
		0,2640,2641,3,596,298,0,2641,2642,7,37,0,0,2642,2643,5,393,0,0,2643,2647,
		5,1173,0,0,2644,2645,5,457,0,0,2645,2646,5,1149,0,0,2646,2648,3,604,302,
		0,2647,2644,1,0,0,0,2647,2648,1,0,0,0,2648,2650,1,0,0,0,2649,2651,5,682,
		0,0,2650,2649,1,0,0,0,2650,2651,1,0,0,0,2651,2652,1,0,0,0,2652,2654,5,
		413,0,0,2653,2655,5,1149,0,0,2654,2653,1,0,0,0,2654,2655,1,0,0,0,2655,
		2656,1,0,0,0,2656,2657,3,582,291,0,2657,155,1,0,0,0,2658,2662,5,7,0,0,
		2659,2660,5,339,0,0,2660,2661,5,1149,0,0,2661,2663,7,10,0,0,2662,2659,
		1,0,0,0,2662,2663,1,0,0,0,2663,2665,1,0,0,0,2664,2666,3,70,35,0,2665,2664,
		1,0,0,0,2665,2666,1,0,0,0,2666,2670,1,0,0,0,2667,2668,5,160,0,0,2668,2669,
		5,612,0,0,2669,2671,7,11,0,0,2670,2667,1,0,0,0,2670,2671,1,0,0,0,2671,
		2672,1,0,0,0,2672,2673,5,679,0,0,2673,2678,3,560,280,0,2674,2675,5,1158,
		0,0,2675,2676,3,630,315,0,2676,2677,5,1159,0,0,2677,2679,1,0,0,0,2678,
		2674,1,0,0,0,2678,2679,1,0,0,0,2679,2680,1,0,0,0,2680,2681,5,12,0,0,2681,
		2688,3,214,107,0,2682,2684,5,195,0,0,2683,2685,7,12,0,0,2684,2683,1,0,
		0,0,2684,2685,1,0,0,0,2685,2686,1,0,0,0,2686,2687,5,27,0,0,2687,2689,5,
		120,0,0,2688,2682,1,0,0,0,2688,2689,1,0,0,0,2689,157,1,0,0,0,2690,2691,
		5,7,0,0,2691,2693,5,613,0,0,2692,2694,3,652,326,0,2693,2692,1,0,0,0,2693,
		2694,1,0,0,0,2694,2695,1,0,0,0,2695,2697,3,560,280,0,2696,2698,3,62,31,
		0,2697,2696,1,0,0,0,2698,2699,1,0,0,0,2699,2697,1,0,0,0,2699,2700,1,0,
		0,0,2700,159,1,0,0,0,2701,2708,3,112,56,0,2702,2704,5,1160,0,0,2703,2702,
		1,0,0,0,2703,2704,1,0,0,0,2704,2705,1,0,0,0,2705,2707,3,112,56,0,2706,
		2703,1,0,0,0,2707,2710,1,0,0,0,2708,2706,1,0,0,0,2708,2709,1,0,0,0,2709,
		3025,1,0,0,0,2710,2708,1,0,0,0,2711,2713,5,5,0,0,2712,2714,5,29,0,0,2713,
		2712,1,0,0,0,2713,2714,1,0,0,0,2714,2716,1,0,0,0,2715,2717,3,654,327,0,
		2716,2715,1,0,0,0,2716,2717,1,0,0,0,2717,2718,1,0,0,0,2718,2719,3,596,
		298,0,2719,2723,3,98,49,0,2720,2724,5,434,0,0,2721,2722,5,337,0,0,2722,
		2724,3,596,298,0,2723,2720,1,0,0,0,2723,2721,1,0,0,0,2723,2724,1,0,0,0,
		2724,3025,1,0,0,0,2725,2727,5,5,0,0,2726,2728,5,29,0,0,2727,2726,1,0,0,
		0,2727,2728,1,0,0,0,2728,2730,1,0,0,0,2729,2731,3,654,327,0,2730,2729,
		1,0,0,0,2730,2731,1,0,0,0,2731,2732,1,0,0,0,2732,2733,5,1158,0,0,2733,
		2734,3,596,298,0,2734,2741,3,98,49,0,2735,2736,5,1160,0,0,2736,2737,3,
		596,298,0,2737,2738,3,98,49,0,2738,2740,1,0,0,0,2739,2735,1,0,0,0,2740,
		2743,1,0,0,0,2741,2739,1,0,0,0,2741,2742,1,0,0,0,2742,2744,1,0,0,0,2743,
		2741,1,0,0,0,2744,2745,5,1159,0,0,2745,3025,1,0,0,0,2746,2747,5,5,0,0,
		2747,2749,7,23,0,0,2748,2750,3,654,327,0,2749,2748,1,0,0,0,2749,2750,1,
		0,0,0,2750,2752,1,0,0,0,2751,2753,3,596,298,0,2752,2751,1,0,0,0,2752,2753,
		1,0,0,0,2753,2755,1,0,0,0,2754,2756,3,82,41,0,2755,2754,1,0,0,0,2755,2756,
		1,0,0,0,2756,2757,1,0,0,0,2757,2761,3,634,317,0,2758,2760,3,84,42,0,2759,
		2758,1,0,0,0,2760,2763,1,0,0,0,2761,2759,1,0,0,0,2761,2762,1,0,0,0,2762,
		3025,1,0,0,0,2763,2761,1,0,0,0,2764,2769,5,5,0,0,2765,2767,5,31,0,0,2766,
		2768,3,596,298,0,2767,2766,1,0,0,0,2767,2768,1,0,0,0,2768,2770,1,0,0,0,
		2769,2765,1,0,0,0,2769,2770,1,0,0,0,2770,2771,1,0,0,0,2771,2772,5,130,
		0,0,2772,2774,5,91,0,0,2773,2775,3,596,298,0,2774,2773,1,0,0,0,2774,2775,
		1,0,0,0,2775,2777,1,0,0,0,2776,2778,3,82,41,0,2777,2776,1,0,0,0,2777,2778,
		1,0,0,0,2778,2779,1,0,0,0,2779,2783,3,634,317,0,2780,2782,3,84,42,0,2781,
		2780,1,0,0,0,2782,2785,1,0,0,0,2783,2781,1,0,0,0,2783,2784,1,0,0,0,2784,
		3025,1,0,0,0,2785,2783,1,0,0,0,2786,2791,5,5,0,0,2787,2789,5,31,0,0,2788,
		2790,3,596,298,0,2789,2788,1,0,0,0,2789,2790,1,0,0,0,2790,2792,1,0,0,0,
		2791,2787,1,0,0,0,2791,2792,1,0,0,0,2792,2793,1,0,0,0,2793,2795,5,183,
		0,0,2794,2796,7,23,0,0,2795,2794,1,0,0,0,2795,2796,1,0,0,0,2796,2798,1,
		0,0,0,2797,2799,3,654,327,0,2798,2797,1,0,0,0,2798,2799,1,0,0,0,2799,2801,
		1,0,0,0,2800,2802,3,596,298,0,2801,2800,1,0,0,0,2801,2802,1,0,0,0,2802,
		2804,1,0,0,0,2803,2805,3,82,41,0,2804,2803,1,0,0,0,2804,2805,1,0,0,0,2805,
		2806,1,0,0,0,2806,2810,3,634,317,0,2807,2809,3,84,42,0,2808,2807,1,0,0,
		0,2809,2812,1,0,0,0,2810,2808,1,0,0,0,2810,2811,1,0,0,0,2811,3025,1,0,
		0,0,2812,2810,1,0,0,0,2813,2814,5,5,0,0,2814,2816,7,25,0,0,2815,2817,7,
		23,0,0,2816,2815,1,0,0,0,2816,2817,1,0,0,0,2817,2819,1,0,0,0,2818,2820,
		3,596,298,0,2819,2818,1,0,0,0,2819,2820,1,0,0,0,2820,2821,1,0,0,0,2821,
		2825,3,634,317,0,2822,2824,3,84,42,0,2823,2822,1,0,0,0,2824,2827,1,0,0,
		0,2825,2823,1,0,0,0,2825,2826,1,0,0,0,2826,3025,1,0,0,0,2827,2825,1,0,
		0,0,2828,2833,5,5,0,0,2829,2831,5,31,0,0,2830,2832,3,596,298,0,2831,2830,
		1,0,0,0,2831,2832,1,0,0,0,2832,2834,1,0,0,0,2833,2829,1,0,0,0,2833,2834,
		1,0,0,0,2834,2835,1,0,0,0,2835,2836,5,67,0,0,2836,2838,5,91,0,0,2837,2839,
		3,654,327,0,2838,2837,1,0,0,0,2838,2839,1,0,0,0,2839,2841,1,0,0,0,2840,
		2842,3,596,298,0,2841,2840,1,0,0,0,2841,2842,1,0,0,0,2842,2843,1,0,0,0,
		2843,2844,3,634,317,0,2844,2845,3,104,52,0,2845,3025,1,0,0,0,2846,2851,
		5,5,0,0,2847,2849,5,31,0,0,2848,2850,3,596,298,0,2849,2848,1,0,0,0,2849,
		2850,1,0,0,0,2850,2852,1,0,0,0,2851,2847,1,0,0,0,2851,2852,1,0,0,0,2852,
		2853,1,0,0,0,2853,2854,5,27,0,0,2854,2855,5,1158,0,0,2855,2856,3,702,351,
		0,2856,2857,5,1159,0,0,2857,3025,1,0,0,0,2858,2860,5,339,0,0,2859,2861,
		5,1149,0,0,2860,2859,1,0,0,0,2860,2861,1,0,0,0,2861,2862,1,0,0,0,2862,
		3025,7,3,0,0,2863,2865,5,7,0,0,2864,2866,5,29,0,0,2865,2864,1,0,0,0,2865,
		2866,1,0,0,0,2866,2867,1,0,0,0,2867,2873,3,596,298,0,2868,2869,5,154,0,
		0,2869,2870,5,43,0,0,2870,2874,3,646,323,0,2871,2872,5,52,0,0,2872,2874,
		5,43,0,0,2873,2868,1,0,0,0,2873,2871,1,0,0,0,2874,3025,1,0,0,0,2875,2877,
		5,25,0,0,2876,2878,5,29,0,0,2877,2876,1,0,0,0,2877,2878,1,0,0,0,2878,2880,
		1,0,0,0,2879,2881,3,652,326,0,2880,2879,1,0,0,0,2880,2881,1,0,0,0,2881,
		2882,1,0,0,0,2882,2883,3,596,298,0,2883,2884,3,596,298,0,2884,2888,3,98,
		49,0,2885,2889,5,434,0,0,2886,2887,5,337,0,0,2887,2889,3,596,298,0,2888,
		2885,1,0,0,0,2888,2886,1,0,0,0,2888,2889,1,0,0,0,2889,3025,1,0,0,0,2890,
		2891,5,140,0,0,2891,2892,5,29,0,0,2892,2893,3,596,298,0,2893,2894,5,177,
		0,0,2894,2895,3,596,298,0,2895,3025,1,0,0,0,2896,2898,5,103,0,0,2897,2899,
		5,1149,0,0,2898,2897,1,0,0,0,2898,2899,1,0,0,0,2899,2900,1,0,0,0,2900,
		3025,7,4,0,0,2901,2903,5,517,0,0,2902,2904,5,29,0,0,2903,2902,1,0,0,0,
		2903,2904,1,0,0,0,2904,2906,1,0,0,0,2905,2907,3,652,326,0,2906,2905,1,
		0,0,0,2906,2907,1,0,0,0,2907,2908,1,0,0,0,2908,2909,3,596,298,0,2909,2913,
		3,98,49,0,2910,2914,5,434,0,0,2911,2912,5,337,0,0,2912,2914,3,596,298,
		0,2913,2910,1,0,0,0,2913,2911,1,0,0,0,2913,2914,1,0,0,0,2914,3025,1,0,
		0,0,2915,2917,5,52,0,0,2916,2918,5,29,0,0,2917,2916,1,0,0,0,2917,2918,
		1,0,0,0,2918,2920,1,0,0,0,2919,2921,3,652,326,0,2920,2919,1,0,0,0,2920,
		2921,1,0,0,0,2921,2922,1,0,0,0,2922,2924,3,596,298,0,2923,2925,5,145,0,
		0,2924,2923,1,0,0,0,2924,2925,1,0,0,0,2925,3025,1,0,0,0,2926,2927,5,52,
		0,0,2927,2929,7,38,0,0,2928,2930,3,652,326,0,2929,2928,1,0,0,0,2929,2930,
		1,0,0,0,2930,2931,1,0,0,0,2931,3025,3,596,298,0,2932,2933,5,52,0,0,2933,
		2934,5,130,0,0,2934,3025,5,91,0,0,2935,2936,5,52,0,0,2936,2938,7,23,0,
		0,2937,2939,3,652,326,0,2938,2937,1,0,0,0,2938,2939,1,0,0,0,2939,2940,
		1,0,0,0,2940,3025,3,596,298,0,2941,2942,5,140,0,0,2942,2943,7,23,0,0,2943,
		2944,3,596,298,0,2944,2945,5,177,0,0,2945,2946,3,596,298,0,2946,3025,1,
		0,0,0,2947,2948,5,7,0,0,2948,2949,5,81,0,0,2949,2950,3,596,298,0,2950,
		2951,7,17,0,0,2951,3025,1,0,0,0,2952,2953,5,52,0,0,2953,2954,5,67,0,0,
		2954,2956,5,91,0,0,2955,2957,3,652,326,0,2956,2955,1,0,0,0,2956,2957,1,
		0,0,0,2957,2958,1,0,0,0,2958,2960,3,596,298,0,2959,2961,3,600,300,0,2960,
		2959,1,0,0,0,2960,2961,1,0,0,0,2961,3025,1,0,0,0,2962,2963,5,400,0,0,2963,
		3025,5,92,0,0,2964,2965,5,407,0,0,2965,3025,5,92,0,0,2966,2968,5,140,0,
		0,2967,2969,7,39,0,0,2968,2967,1,0,0,0,2968,2969,1,0,0,0,2969,2972,1,0,
		0,0,2970,2973,3,596,298,0,2971,2973,3,560,280,0,2972,2970,1,0,0,0,2972,
		2971,1,0,0,0,2973,3025,1,0,0,0,2974,2975,5,124,0,0,2975,2976,5,20,0,0,
		2976,3025,3,630,315,0,2977,2978,5,33,0,0,2978,2979,5,177,0,0,2979,2980,
		5,26,0,0,2980,2981,5,154,0,0,2981,2984,3,578,289,0,2982,2983,5,28,0,0,
		2983,2985,3,580,290,0,2984,2982,1,0,0,0,2984,2985,1,0,0,0,2985,3025,1,
		0,0,0,2986,2988,5,43,0,0,2987,2986,1,0,0,0,2987,2988,1,0,0,0,2988,2989,
		1,0,0,0,2989,2990,5,26,0,0,2990,2991,5,154,0,0,2991,2992,5,1149,0,0,2992,
		2996,3,578,289,0,2993,2994,5,28,0,0,2994,2995,5,1149,0,0,2995,2997,3,580,
		290,0,2996,2993,1,0,0,0,2996,2997,1,0,0,0,2997,3025,1,0,0,0,2998,2999,
		5,401,0,0,2999,3025,5,654,0,0,3000,3001,5,454,0,0,3001,3025,5,654,0,0,
		3002,3025,5,66,0,0,3003,3004,7,40,0,0,3004,3025,5,676,0,0,3005,3007,5,
		5,0,0,3006,3008,5,29,0,0,3007,3006,1,0,0,0,3007,3008,1,0,0,0,3008,3010,
		1,0,0,0,3009,3011,3,654,327,0,3010,3009,1,0,0,0,3010,3011,1,0,0,0,3011,
		3012,1,0,0,0,3012,3013,5,1158,0,0,3013,3018,3,96,48,0,3014,3015,5,1160,
		0,0,3015,3017,3,96,48,0,3016,3014,1,0,0,0,3017,3020,1,0,0,0,3018,3016,
		1,0,0,0,3018,3019,1,0,0,0,3019,3021,1,0,0,0,3020,3018,1,0,0,0,3021,3022,
		5,1159,0,0,3022,3025,1,0,0,0,3023,3025,3,162,81,0,3024,2701,1,0,0,0,3024,
		2711,1,0,0,0,3024,2725,1,0,0,0,3024,2746,1,0,0,0,3024,2764,1,0,0,0,3024,
		2786,1,0,0,0,3024,2813,1,0,0,0,3024,2828,1,0,0,0,3024,2846,1,0,0,0,3024,
		2858,1,0,0,0,3024,2863,1,0,0,0,3024,2875,1,0,0,0,3024,2890,1,0,0,0,3024,
		2896,1,0,0,0,3024,2901,1,0,0,0,3024,2915,1,0,0,0,3024,2926,1,0,0,0,3024,
		2932,1,0,0,0,3024,2935,1,0,0,0,3024,2941,1,0,0,0,3024,2947,1,0,0,0,3024,
		2952,1,0,0,0,3024,2962,1,0,0,0,3024,2964,1,0,0,0,3024,2966,1,0,0,0,3024,
		2974,1,0,0,0,3024,2977,1,0,0,0,3024,2987,1,0,0,0,3024,2998,1,0,0,0,3024,
		3000,1,0,0,0,3024,3002,1,0,0,0,3024,3003,1,0,0,0,3024,3005,1,0,0,0,3024,
		3023,1,0,0,0,3025,161,1,0,0,0,3026,3027,5,5,0,0,3027,3029,5,129,0,0,3028,
		3030,3,654,327,0,3029,3028,1,0,0,0,3029,3030,1,0,0,0,3030,3031,1,0,0,0,
		3031,3032,5,1158,0,0,3032,3037,3,128,64,0,3033,3034,5,1160,0,0,3034,3036,
		3,128,64,0,3035,3033,1,0,0,0,3036,3039,1,0,0,0,3037,3035,1,0,0,0,3037,
		3038,1,0,0,0,3038,3040,1,0,0,0,3039,3037,1,0,0,0,3040,3041,5,1159,0,0,
		3041,3131,1,0,0,0,3042,3043,5,52,0,0,3043,3045,5,129,0,0,3044,3046,3,652,
		326,0,3045,3044,1,0,0,0,3045,3046,1,0,0,0,3046,3047,1,0,0,0,3047,3131,
		3,630,315,0,3048,3049,5,401,0,0,3049,3052,5,129,0,0,3050,3053,3,630,315,
		0,3051,3053,5,6,0,0,3052,3050,1,0,0,0,3052,3051,1,0,0,0,3053,3054,1,0,
		0,0,3054,3131,5,654,0,0,3055,3056,5,454,0,0,3056,3059,5,129,0,0,3057,3060,
		3,630,315,0,3058,3060,5,6,0,0,3059,3057,1,0,0,0,3059,3058,1,0,0,0,3060,
		3061,1,0,0,0,3061,3131,5,654,0,0,3062,3063,5,663,0,0,3063,3066,5,129,0,
		0,3064,3067,3,630,315,0,3065,3067,5,6,0,0,3066,3064,1,0,0,0,3066,3065,
		1,0,0,0,3067,3131,1,0,0,0,3068,3069,5,367,0,0,3069,3070,5,129,0,0,3070,
		3131,3,602,301,0,3071,3072,5,585,0,0,3072,3073,5,129,0,0,3073,3074,3,630,
		315,0,3074,3075,5,87,0,0,3075,3076,5,1158,0,0,3076,3081,3,128,64,0,3077,
		3078,5,1160,0,0,3078,3080,3,128,64,0,3079,3077,1,0,0,0,3080,3083,1,0,0,
		0,3081,3079,1,0,0,0,3081,3082,1,0,0,0,3082,3084,1,0,0,0,3083,3081,1,0,
		0,0,3084,3085,5,1159,0,0,3085,3131,1,0,0,0,3086,3087,5,422,0,0,3087,3088,
		5,129,0,0,3088,3089,3,596,298,0,3089,3090,5,195,0,0,3090,3091,5,174,0,
		0,3091,3094,3,562,281,0,3092,3093,7,40,0,0,3093,3095,5,676,0,0,3094,3092,
		1,0,0,0,3094,3095,1,0,0,0,3095,3131,1,0,0,0,3096,3097,5,9,0,0,3097,3100,
		5,129,0,0,3098,3101,3,630,315,0,3099,3101,5,6,0,0,3100,3098,1,0,0,0,3100,
		3099,1,0,0,0,3101,3131,1,0,0,0,3102,3103,5,27,0,0,3103,3106,5,129,0,0,
		3104,3107,3,630,315,0,3105,3107,5,6,0,0,3106,3104,1,0,0,0,3106,3105,1,
		0,0,0,3107,3131,1,0,0,0,3108,3109,5,119,0,0,3109,3112,5,129,0,0,3110,3113,
		3,630,315,0,3111,3113,5,6,0,0,3112,3110,1,0,0,0,3112,3111,1,0,0,0,3113,
		3131,1,0,0,0,3114,3115,5,575,0,0,3115,3118,5,129,0,0,3116,3119,3,630,315,
		0,3117,3119,5,6,0,0,3118,3116,1,0,0,0,3118,3117,1,0,0,0,3119,3131,1,0,
		0,0,3120,3121,5,586,0,0,3121,3124,5,129,0,0,3122,3125,3,630,315,0,3123,
		3125,5,6,0,0,3124,3122,1,0,0,0,3124,3123,1,0,0,0,3125,3131,1,0,0,0,3126,
		3127,5,584,0,0,3127,3131,5,554,0,0,3128,3129,5,672,0,0,3129,3131,5,554,
		0,0,3130,3026,1,0,0,0,3130,3042,1,0,0,0,3130,3048,1,0,0,0,3130,3055,1,
		0,0,0,3130,3062,1,0,0,0,3130,3068,1,0,0,0,3130,3071,1,0,0,0,3130,3086,
		1,0,0,0,3130,3096,1,0,0,0,3130,3102,1,0,0,0,3130,3108,1,0,0,0,3130,3114,
		1,0,0,0,3130,3120,1,0,0,0,3130,3126,1,0,0,0,3130,3128,1,0,0,0,3131,163,
		1,0,0,0,3132,3133,5,52,0,0,3133,3135,7,0,0,0,3134,3136,3,652,326,0,3135,
		3134,1,0,0,0,3135,3136,1,0,0,0,3136,3137,1,0,0,0,3137,3138,3,596,298,0,
		3138,165,1,0,0,0,3139,3140,5,52,0,0,3140,3142,5,419,0,0,3141,3143,3,652,
		326,0,3142,3141,1,0,0,0,3142,3143,1,0,0,0,3143,3144,1,0,0,0,3144,3145,
		3,560,280,0,3145,167,1,0,0,0,3146,3147,5,52,0,0,3147,3149,5,81,0,0,3148,
		3150,3,652,326,0,3149,3148,1,0,0,0,3149,3150,1,0,0,0,3150,3152,1,0,0,0,
		3151,3153,7,1,0,0,3152,3151,1,0,0,0,3152,3153,1,0,0,0,3153,3154,1,0,0,
		0,3154,3155,3,596,298,0,3155,3156,5,118,0,0,3156,3169,3,562,281,0,3157,
		3159,5,339,0,0,3158,3160,5,1149,0,0,3159,3158,1,0,0,0,3159,3160,1,0,0,
		0,3160,3161,1,0,0,0,3161,3168,7,41,0,0,3162,3164,5,103,0,0,3163,3165,5,
		1149,0,0,3164,3163,1,0,0,0,3164,3165,1,0,0,0,3165,3166,1,0,0,0,3166,3168,
		7,4,0,0,3167,3157,1,0,0,0,3167,3162,1,0,0,0,3168,3171,1,0,0,0,3169,3167,
		1,0,0,0,3169,3170,1,0,0,0,3170,3173,1,0,0,0,3171,3169,1,0,0,0,3172,3174,
		3,658,329,0,3173,3172,1,0,0,0,3173,3174,1,0,0,0,3174,169,1,0,0,0,3175,
		3176,5,52,0,0,3176,3177,5,480,0,0,3177,3178,5,73,0,0,3178,3179,3,596,298,
		0,3179,3180,5,413,0,0,3180,3181,5,1149,0,0,3181,3182,3,582,291,0,3182,
		171,1,0,0,0,3183,3184,5,52,0,0,3184,3186,5,132,0,0,3185,3187,3,652,326,
		0,3186,3185,1,0,0,0,3186,3187,1,0,0,0,3187,3188,1,0,0,0,3188,3189,3,560,
		280,0,3189,173,1,0,0,0,3190,3191,5,52,0,0,3191,3193,5,441,0,0,3192,3194,
		3,652,326,0,3193,3192,1,0,0,0,3193,3194,1,0,0,0,3194,3195,1,0,0,0,3195,
		3196,3,560,280,0,3196,175,1,0,0,0,3197,3198,5,52,0,0,3198,3200,5,614,0,
		0,3199,3201,3,652,326,0,3200,3199,1,0,0,0,3200,3201,1,0,0,0,3201,3202,
		1,0,0,0,3202,3203,3,596,298,0,3203,177,1,0,0,0,3204,3206,5,52,0,0,3205,
		3207,5,656,0,0,3206,3205,1,0,0,0,3206,3207,1,0,0,0,3207,3208,1,0,0,0,3208,
		3210,5,174,0,0,3209,3211,3,652,326,0,3210,3209,1,0,0,0,3210,3211,1,0,0,
		0,3211,3212,1,0,0,0,3212,3214,3,632,316,0,3213,3215,3,658,329,0,3214,3213,
		1,0,0,0,3214,3215,1,0,0,0,3215,3217,1,0,0,0,3216,3218,7,42,0,0,3217,3216,
		1,0,0,0,3217,3218,1,0,0,0,3218,179,1,0,0,0,3219,3220,5,52,0,0,3220,3221,
		5,654,0,0,3221,3227,3,596,298,0,3222,3224,5,413,0,0,3223,3225,5,1149,0,
		0,3224,3223,1,0,0,0,3224,3225,1,0,0,0,3225,3226,1,0,0,0,3226,3228,3,582,
		291,0,3227,3222,1,0,0,0,3227,3228,1,0,0,0,3228,181,1,0,0,0,3229,3230,5,
		52,0,0,3230,3232,5,179,0,0,3231,3233,3,652,326,0,3232,3231,1,0,0,0,3232,
		3233,1,0,0,0,3233,3234,1,0,0,0,3234,3235,3,560,280,0,3235,183,1,0,0,0,
		3236,3237,5,52,0,0,3237,3239,5,679,0,0,3238,3240,3,652,326,0,3239,3238,
		1,0,0,0,3239,3240,1,0,0,0,3240,3241,1,0,0,0,3241,3246,3,560,280,0,3242,
		3243,5,1160,0,0,3243,3245,3,560,280,0,3244,3242,1,0,0,0,3245,3248,1,0,
		0,0,3246,3244,1,0,0,0,3246,3247,1,0,0,0,3247,3250,1,0,0,0,3248,3246,1,
		0,0,0,3249,3251,7,42,0,0,3250,3249,1,0,0,0,3250,3251,1,0,0,0,3251,185,
		1,0,0,0,3252,3253,5,52,0,0,3253,3255,5,602,0,0,3254,3256,3,652,326,0,3255,
		3254,1,0,0,0,3255,3256,1,0,0,0,3256,3257,1,0,0,0,3257,3262,3,564,282,0,
		3258,3259,5,1160,0,0,3259,3261,3,564,282,0,3260,3258,1,0,0,0,3261,3264,
		1,0,0,0,3262,3260,1,0,0,0,3262,3263,1,0,0,0,3263,187,1,0,0,0,3264,3262,
		1,0,0,0,3265,3266,5,154,0,0,3266,3267,5,43,0,0,3267,3278,5,602,0,0,3268,
		3279,5,534,0,0,3269,3279,5,6,0,0,3270,3275,3,564,282,0,3271,3272,5,1160,
		0,0,3272,3274,3,564,282,0,3273,3271,1,0,0,0,3274,3277,1,0,0,0,3275,3273,
		1,0,0,0,3275,3276,1,0,0,0,3276,3279,1,0,0,0,3277,3275,1,0,0,0,3278,3268,
		1,0,0,0,3278,3269,1,0,0,0,3278,3270,1,0,0,0,3279,3280,1,0,0,0,3280,3283,
		5,177,0,0,3281,3284,3,574,287,0,3282,3284,3,596,298,0,3283,3281,1,0,0,
		0,3283,3282,1,0,0,0,3284,3292,1,0,0,0,3285,3288,5,1160,0,0,3286,3289,3,
		574,287,0,3287,3289,3,596,298,0,3288,3286,1,0,0,0,3288,3287,1,0,0,0,3289,
		3291,1,0,0,0,3290,3285,1,0,0,0,3291,3294,1,0,0,0,3292,3290,1,0,0,0,3292,
		3293,1,0,0,0,3293,3299,1,0,0,0,3294,3292,1,0,0,0,3295,3296,5,154,0,0,3296,
		3297,5,602,0,0,3297,3299,3,446,223,0,3298,3265,1,0,0,0,3298,3295,1,0,0,
		0,3299,189,1,0,0,0,3300,3302,5,52,0,0,3301,3303,5,656,0,0,3302,3301,1,
		0,0,0,3302,3303,1,0,0,0,3303,3304,1,0,0,0,3304,3306,5,613,0,0,3305,3307,
		3,652,326,0,3306,3305,1,0,0,0,3306,3307,1,0,0,0,3307,3309,1,0,0,0,3308,
		3310,5,3,0,0,3309,3308,1,0,0,0,3309,3310,1,0,0,0,3310,3311,1,0,0,0,3311,
		3316,3,560,280,0,3312,3313,5,1160,0,0,3313,3315,3,560,280,0,3314,3312,
		1,0,0,0,3315,3318,1,0,0,0,3316,3314,1,0,0,0,3316,3317,1,0,0,0,3317,191,
		1,0,0,0,3318,3316,1,0,0,0,3319,3320,5,140,0,0,3320,3322,5,174,0,0,3321,
		3323,3,652,326,0,3322,3321,1,0,0,0,3322,3323,1,0,0,0,3323,3324,1,0,0,0,
		3324,3329,3,194,97,0,3325,3326,5,1160,0,0,3326,3328,3,194,97,0,3327,3325,
		1,0,0,0,3328,3331,1,0,0,0,3329,3327,1,0,0,0,3329,3330,1,0,0,0,3330,193,
		1,0,0,0,3331,3329,1,0,0,0,3332,3334,3,562,281,0,3333,3335,3,658,329,0,
		3334,3333,1,0,0,0,3334,3335,1,0,0,0,3335,3336,1,0,0,0,3336,3337,5,177,
		0,0,3337,3338,3,562,281,0,3338,195,1,0,0,0,3339,3341,5,663,0,0,3340,3342,
		5,174,0,0,3341,3340,1,0,0,0,3341,3342,1,0,0,0,3342,3343,1,0,0,0,3343,3345,
		3,562,281,0,3344,3346,3,658,329,0,3345,3344,1,0,0,0,3345,3346,1,0,0,0,
		3346,197,1,0,0,0,3347,3348,5,21,0,0,3348,3355,3,560,280,0,3349,3352,5,
		1158,0,0,3350,3353,3,640,320,0,3351,3353,3,636,318,0,3352,3350,1,0,0,0,
		3352,3351,1,0,0,0,3352,3353,1,0,0,0,3353,3354,1,0,0,0,3354,3356,5,1159,
		0,0,3355,3349,1,0,0,0,3355,3356,1,0,0,0,3356,199,1,0,0,0,3357,3360,3,228,
		114,0,3358,3360,3,230,115,0,3359,3357,1,0,0,0,3359,3358,1,0,0,0,3360,201,
		1,0,0,0,3361,3362,5,403,0,0,3362,3363,3,636,318,0,3363,203,1,0,0,0,3364,
		3369,3,232,116,0,3365,3369,3,234,117,0,3366,3369,3,236,118,0,3367,3369,
		3,238,119,0,3368,3364,1,0,0,0,3368,3365,1,0,0,0,3368,3366,1,0,0,0,3368,
		3367,1,0,0,0,3369,205,1,0,0,0,3370,3372,5,85,0,0,3371,3373,7,43,0,0,3372,
		3371,1,0,0,0,3372,3373,1,0,0,0,3373,3375,1,0,0,0,3374,3376,5,78,0,0,3375,
		3374,1,0,0,0,3375,3376,1,0,0,0,3376,3378,1,0,0,0,3377,3379,5,87,0,0,3378,
		3377,1,0,0,0,3378,3379,1,0,0,0,3379,3380,1,0,0,0,3380,3387,3,562,281,0,
		3381,3382,5,129,0,0,3382,3384,5,1158,0,0,3383,3385,3,630,315,0,3384,3383,
		1,0,0,0,3384,3385,1,0,0,0,3385,3386,1,0,0,0,3386,3388,5,1159,0,0,3387,
		3381,1,0,0,0,3387,3388,1,0,0,0,3388,3405,1,0,0,0,3389,3390,5,1158,0,0,
		3390,3391,3,630,315,0,3391,3392,5,1159,0,0,3392,3394,1,0,0,0,3393,3389,
		1,0,0,0,3393,3394,1,0,0,0,3394,3395,1,0,0,0,3395,3406,3,220,110,0,3396,
		3397,5,154,0,0,3397,3402,3,222,111,0,3398,3399,5,1160,0,0,3399,3401,3,
		222,111,0,3400,3398,1,0,0,0,3401,3404,1,0,0,0,3402,3400,1,0,0,0,3402,3403,
		1,0,0,0,3403,3406,1,0,0,0,3404,3402,1,0,0,0,3405,3393,1,0,0,0,3405,3396,
		1,0,0,0,3406,3419,1,0,0,0,3407,3408,5,118,0,0,3408,3409,5,405,0,0,3409,
		3410,5,91,0,0,3410,3411,5,186,0,0,3411,3416,3,222,111,0,3412,3413,5,1160,
		0,0,3413,3415,3,222,111,0,3414,3412,1,0,0,0,3415,3418,1,0,0,0,3416,3414,
		1,0,0,0,3416,3417,1,0,0,0,3417,3420,1,0,0,0,3418,3416,1,0,0,0,3419,3407,
		1,0,0,0,3419,3420,1,0,0,0,3420,207,1,0,0,0,3421,3422,5,102,0,0,3422,3424,
		5,392,0,0,3423,3425,7,44,0,0,3424,3423,1,0,0,0,3424,3425,1,0,0,0,3425,
		3427,1,0,0,0,3426,3428,5,478,0,0,3427,3426,1,0,0,0,3427,3428,1,0,0,0,3428,
		3429,1,0,0,0,3429,3430,5,82,0,0,3430,3432,5,1173,0,0,3431,3433,7,6,0,0,
		3432,3431,1,0,0,0,3432,3433,1,0,0,0,3433,3434,1,0,0,0,3434,3435,5,87,0,
		0,3435,3436,5,174,0,0,3436,3442,3,562,281,0,3437,3438,5,129,0,0,3438,3439,
		5,1158,0,0,3439,3440,3,630,315,0,3440,3441,5,1159,0,0,3441,3443,1,0,0,
		0,3442,3437,1,0,0,0,3442,3443,1,0,0,0,3443,3447,1,0,0,0,3444,3445,5,26,
		0,0,3445,3446,5,154,0,0,3446,3448,3,578,289,0,3447,3444,1,0,0,0,3447,3448,
		1,0,0,0,3448,3455,1,0,0,0,3449,3451,7,45,0,0,3450,3452,3,292,146,0,3451,
		3450,1,0,0,0,3452,3453,1,0,0,0,3453,3451,1,0,0,0,3453,3454,1,0,0,0,3454,
		3456,1,0,0,0,3455,3449,1,0,0,0,3455,3456,1,0,0,0,3456,3463,1,0,0,0,3457,
		3459,5,101,0,0,3458,3460,3,294,147,0,3459,3458,1,0,0,0,3460,3461,1,0,0,
		0,3461,3459,1,0,0,0,3461,3462,1,0,0,0,3462,3464,1,0,0,0,3463,3457,1,0,
		0,0,3463,3464,1,0,0,0,3464,3469,1,0,0,0,3465,3466,5,78,0,0,3466,3467,3,
		602,301,0,3467,3468,7,46,0,0,3468,3470,1,0,0,0,3469,3465,1,0,0,0,3469,
		3470,1,0,0,0,3470,3482,1,0,0,0,3471,3472,5,1158,0,0,3472,3477,3,224,112,
		0,3473,3474,5,1160,0,0,3474,3476,3,224,112,0,3475,3473,1,0,0,0,3476,3479,
		1,0,0,0,3477,3475,1,0,0,0,3477,3478,1,0,0,0,3478,3480,1,0,0,0,3479,3477,
		1,0,0,0,3480,3481,5,1159,0,0,3481,3483,1,0,0,0,3482,3471,1,0,0,0,3482,
		3483,1,0,0,0,3483,3493,1,0,0,0,3484,3485,5,154,0,0,3485,3490,3,222,111,
		0,3486,3487,5,1160,0,0,3487,3489,3,222,111,0,3488,3486,1,0,0,0,3489,3492,
		1,0,0,0,3490,3488,1,0,0,0,3490,3491,1,0,0,0,3491,3494,1,0,0,0,3492,3490,
		1,0,0,0,3493,3484,1,0,0,0,3493,3494,1,0,0,0,3494,209,1,0,0,0,3495,3496,
		5,102,0,0,3496,3498,5,692,0,0,3497,3499,7,44,0,0,3498,3497,1,0,0,0,3498,
		3499,1,0,0,0,3499,3501,1,0,0,0,3500,3502,5,478,0,0,3501,3500,1,0,0,0,3501,
		3502,1,0,0,0,3502,3503,1,0,0,0,3503,3504,5,82,0,0,3504,3506,5,1173,0,0,
		3505,3507,7,6,0,0,3506,3505,1,0,0,0,3506,3507,1,0,0,0,3507,3508,1,0,0,
		0,3508,3509,5,87,0,0,3509,3510,5,174,0,0,3510,3514,3,562,281,0,3511,3512,
		5,26,0,0,3512,3513,5,154,0,0,3513,3515,3,578,289,0,3514,3511,1,0,0,0,3514,
		3515,1,0,0,0,3515,3522,1,0,0,0,3516,3517,5,607,0,0,3517,3518,5,452,0,0,
		3518,3519,5,20,0,0,3519,3520,5,1151,0,0,3520,3521,5,1173,0,0,3521,3523,
		5,1150,0,0,3522,3516,1,0,0,0,3522,3523,1,0,0,0,3523,3528,1,0,0,0,3524,
		3525,5,78,0,0,3525,3526,3,602,301,0,3526,3527,7,46,0,0,3527,3529,1,0,0,
		0,3528,3524,1,0,0,0,3528,3529,1,0,0,0,3529,3541,1,0,0,0,3530,3531,5,1158,
		0,0,3531,3536,3,224,112,0,3532,3533,5,1160,0,0,3533,3535,3,224,112,0,3534,
		3532,1,0,0,0,3535,3538,1,0,0,0,3536,3534,1,0,0,0,3536,3537,1,0,0,0,3537,
		3539,1,0,0,0,3538,3536,1,0,0,0,3539,3540,5,1159,0,0,3540,3542,1,0,0,0,
		3541,3530,1,0,0,0,3541,3542,1,0,0,0,3542,3552,1,0,0,0,3543,3544,5,154,
		0,0,3544,3549,3,222,111,0,3545,3546,5,1160,0,0,3546,3548,3,222,111,0,3547,
		3545,1,0,0,0,3548,3551,1,0,0,0,3549,3547,1,0,0,0,3549,3550,1,0,0,0,3550,
		3553,1,0,0,0,3551,3549,1,0,0,0,3552,3543,1,0,0,0,3552,3553,1,0,0,0,3553,
		211,1,0,0,0,3554,3556,5,142,0,0,3555,3557,7,47,0,0,3556,3555,1,0,0,0,3556,
		3557,1,0,0,0,3557,3559,1,0,0,0,3558,3560,5,87,0,0,3559,3558,1,0,0,0,3559,
		3560,1,0,0,0,3560,3561,1,0,0,0,3561,3567,3,562,281,0,3562,3563,5,129,0,
		0,3563,3564,5,1158,0,0,3564,3565,3,630,315,0,3565,3566,5,1159,0,0,3566,
		3568,1,0,0,0,3567,3562,1,0,0,0,3567,3568,1,0,0,0,3568,3585,1,0,0,0,3569,
		3570,5,1158,0,0,3570,3571,3,630,315,0,3571,3572,5,1159,0,0,3572,3574,1,
		0,0,0,3573,3569,1,0,0,0,3573,3574,1,0,0,0,3574,3575,1,0,0,0,3575,3586,
		3,220,110,0,3576,3577,5,154,0,0,3577,3582,3,222,111,0,3578,3579,5,1160,
		0,0,3579,3581,3,222,111,0,3580,3578,1,0,0,0,3581,3584,1,0,0,0,3582,3580,
		1,0,0,0,3582,3583,1,0,0,0,3583,3586,1,0,0,0,3584,3582,1,0,0,0,3585,3573,
		1,0,0,0,3585,3576,1,0,0,0,3586,213,1,0,0,0,3587,3589,3,264,132,0,3588,
		3590,3,226,113,0,3589,3588,1,0,0,0,3589,3590,1,0,0,0,3590,3650,1,0,0,0,
		3591,3593,3,260,130,0,3592,3594,3,226,113,0,3593,3592,1,0,0,0,3593,3594,
		1,0,0,0,3594,3650,1,0,0,0,3595,3597,3,266,133,0,3596,3598,3,270,135,0,
		3597,3596,1,0,0,0,3598,3599,1,0,0,0,3599,3597,1,0,0,0,3599,3600,1,0,0,
		0,3600,3609,1,0,0,0,3601,3603,5,182,0,0,3602,3604,7,48,0,0,3603,3602,1,
		0,0,0,3603,3604,1,0,0,0,3604,3607,1,0,0,0,3605,3608,3,264,132,0,3606,3608,
		3,260,130,0,3607,3605,1,0,0,0,3607,3606,1,0,0,0,3608,3610,1,0,0,0,3609,
		3601,1,0,0,0,3609,3610,1,0,0,0,3610,3612,1,0,0,0,3611,3613,3,244,122,0,
		3612,3611,1,0,0,0,3612,3613,1,0,0,0,3613,3615,1,0,0,0,3614,3616,3,306,
		153,0,3615,3614,1,0,0,0,3615,3616,1,0,0,0,3616,3618,1,0,0,0,3617,3619,
		3,226,113,0,3618,3617,1,0,0,0,3618,3619,1,0,0,0,3619,3650,1,0,0,0,3620,
		3622,3,262,131,0,3621,3623,3,268,134,0,3622,3621,1,0,0,0,3623,3624,1,0,
		0,0,3624,3622,1,0,0,0,3624,3625,1,0,0,0,3625,3631,1,0,0,0,3626,3628,5,
		182,0,0,3627,3629,7,48,0,0,3628,3627,1,0,0,0,3628,3629,1,0,0,0,3629,3630,
		1,0,0,0,3630,3632,3,260,130,0,3631,3626,1,0,0,0,3631,3632,1,0,0,0,3632,
		3634,1,0,0,0,3633,3635,3,244,122,0,3634,3633,1,0,0,0,3634,3635,1,0,0,0,
		3635,3637,1,0,0,0,3636,3638,3,306,153,0,3637,3636,1,0,0,0,3637,3638,1,
		0,0,0,3638,3640,1,0,0,0,3639,3641,3,226,113,0,3640,3639,1,0,0,0,3640,3641,
		1,0,0,0,3641,3650,1,0,0,0,3642,3645,3,266,133,0,3643,3644,5,1160,0,0,3644,
		3646,3,272,136,0,3645,3643,1,0,0,0,3646,3647,1,0,0,0,3647,3645,1,0,0,0,
		3647,3648,1,0,0,0,3648,3650,1,0,0,0,3649,3587,1,0,0,0,3649,3591,1,0,0,
		0,3649,3595,1,0,0,0,3649,3620,1,0,0,0,3649,3642,1,0,0,0,3650,215,1,0,0,
		0,3651,3654,3,240,120,0,3652,3654,3,242,121,0,3653,3651,1,0,0,0,3653,3652,
		1,0,0,0,3654,217,1,0,0,0,3655,3656,5,190,0,0,3656,3658,5,1158,0,0,3657,
		3659,3,638,319,0,3658,3657,1,0,0,0,3658,3659,1,0,0,0,3659,3660,1,0,0,0,
		3660,3669,5,1159,0,0,3661,3662,5,1160,0,0,3662,3664,5,1158,0,0,3663,3665,
		3,638,319,0,3664,3663,1,0,0,0,3664,3665,1,0,0,0,3665,3666,1,0,0,0,3666,
		3668,5,1159,0,0,3667,3661,1,0,0,0,3668,3671,1,0,0,0,3669,3667,1,0,0,0,
		3669,3670,1,0,0,0,3670,219,1,0,0,0,3671,3669,1,0,0,0,3672,3691,3,214,107,
		0,3673,3674,7,49,0,0,3674,3676,5,1158,0,0,3675,3677,3,638,319,0,3676,3675,
		1,0,0,0,3676,3677,1,0,0,0,3677,3678,1,0,0,0,3678,3687,5,1159,0,0,3679,
		3680,5,1160,0,0,3680,3682,5,1158,0,0,3681,3683,3,638,319,0,3682,3681,1,
		0,0,0,3682,3683,1,0,0,0,3683,3684,1,0,0,0,3684,3686,5,1159,0,0,3685,3679,
		1,0,0,0,3686,3689,1,0,0,0,3687,3685,1,0,0,0,3687,3688,1,0,0,0,3688,3691,
		1,0,0,0,3689,3687,1,0,0,0,3690,3672,1,0,0,0,3690,3673,1,0,0,0,3691,221,
		1,0,0,0,3692,3693,3,566,283,0,3693,3696,5,1149,0,0,3694,3697,3,702,351,
		0,3695,3697,5,43,0,0,3696,3694,1,0,0,0,3696,3695,1,0,0,0,3697,223,1,0,
		0,0,3698,3701,3,596,298,0,3699,3701,5,1184,0,0,3700,3698,1,0,0,0,3700,
		3699,1,0,0,0,3701,225,1,0,0,0,3702,3703,5,65,0,0,3703,3709,5,186,0,0,3704,
		3705,5,103,0,0,3705,3706,5,80,0,0,3706,3707,5,616,0,0,3707,3709,5,516,
		0,0,3708,3702,1,0,0,0,3708,3704,1,0,0,0,3709,3711,1,0,0,0,3710,3712,3,
		660,330,0,3711,3710,1,0,0,0,3711,3712,1,0,0,0,3712,227,1,0,0,0,3713,3715,
		5,45,0,0,3714,3716,5,106,0,0,3715,3714,1,0,0,0,3715,3716,1,0,0,0,3716,
		3718,1,0,0,0,3717,3719,5,574,0,0,3718,3717,1,0,0,0,3718,3719,1,0,0,0,3719,
		3721,1,0,0,0,3720,3722,5,78,0,0,3721,3720,1,0,0,0,3721,3722,1,0,0,0,3722,
		3723,1,0,0,0,3723,3724,5,68,0,0,3724,3730,3,562,281,0,3725,3726,5,129,
		0,0,3726,3727,5,1158,0,0,3727,3728,3,630,315,0,3728,3729,5,1159,0,0,3729,
		3731,1,0,0,0,3730,3725,1,0,0,0,3730,3731,1,0,0,0,3731,3734,1,0,0,0,3732,
		3733,5,193,0,0,3733,3735,3,702,351,0,3734,3732,1,0,0,0,3734,3735,1,0,0,
		0,3735,3737,1,0,0,0,3736,3738,3,244,122,0,3737,3736,1,0,0,0,3737,3738,
		1,0,0,0,3738,3741,1,0,0,0,3739,3740,5,99,0,0,3740,3742,3,308,154,0,3741,
		3739,1,0,0,0,3741,3742,1,0,0,0,3742,229,1,0,0,0,3743,3745,5,45,0,0,3744,
		3746,5,106,0,0,3745,3744,1,0,0,0,3745,3746,1,0,0,0,3746,3748,1,0,0,0,3747,
		3749,5,574,0,0,3748,3747,1,0,0,0,3748,3749,1,0,0,0,3749,3751,1,0,0,0,3750,
		3752,5,78,0,0,3751,3750,1,0,0,0,3751,3752,1,0,0,0,3752,3792,1,0,0,0,3753,
		3756,3,562,281,0,3754,3755,5,1157,0,0,3755,3757,5,1142,0,0,3756,3754,1,
		0,0,0,3756,3757,1,0,0,0,3757,3766,1,0,0,0,3758,3759,5,1160,0,0,3759,3762,
		3,562,281,0,3760,3761,5,1157,0,0,3761,3763,5,1142,0,0,3762,3760,1,0,0,
		0,3762,3763,1,0,0,0,3763,3765,1,0,0,0,3764,3758,1,0,0,0,3765,3768,1,0,
		0,0,3766,3764,1,0,0,0,3766,3767,1,0,0,0,3767,3769,1,0,0,0,3768,3766,1,
		0,0,0,3769,3770,5,68,0,0,3770,3771,3,248,124,0,3771,3793,1,0,0,0,3772,
		3773,5,68,0,0,3773,3776,3,562,281,0,3774,3775,5,1157,0,0,3775,3777,5,1142,
		0,0,3776,3774,1,0,0,0,3776,3777,1,0,0,0,3777,3786,1,0,0,0,3778,3779,5,
		1160,0,0,3779,3782,3,562,281,0,3780,3781,5,1157,0,0,3781,3783,5,1142,0,
		0,3782,3780,1,0,0,0,3782,3783,1,0,0,0,3783,3785,1,0,0,0,3784,3778,1,0,
		0,0,3785,3788,1,0,0,0,3786,3784,1,0,0,0,3786,3787,1,0,0,0,3787,3789,1,
		0,0,0,3788,3786,1,0,0,0,3789,3790,5,189,0,0,3790,3791,3,248,124,0,3791,
		3793,1,0,0,0,3792,3753,1,0,0,0,3792,3772,1,0,0,0,3793,3796,1,0,0,0,3794,
		3795,5,193,0,0,3795,3797,3,702,351,0,3796,3794,1,0,0,0,3796,3797,1,0,0,
		0,3797,231,1,0,0,0,3798,3799,5,446,0,0,3799,3800,3,562,281,0,3800,3805,
		5,544,0,0,3801,3803,5,12,0,0,3802,3801,1,0,0,0,3802,3803,1,0,0,0,3803,
		3804,1,0,0,0,3804,3806,3,596,298,0,3805,3802,1,0,0,0,3805,3806,1,0,0,0,
		3806,233,1,0,0,0,3807,3808,5,446,0,0,3808,3809,3,562,281,0,3809,3810,5,
		135,0,0,3810,3817,3,596,298,0,3811,3812,3,710,355,0,3812,3813,5,1158,0,
		0,3813,3814,3,640,320,0,3814,3815,5,1159,0,0,3815,3818,1,0,0,0,3816,3818,
		7,50,0,0,3817,3811,1,0,0,0,3817,3816,1,0,0,0,3818,3821,1,0,0,0,3819,3820,
		5,193,0,0,3820,3822,3,702,351,0,3821,3819,1,0,0,0,3821,3822,1,0,0,0,3822,
		3825,1,0,0,0,3823,3824,5,99,0,0,3824,3826,3,308,154,0,3825,3823,1,0,0,
		0,3825,3826,1,0,0,0,3826,235,1,0,0,0,3827,3828,5,446,0,0,3828,3829,3,562,
		281,0,3829,3830,5,135,0,0,3830,3833,7,51,0,0,3831,3832,5,193,0,0,3832,
		3834,3,702,351,0,3833,3831,1,0,0,0,3833,3834,1,0,0,0,3834,3837,1,0,0,0,
		3835,3836,5,99,0,0,3836,3838,3,308,154,0,3837,3835,1,0,0,0,3837,3838,1,
		0,0,0,3838,237,1,0,0,0,3839,3840,5,446,0,0,3840,3841,3,562,281,0,3841,
		3842,5,365,0,0,3842,239,1,0,0,0,3843,3845,5,186,0,0,3844,3846,5,106,0,
		0,3845,3844,1,0,0,0,3845,3846,1,0,0,0,3846,3848,1,0,0,0,3847,3849,5,78,
		0,0,3848,3847,1,0,0,0,3848,3849,1,0,0,0,3849,3850,1,0,0,0,3850,3855,3,
		562,281,0,3851,3853,5,12,0,0,3852,3851,1,0,0,0,3852,3853,1,0,0,0,3853,
		3854,1,0,0,0,3854,3856,3,596,298,0,3855,3852,1,0,0,0,3855,3856,1,0,0,0,
		3856,3857,1,0,0,0,3857,3858,5,154,0,0,3858,3863,3,222,111,0,3859,3860,
		5,1160,0,0,3860,3862,3,222,111,0,3861,3859,1,0,0,0,3862,3865,1,0,0,0,3863,
		3861,1,0,0,0,3863,3864,1,0,0,0,3864,3868,1,0,0,0,3865,3863,1,0,0,0,3866,
		3867,5,193,0,0,3867,3869,3,702,351,0,3868,3866,1,0,0,0,3868,3869,1,0,0,
		0,3869,3871,1,0,0,0,3870,3872,3,244,122,0,3871,3870,1,0,0,0,3871,3872,
		1,0,0,0,3872,3874,1,0,0,0,3873,3875,3,306,153,0,3874,3873,1,0,0,0,3874,
		3875,1,0,0,0,3875,241,1,0,0,0,3876,3878,5,186,0,0,3877,3879,5,106,0,0,
		3878,3877,1,0,0,0,3878,3879,1,0,0,0,3879,3881,1,0,0,0,3880,3882,5,78,0,
		0,3881,3880,1,0,0,0,3881,3882,1,0,0,0,3882,3883,1,0,0,0,3883,3884,3,248,
		124,0,3884,3885,5,154,0,0,3885,3890,3,222,111,0,3886,3887,5,1160,0,0,3887,
		3889,3,222,111,0,3888,3886,1,0,0,0,3889,3892,1,0,0,0,3890,3888,1,0,0,0,
		3890,3891,1,0,0,0,3891,3895,1,0,0,0,3892,3890,1,0,0,0,3893,3894,5,193,
		0,0,3894,3896,3,702,351,0,3895,3893,1,0,0,0,3895,3896,1,0,0,0,3896,243,
		1,0,0,0,3897,3898,5,124,0,0,3898,3899,5,20,0,0,3899,3904,3,246,123,0,3900,
		3901,5,1160,0,0,3901,3903,3,246,123,0,3902,3900,1,0,0,0,3903,3906,1,0,
		0,0,3904,3902,1,0,0,0,3904,3905,1,0,0,0,3905,245,1,0,0,0,3906,3904,1,0,
		0,0,3907,3909,3,702,351,0,3908,3910,7,52,0,0,3909,3908,1,0,0,0,3909,3910,
		1,0,0,0,3910,247,1,0,0,0,3911,3916,3,250,125,0,3912,3913,5,1160,0,0,3913,
		3915,3,250,125,0,3914,3912,1,0,0,0,3915,3918,1,0,0,0,3916,3914,1,0,0,0,
		3916,3917,1,0,0,0,3917,249,1,0,0,0,3918,3916,1,0,0,0,3919,3923,3,252,126,
		0,3920,3922,3,258,129,0,3921,3920,1,0,0,0,3922,3925,1,0,0,0,3923,3921,
		1,0,0,0,3923,3924,1,0,0,0,3924,3938,1,0,0,0,3925,3923,1,0,0,0,3926,3927,
		5,1158,0,0,3927,3931,3,252,126,0,3928,3930,3,258,129,0,3929,3928,1,0,0,
		0,3930,3933,1,0,0,0,3931,3929,1,0,0,0,3931,3932,1,0,0,0,3932,3934,1,0,
		0,0,3933,3931,1,0,0,0,3934,3935,5,1159,0,0,3935,3938,1,0,0,0,3936,3938,
		3,274,137,0,3937,3919,1,0,0,0,3937,3926,1,0,0,0,3937,3936,1,0,0,0,3938,
		251,1,0,0,0,3939,3945,3,562,281,0,3940,3941,5,129,0,0,3941,3942,5,1158,
		0,0,3942,3943,3,630,315,0,3943,3944,5,1159,0,0,3944,3946,1,0,0,0,3945,
		3940,1,0,0,0,3945,3946,1,0,0,0,3946,3951,1,0,0,0,3947,3949,5,12,0,0,3948,
		3947,1,0,0,0,3948,3949,1,0,0,0,3949,3950,1,0,0,0,3950,3952,3,596,298,0,
		3951,3948,1,0,0,0,3951,3952,1,0,0,0,3952,3961,1,0,0,0,3953,3958,3,254,
		127,0,3954,3955,5,1160,0,0,3955,3957,3,254,127,0,3956,3954,1,0,0,0,3957,
		3960,1,0,0,0,3958,3956,1,0,0,0,3958,3959,1,0,0,0,3959,3962,1,0,0,0,3960,
		3958,1,0,0,0,3961,3953,1,0,0,0,3961,3962,1,0,0,0,3962,3980,1,0,0,0,3963,
		3969,3,214,107,0,3964,3965,5,1158,0,0,3965,3966,3,214,107,0,3966,3967,
		5,1159,0,0,3967,3969,1,0,0,0,3968,3963,1,0,0,0,3968,3964,1,0,0,0,3969,
		3971,1,0,0,0,3970,3972,5,12,0,0,3971,3970,1,0,0,0,3971,3972,1,0,0,0,3972,
		3973,1,0,0,0,3973,3974,3,596,298,0,3974,3980,1,0,0,0,3975,3976,5,1158,
		0,0,3976,3977,3,248,124,0,3977,3978,5,1159,0,0,3978,3980,1,0,0,0,3979,
		3939,1,0,0,0,3979,3968,1,0,0,0,3979,3975,1,0,0,0,3980,253,1,0,0,0,3981,
		3982,7,53,0,0,3982,3985,7,23,0,0,3983,3984,5,65,0,0,3984,3986,3,256,128,
		0,3985,3983,1,0,0,0,3985,3986,1,0,0,0,3986,3987,1,0,0,0,3987,3988,5,1158,
		0,0,3988,3989,3,630,315,0,3989,3990,5,1159,0,0,3990,255,1,0,0,0,3991,3997,
		5,90,0,0,3992,3993,5,124,0,0,3993,3997,5,20,0,0,3994,3995,5,73,0,0,3995,
		3997,5,20,0,0,3996,3991,1,0,0,0,3996,3992,1,0,0,0,3996,3994,1,0,0,0,3997,
		257,1,0,0,0,3998,4000,7,54,0,0,3999,3998,1,0,0,0,3999,4000,1,0,0,0,4000,
		4001,1,0,0,0,4001,4003,5,90,0,0,4002,4004,5,94,0,0,4003,4002,1,0,0,0,4003,
		4004,1,0,0,0,4004,4005,1,0,0,0,4005,4013,3,252,126,0,4006,4007,5,118,0,
		0,4007,4014,3,702,351,0,4008,4009,5,189,0,0,4009,4010,5,1158,0,0,4010,
		4011,3,630,315,0,4011,4012,5,1159,0,0,4012,4014,1,0,0,0,4013,4006,1,0,
		0,0,4013,4008,1,0,0,0,4013,4014,1,0,0,0,4014,4049,1,0,0,0,4015,4016,5,
		171,0,0,4016,4019,3,252,126,0,4017,4018,5,118,0,0,4018,4020,3,702,351,
		0,4019,4017,1,0,0,0,4019,4020,1,0,0,0,4020,4049,1,0,0,0,4021,4023,7,55,
		0,0,4022,4024,5,126,0,0,4023,4022,1,0,0,0,4023,4024,1,0,0,0,4024,4025,
		1,0,0,0,4025,4027,5,90,0,0,4026,4028,5,94,0,0,4027,4026,1,0,0,0,4027,4028,
		1,0,0,0,4028,4029,1,0,0,0,4029,4037,3,252,126,0,4030,4031,5,118,0,0,4031,
		4038,3,702,351,0,4032,4033,5,189,0,0,4033,4034,5,1158,0,0,4034,4035,3,
		630,315,0,4035,4036,5,1159,0,0,4036,4038,1,0,0,0,4037,4030,1,0,0,0,4037,
		4032,1,0,0,0,4038,4049,1,0,0,0,4039,4044,5,113,0,0,4040,4042,7,55,0,0,
		4041,4043,5,126,0,0,4042,4041,1,0,0,0,4042,4043,1,0,0,0,4043,4045,1,0,
		0,0,4044,4040,1,0,0,0,4044,4045,1,0,0,0,4045,4046,1,0,0,0,4046,4047,5,
		90,0,0,4047,4049,3,252,126,0,4048,3999,1,0,0,0,4048,4015,1,0,0,0,4048,
		4021,1,0,0,0,4048,4039,1,0,0,0,4049,259,1,0,0,0,4050,4051,5,1158,0,0,4051,
		4052,3,264,132,0,4052,4053,5,1159,0,0,4053,4059,1,0,0,0,4054,4055,5,1158,
		0,0,4055,4056,3,260,130,0,4056,4057,5,1159,0,0,4057,4059,1,0,0,0,4058,
		4050,1,0,0,0,4058,4054,1,0,0,0,4059,261,1,0,0,0,4060,4061,5,1158,0,0,4061,
		4062,3,266,133,0,4062,4063,5,1159,0,0,4063,4069,1,0,0,0,4064,4065,5,1158,
		0,0,4065,4066,3,262,131,0,4066,4067,5,1159,0,0,4067,4069,1,0,0,0,4068,
		4060,1,0,0,0,4068,4064,1,0,0,0,4069,263,1,0,0,0,4070,4074,5,153,0,0,4071,
		4073,3,284,142,0,4072,4071,1,0,0,0,4073,4076,1,0,0,0,4074,4072,1,0,0,0,
		4074,4075,1,0,0,0,4075,4077,1,0,0,0,4076,4074,1,0,0,0,4077,4079,3,286,
		143,0,4078,4080,3,290,145,0,4079,4078,1,0,0,0,4079,4080,1,0,0,0,4080,4082,
		1,0,0,0,4081,4083,3,296,148,0,4082,4081,1,0,0,0,4082,4083,1,0,0,0,4083,
		4085,1,0,0,0,4084,4086,3,298,149,0,4085,4084,1,0,0,0,4085,4086,1,0,0,0,
		4086,4088,1,0,0,0,4087,4089,3,300,150,0,4088,4087,1,0,0,0,4088,4089,1,
		0,0,0,4089,4091,1,0,0,0,4090,4092,3,302,151,0,4091,4090,1,0,0,0,4091,4092,
		1,0,0,0,4092,4094,1,0,0,0,4093,4095,3,244,122,0,4094,4093,1,0,0,0,4094,
		4095,1,0,0,0,4095,4097,1,0,0,0,4096,4098,3,306,153,0,4097,4096,1,0,0,0,
		4097,4098,1,0,0,0,4098,4129,1,0,0,0,4099,4103,5,153,0,0,4100,4102,3,284,
		142,0,4101,4100,1,0,0,0,4102,4105,1,0,0,0,4103,4101,1,0,0,0,4103,4104,
		1,0,0,0,4104,4106,1,0,0,0,4105,4103,1,0,0,0,4106,4108,3,286,143,0,4107,
		4109,3,296,148,0,4108,4107,1,0,0,0,4108,4109,1,0,0,0,4109,4111,1,0,0,0,
		4110,4112,3,298,149,0,4111,4110,1,0,0,0,4111,4112,1,0,0,0,4112,4114,1,
		0,0,0,4113,4115,3,300,150,0,4114,4113,1,0,0,0,4114,4115,1,0,0,0,4115,4117,
		1,0,0,0,4116,4118,3,302,151,0,4117,4116,1,0,0,0,4117,4118,1,0,0,0,4118,
		4120,1,0,0,0,4119,4121,3,244,122,0,4120,4119,1,0,0,0,4120,4121,1,0,0,0,
		4121,4123,1,0,0,0,4122,4124,3,306,153,0,4123,4122,1,0,0,0,4123,4124,1,
		0,0,0,4124,4126,1,0,0,0,4125,4127,3,290,145,0,4126,4125,1,0,0,0,4126,4127,
		1,0,0,0,4127,4129,1,0,0,0,4128,4070,1,0,0,0,4128,4099,1,0,0,0,4129,265,
		1,0,0,0,4130,4134,5,153,0,0,4131,4133,3,284,142,0,4132,4131,1,0,0,0,4133,
		4136,1,0,0,0,4134,4132,1,0,0,0,4134,4135,1,0,0,0,4135,4137,1,0,0,0,4136,
		4134,1,0,0,0,4137,4139,3,286,143,0,4138,4140,3,296,148,0,4139,4138,1,0,
		0,0,4139,4140,1,0,0,0,4140,4142,1,0,0,0,4141,4143,3,298,149,0,4142,4141,
		1,0,0,0,4142,4143,1,0,0,0,4143,4145,1,0,0,0,4144,4146,3,300,150,0,4145,
		4144,1,0,0,0,4145,4146,1,0,0,0,4146,4148,1,0,0,0,4147,4149,3,302,151,0,
		4148,4147,1,0,0,0,4148,4149,1,0,0,0,4149,4151,1,0,0,0,4150,4152,3,244,
		122,0,4151,4150,1,0,0,0,4151,4152,1,0,0,0,4152,4154,1,0,0,0,4153,4155,
		3,306,153,0,4154,4153,1,0,0,0,4154,4155,1,0,0,0,4155,267,1,0,0,0,4156,
		4158,5,182,0,0,4157,4159,7,48,0,0,4158,4157,1,0,0,0,4158,4159,1,0,0,0,
		4159,4160,1,0,0,0,4160,4161,3,262,131,0,4161,269,1,0,0,0,4162,4164,5,182,
		0,0,4163,4165,7,48,0,0,4164,4163,1,0,0,0,4164,4165,1,0,0,0,4165,4168,1,
		0,0,0,4166,4169,3,266,133,0,4167,4169,3,262,131,0,4168,4166,1,0,0,0,4168,
		4167,1,0,0,0,4169,271,1,0,0,0,4170,4185,5,94,0,0,4171,4186,3,266,133,0,
		4172,4186,3,262,131,0,4173,4176,5,1158,0,0,4174,4177,3,266,133,0,4175,
		4177,3,262,131,0,4176,4174,1,0,0,0,4176,4175,1,0,0,0,4177,4178,1,0,0,0,
		4178,4183,5,1159,0,0,4179,4181,5,12,0,0,4180,4179,1,0,0,0,4180,4181,1,
		0,0,0,4181,4182,1,0,0,0,4182,4184,3,596,298,0,4183,4180,1,0,0,0,4183,4184,
		1,0,0,0,4184,4186,1,0,0,0,4185,4171,1,0,0,0,4185,4172,1,0,0,0,4185,4173,
		1,0,0,0,4186,273,1,0,0,0,4187,4188,5,281,0,0,4188,4189,5,1158,0,0,4189,
		4190,5,1173,0,0,4190,4191,5,1160,0,0,4191,4192,5,1173,0,0,4192,4193,5,
		369,0,0,4193,4194,5,1158,0,0,4194,4195,3,276,138,0,4195,4196,5,1159,0,
		0,4196,4201,5,1159,0,0,4197,4199,5,12,0,0,4198,4197,1,0,0,0,4198,4199,
		1,0,0,0,4199,4200,1,0,0,0,4200,4202,3,596,298,0,4201,4198,1,0,0,0,4201,
		4202,1,0,0,0,4202,275,1,0,0,0,4203,4208,3,278,139,0,4204,4205,5,1160,0,
		0,4205,4207,3,278,139,0,4206,4204,1,0,0,0,4207,4210,1,0,0,0,4208,4206,
		1,0,0,0,4208,4209,1,0,0,0,4209,277,1,0,0,0,4210,4208,1,0,0,0,4211,4228,
		3,566,283,0,4212,4213,5,65,0,0,4213,4229,5,287,0,0,4214,4226,3,616,308,
		0,4215,4216,5,288,0,0,4216,4218,5,1173,0,0,4217,4219,3,280,140,0,4218,
		4217,1,0,0,0,4218,4219,1,0,0,0,4219,4221,1,0,0,0,4220,4222,3,282,141,0,
		4221,4220,1,0,0,0,4221,4222,1,0,0,0,4222,4227,1,0,0,0,4223,4224,5,60,0,
		0,4224,4225,5,288,0,0,4225,4227,5,1173,0,0,4226,4215,1,0,0,0,4226,4223,
		1,0,0,0,4227,4229,1,0,0,0,4228,4212,1,0,0,0,4228,4214,1,0,0,0,4229,4241,
		1,0,0,0,4230,4232,5,286,0,0,4231,4233,5,288,0,0,4232,4231,1,0,0,0,4232,
		4233,1,0,0,0,4233,4234,1,0,0,0,4234,4235,5,1173,0,0,4235,4236,5,369,0,
		0,4236,4237,5,1158,0,0,4237,4238,3,276,138,0,4238,4239,5,1159,0,0,4239,
		4241,1,0,0,0,4240,4211,1,0,0,0,4240,4230,1,0,0,0,4241,279,1,0,0,0,4242,
		4247,5,116,0,0,4243,4247,5,415,0,0,4244,4245,5,43,0,0,4245,4247,3,646,
		323,0,4246,4242,1,0,0,0,4246,4243,1,0,0,0,4246,4244,1,0,0,0,4247,4248,
		1,0,0,0,4248,4249,5,118,0,0,4249,4250,5,56,0,0,4250,281,1,0,0,0,4251,4256,
		5,116,0,0,4252,4256,5,415,0,0,4253,4254,5,43,0,0,4254,4256,3,646,323,0,
		4255,4251,1,0,0,0,4255,4252,1,0,0,0,4255,4253,1,0,0,0,4256,4257,1,0,0,
		0,4257,4258,5,118,0,0,4258,4259,5,415,0,0,4259,283,1,0,0,0,4260,4269,7,
		56,0,0,4261,4269,5,75,0,0,4262,4269,5,171,0,0,4263,4269,5,166,0,0,4264,
		4269,5,164,0,0,4265,4269,5,632,0,0,4266,4269,7,57,0,0,4267,4269,5,165,
		0,0,4268,4260,1,0,0,0,4268,4261,1,0,0,0,4268,4262,1,0,0,0,4268,4263,1,
		0,0,0,4268,4264,1,0,0,0,4268,4265,1,0,0,0,4268,4266,1,0,0,0,4268,4267,
		1,0,0,0,4269,285,1,0,0,0,4270,4273,5,1142,0,0,4271,4273,3,288,144,0,4272,
		4270,1,0,0,0,4272,4271,1,0,0,0,4273,4278,1,0,0,0,4274,4275,5,1160,0,0,
		4275,4277,3,288,144,0,4276,4274,1,0,0,0,4277,4280,1,0,0,0,4278,4276,1,
		0,0,0,4278,4279,1,0,0,0,4279,287,1,0,0,0,4280,4278,1,0,0,0,4281,4282,3,
		560,280,0,4282,4283,5,1157,0,0,4283,4284,5,1142,0,0,4284,4311,1,0,0,0,
		4285,4290,3,566,283,0,4286,4288,5,12,0,0,4287,4286,1,0,0,0,4287,4288,1,
		0,0,0,4288,4289,1,0,0,0,4289,4291,3,596,298,0,4290,4287,1,0,0,0,4290,4291,
		1,0,0,0,4291,4311,1,0,0,0,4292,4297,3,662,331,0,4293,4295,5,12,0,0,4294,
		4293,1,0,0,0,4294,4295,1,0,0,0,4295,4296,1,0,0,0,4296,4298,3,596,298,0,
		4297,4294,1,0,0,0,4297,4298,1,0,0,0,4298,4311,1,0,0,0,4299,4300,5,1184,
		0,0,4300,4302,5,1133,0,0,4301,4299,1,0,0,0,4301,4302,1,0,0,0,4302,4303,
		1,0,0,0,4303,4308,3,702,351,0,4304,4306,5,12,0,0,4305,4304,1,0,0,0,4305,
		4306,1,0,0,0,4306,4307,1,0,0,0,4307,4309,3,596,298,0,4308,4305,1,0,0,0,
		4308,4309,1,0,0,0,4309,4311,1,0,0,0,4310,4281,1,0,0,0,4310,4285,1,0,0,
		0,4310,4292,1,0,0,0,4310,4301,1,0,0,0,4311,289,1,0,0,0,4312,4313,5,87,
		0,0,4313,4318,3,224,112,0,4314,4315,5,1160,0,0,4315,4317,3,224,112,0,4316,
		4314,1,0,0,0,4317,4320,1,0,0,0,4318,4316,1,0,0,0,4318,4319,1,0,0,0,4319,
		4349,1,0,0,0,4320,4318,1,0,0,0,4321,4322,5,87,0,0,4322,4323,5,404,0,0,
		4323,4349,5,1173,0,0,4324,4325,5,87,0,0,4325,4326,5,127,0,0,4326,4330,
		5,1173,0,0,4327,4328,5,26,0,0,4328,4329,5,154,0,0,4329,4331,3,578,289,
		0,4330,4327,1,0,0,0,4330,4331,1,0,0,0,4331,4338,1,0,0,0,4332,4334,7,45,
		0,0,4333,4335,3,292,146,0,4334,4333,1,0,0,0,4335,4336,1,0,0,0,4336,4334,
		1,0,0,0,4336,4337,1,0,0,0,4337,4339,1,0,0,0,4338,4332,1,0,0,0,4338,4339,
		1,0,0,0,4339,4346,1,0,0,0,4340,4342,5,101,0,0,4341,4343,3,294,147,0,4342,
		4341,1,0,0,0,4343,4344,1,0,0,0,4344,4342,1,0,0,0,4344,4345,1,0,0,0,4345,
		4347,1,0,0,0,4346,4340,1,0,0,0,4346,4347,1,0,0,0,4347,4349,1,0,0,0,4348,
		4312,1,0,0,0,4348,4321,1,0,0,0,4348,4324,1,0,0,0,4349,291,1,0,0,0,4350,
		4351,5,175,0,0,4351,4352,5,20,0,0,4352,4363,5,1173,0,0,4353,4355,5,122,
		0,0,4354,4353,1,0,0,0,4354,4355,1,0,0,0,4355,4356,1,0,0,0,4356,4357,5,
		57,0,0,4357,4358,5,20,0,0,4358,4363,5,1173,0,0,4359,4360,5,58,0,0,4360,
		4361,5,20,0,0,4361,4363,5,1173,0,0,4362,4350,1,0,0,0,4362,4354,1,0,0,0,
		4362,4359,1,0,0,0,4363,293,1,0,0,0,4364,4365,5,169,0,0,4365,4366,5,20,
		0,0,4366,4371,5,1173,0,0,4367,4368,5,175,0,0,4368,4369,5,20,0,0,4369,4371,
		5,1173,0,0,4370,4364,1,0,0,0,4370,4367,1,0,0,0,4371,295,1,0,0,0,4372,4373,
		5,68,0,0,4373,4375,3,248,124,0,4374,4372,1,0,0,0,4374,4375,1,0,0,0,4375,
		4378,1,0,0,0,4376,4377,5,193,0,0,4377,4379,3,702,351,0,4378,4376,1,0,0,
		0,4378,4379,1,0,0,0,4379,297,1,0,0,0,4380,4381,5,73,0,0,4381,4382,5,20,
		0,0,4382,4387,3,304,152,0,4383,4384,5,1160,0,0,4384,4386,3,304,152,0,4385,
		4383,1,0,0,0,4386,4389,1,0,0,0,4387,4385,1,0,0,0,4387,4388,1,0,0,0,4388,
		4392,1,0,0,0,4389,4387,1,0,0,0,4390,4391,5,195,0,0,4391,4393,5,604,0,0,
		4392,4390,1,0,0,0,4392,4393,1,0,0,0,4393,299,1,0,0,0,4394,4395,5,74,0,
		0,4395,4396,3,702,351,0,4396,301,1,0,0,0,4397,4398,5,684,0,0,4398,4399,
		3,680,340,0,4399,4400,5,12,0,0,4400,4401,5,1158,0,0,4401,4402,3,678,339,
		0,4402,4412,5,1159,0,0,4403,4404,5,1160,0,0,4404,4405,3,680,340,0,4405,
		4406,5,12,0,0,4406,4407,5,1158,0,0,4407,4408,3,678,339,0,4408,4409,5,1159,
		0,0,4409,4411,1,0,0,0,4410,4403,1,0,0,0,4411,4414,1,0,0,0,4412,4410,1,
		0,0,0,4412,4413,1,0,0,0,4413,303,1,0,0,0,4414,4412,1,0,0,0,4415,4417,3,
		702,351,0,4416,4418,7,52,0,0,4417,4416,1,0,0,0,4417,4418,1,0,0,0,4418,
		305,1,0,0,0,4419,4430,5,99,0,0,4420,4421,3,308,154,0,4421,4422,5,1160,
		0,0,4422,4424,1,0,0,0,4423,4420,1,0,0,0,4423,4424,1,0,0,0,4424,4425,1,
		0,0,0,4425,4431,3,308,154,0,4426,4427,3,308,154,0,4427,4428,5,537,0,0,
		4428,4429,3,308,154,0,4429,4431,1,0,0,0,4430,4423,1,0,0,0,4430,4426,1,
		0,0,0,4431,307,1,0,0,0,4432,4436,3,602,301,0,4433,4436,3,576,288,0,4434,
		4436,3,598,299,0,4435,4432,1,0,0,0,4435,4433,1,0,0,0,4435,4434,1,0,0,0,
		4436,309,1,0,0,0,4437,4438,5,636,0,0,4438,4447,5,660,0,0,4439,4444,3,332,
		166,0,4440,4441,5,1160,0,0,4441,4443,3,332,166,0,4442,4440,1,0,0,0,4443,
		4446,1,0,0,0,4444,4442,1,0,0,0,4444,4445,1,0,0,0,4445,4448,1,0,0,0,4446,
		4444,1,0,0,0,4447,4439,1,0,0,0,4447,4448,1,0,0,0,4448,311,1,0,0,0,4449,
		4451,5,348,0,0,4450,4452,5,686,0,0,4451,4450,1,0,0,0,4451,4452,1,0,0,0,
		4452,313,1,0,0,0,4453,4455,5,373,0,0,4454,4456,5,686,0,0,4455,4454,1,0,
		0,0,4455,4456,1,0,0,0,4456,4462,1,0,0,0,4457,4459,5,10,0,0,4458,4460,5,
		526,0,0,4459,4458,1,0,0,0,4459,4460,1,0,0,0,4460,4461,1,0,0,0,4461,4463,
		5,357,0,0,4462,4457,1,0,0,0,4462,4463,1,0,0,0,4463,4468,1,0,0,0,4464,4466,
		5,526,0,0,4465,4464,1,0,0,0,4465,4466,1,0,0,0,4466,4467,1,0,0,0,4467,4469,
		5,139,0,0,4468,4465,1,0,0,0,4468,4469,1,0,0,0,4469,315,1,0,0,0,4470,4472,
		5,603,0,0,4471,4473,5,686,0,0,4472,4471,1,0,0,0,4472,4473,1,0,0,0,4473,
		4479,1,0,0,0,4474,4476,5,10,0,0,4475,4477,5,526,0,0,4476,4475,1,0,0,0,
		4476,4477,1,0,0,0,4477,4478,1,0,0,0,4478,4480,5,357,0,0,4479,4474,1,0,
		0,0,4479,4480,1,0,0,0,4480,4485,1,0,0,0,4481,4483,5,526,0,0,4482,4481,
		1,0,0,0,4482,4483,1,0,0,0,4483,4484,1,0,0,0,4484,4486,5,139,0,0,4485,4482,
		1,0,0,0,4485,4486,1,0,0,0,4486,317,1,0,0,0,4487,4488,5,610,0,0,4488,4489,
		3,596,298,0,4489,319,1,0,0,0,4490,4492,5,603,0,0,4491,4493,5,686,0,0,4492,
		4491,1,0,0,0,4492,4493,1,0,0,0,4493,4494,1,0,0,0,4494,4496,5,177,0,0,4495,
		4497,5,610,0,0,4496,4495,1,0,0,0,4496,4497,1,0,0,0,4497,4498,1,0,0,0,4498,
		4499,3,596,298,0,4499,321,1,0,0,0,4500,4501,5,139,0,0,4501,4502,5,610,
		0,0,4502,4503,3,596,298,0,4503,323,1,0,0,0,4504,4505,5,103,0,0,4505,4506,
		7,58,0,0,4506,4511,3,334,167,0,4507,4508,5,1160,0,0,4508,4510,3,334,167,
		0,4509,4507,1,0,0,0,4510,4513,1,0,0,0,4511,4509,1,0,0,0,4511,4512,1,0,
		0,0,4512,4515,1,0,0,0,4513,4511,1,0,0,0,4514,4516,3,658,329,0,4515,4514,
		1,0,0,0,4515,4516,1,0,0,0,4516,325,1,0,0,0,4517,4518,5,184,0,0,4518,4519,
		5,753,0,0,4519,327,1,0,0,0,4520,4521,5,154,0,0,4521,4522,5,343,0,0,4522,
		4523,5,1149,0,0,4523,4524,7,27,0,0,4524,329,1,0,0,0,4525,4527,5,154,0,
		0,4526,4528,7,59,0,0,4527,4526,1,0,0,0,4527,4528,1,0,0,0,4528,4529,1,0,
		0,0,4529,4530,5,660,0,0,4530,4535,3,338,169,0,4531,4532,5,1160,0,0,4532,
		4534,3,338,169,0,4533,4531,1,0,0,0,4534,4537,1,0,0,0,4535,4533,1,0,0,0,
		4535,4536,1,0,0,0,4536,331,1,0,0,0,4537,4535,1,0,0,0,4538,4539,5,195,0,
		0,4539,4540,5,381,0,0,4540,4546,5,623,0,0,4541,4542,5,135,0,0,4542,4546,
		5,196,0,0,4543,4544,5,135,0,0,4544,4546,5,543,0,0,4545,4538,1,0,0,0,4545,
		4541,1,0,0,0,4545,4543,1,0,0,0,4546,333,1,0,0,0,4547,4552,3,562,281,0,
		4548,4550,5,12,0,0,4549,4548,1,0,0,0,4549,4550,1,0,0,0,4550,4551,1,0,0,
		0,4551,4553,3,596,298,0,4552,4549,1,0,0,0,4552,4553,1,0,0,0,4553,4554,
		1,0,0,0,4554,4555,3,336,168,0,4555,335,1,0,0,0,4556,4558,5,135,0,0,4557,
		4559,5,478,0,0,4558,4557,1,0,0,0,4558,4559,1,0,0,0,4559,4565,1,0,0,0,4560,
		4562,5,106,0,0,4561,4560,1,0,0,0,4561,4562,1,0,0,0,4562,4563,1,0,0,0,4563,
		4565,5,196,0,0,4564,4556,1,0,0,0,4564,4561,1,0,0,0,4565,337,1,0,0,0,4566,
		4567,5,468,0,0,4567,4568,5,476,0,0,4568,4574,3,340,170,0,4569,4570,5,135,
		0,0,4570,4574,5,196,0,0,4571,4572,5,135,0,0,4572,4574,5,543,0,0,4573,4566,
		1,0,0,0,4573,4569,1,0,0,0,4573,4571,1,0,0,0,4574,339,1,0,0,0,4575,4576,
		5,810,0,0,4576,4583,5,135,0,0,4577,4578,5,135,0,0,4578,4583,5,811,0,0,
		4579,4580,5,135,0,0,4580,4583,5,812,0,0,4581,4583,5,813,0,0,4582,4575,
		1,0,0,0,4582,4577,1,0,0,0,4582,4579,1,0,0,0,4582,4581,1,0,0,0,4583,341,
		1,0,0,0,4584,4585,5,25,0,0,4585,4586,5,482,0,0,4586,4587,5,177,0,0,4587,
		4592,3,360,180,0,4588,4589,5,1160,0,0,4589,4591,3,360,180,0,4590,4588,
		1,0,0,0,4591,4594,1,0,0,0,4592,4590,1,0,0,0,4592,4593,1,0,0,0,4593,4596,
		1,0,0,0,4594,4592,1,0,0,0,4595,4597,3,368,184,0,4596,4595,1,0,0,0,4596,
		4597,1,0,0,0,4597,343,1,0,0,0,4598,4599,5,25,0,0,4599,4600,5,594,0,0,4600,
		4601,5,433,0,0,4601,4606,3,370,185,0,4602,4603,5,1160,0,0,4603,4605,3,
		370,185,0,4604,4602,1,0,0,0,4605,4608,1,0,0,0,4606,4604,1,0,0,0,4606,4607,
		1,0,0,0,4607,345,1,0,0,0,4608,4606,1,0,0,0,4609,4610,5,133,0,0,4610,4611,
		7,60,0,0,4611,4616,5,481,0,0,4612,4613,5,177,0,0,4613,4617,5,1173,0,0,
		4614,4615,5,15,0,0,4615,4617,5,1173,0,0,4616,4612,1,0,0,0,4616,4614,1,
		0,0,0,4617,347,1,0,0,0,4618,4619,5,595,0,0,4619,4620,5,482,0,0,4620,349,
		1,0,0,0,4621,4622,5,595,0,0,4622,4624,5,620,0,0,4623,4625,5,6,0,0,4624,
		4623,1,0,0,0,4624,4625,1,0,0,0,4625,4627,1,0,0,0,4626,4628,3,368,184,0,
		4627,4626,1,0,0,0,4627,4628,1,0,0,0,4628,351,1,0,0,0,4629,4630,5,636,0,
		0,4630,4639,5,620,0,0,4631,4636,3,374,187,0,4632,4633,5,1160,0,0,4633,
		4635,3,374,187,0,4634,4632,1,0,0,0,4635,4638,1,0,0,0,4636,4634,1,0,0,0,
		4636,4637,1,0,0,0,4637,4640,1,0,0,0,4638,4636,1,0,0,0,4639,4631,1,0,0,
		0,4639,4640,1,0,0,0,4640,4643,1,0,0,0,4641,4642,5,671,0,0,4642,4644,3,
		376,188,0,4643,4641,1,0,0,0,4643,4644,1,0,0,0,4644,4648,1,0,0,0,4645,4647,
		3,378,189,0,4646,4645,1,0,0,0,4647,4650,1,0,0,0,4648,4646,1,0,0,0,4648,
		4649,1,0,0,0,4649,4652,1,0,0,0,4650,4648,1,0,0,0,4651,4653,3,368,184,0,
		4652,4651,1,0,0,0,4652,4653,1,0,0,0,4653,353,1,0,0,0,4654,4655,5,642,0,
		0,4655,4664,5,620,0,0,4656,4661,3,374,187,0,4657,4658,5,1160,0,0,4658,
		4660,3,374,187,0,4659,4657,1,0,0,0,4660,4663,1,0,0,0,4661,4659,1,0,0,0,
		4661,4662,1,0,0,0,4662,4665,1,0,0,0,4663,4661,1,0,0,0,4664,4656,1,0,0,
		0,4664,4665,1,0,0,0,4665,355,1,0,0,0,4666,4667,5,636,0,0,4667,4668,5,445,
		0,0,4668,357,1,0,0,0,4669,4670,5,642,0,0,4670,4671,5,445,0,0,4671,359,
		1,0,0,0,4672,4673,3,362,181,0,4673,4674,5,1149,0,0,4674,4675,5,1173,0,
		0,4675,4702,1,0,0,0,4676,4677,3,364,182,0,4677,4678,5,1149,0,0,4678,4679,
		3,602,301,0,4679,4702,1,0,0,0,4680,4681,3,366,183,0,4681,4682,5,1149,0,
		0,4682,4683,7,27,0,0,4683,4702,1,0,0,0,4684,4685,5,486,0,0,4685,4686,5,
		1149,0,0,4686,4702,5,1176,0,0,4687,4688,5,453,0,0,4688,4689,5,1149,0,0,
		4689,4698,5,1158,0,0,4690,4695,3,596,298,0,4691,4692,5,1160,0,0,4692,4694,
		3,596,298,0,4693,4691,1,0,0,0,4694,4697,1,0,0,0,4695,4693,1,0,0,0,4695,
		4696,1,0,0,0,4696,4699,1,0,0,0,4697,4695,1,0,0,0,4698,4690,1,0,0,0,4698,
		4699,1,0,0,0,4699,4700,1,0,0,0,4700,4702,5,1159,0,0,4701,4672,1,0,0,0,
		4701,4676,1,0,0,0,4701,4680,1,0,0,0,4701,4684,1,0,0,0,4701,4687,1,0,0,
		0,4702,361,1,0,0,0,4703,4704,7,61,0,0,4704,363,1,0,0,0,4705,4706,7,62,
		0,0,4706,365,1,0,0,0,4707,4708,7,63,0,0,4708,367,1,0,0,0,4709,4710,5,65,
		0,0,4710,4711,5,359,0,0,4711,4712,5,1173,0,0,4712,369,1,0,0,0,4713,4714,
		5,587,0,0,4714,4715,5,1149,0,0,4715,4716,5,1158,0,0,4716,4717,3,630,315,
		0,4717,4718,5,1159,0,0,4718,4763,1,0,0,0,4719,4720,5,589,0,0,4720,4721,
		5,1149,0,0,4721,4722,5,1158,0,0,4722,4723,3,630,315,0,4723,4724,5,1159,
		0,0,4724,4763,1,0,0,0,4725,4726,5,588,0,0,4726,4727,5,1149,0,0,4727,4728,
		5,1158,0,0,4728,4729,3,632,316,0,4729,4730,5,1159,0,0,4730,4763,1,0,0,
		0,4731,4732,5,590,0,0,4732,4733,5,1149,0,0,4733,4734,5,1158,0,0,4734,4735,
		3,632,316,0,4735,4736,5,1159,0,0,4736,4763,1,0,0,0,4737,4738,5,592,0,0,
		4738,4739,5,1149,0,0,4739,4740,5,1158,0,0,4740,4741,3,642,321,0,4741,4742,
		5,1159,0,0,4742,4763,1,0,0,0,4743,4744,5,593,0,0,4744,4745,5,1149,0,0,
		4745,4746,5,1158,0,0,4746,4747,3,642,321,0,4747,4748,5,1159,0,0,4748,4763,
		1,0,0,0,4749,4750,5,591,0,0,4750,4751,5,1149,0,0,4751,4752,5,1158,0,0,
		4752,4757,3,372,186,0,4753,4754,5,1160,0,0,4754,4756,3,372,186,0,4755,
		4753,1,0,0,0,4756,4759,1,0,0,0,4757,4755,1,0,0,0,4757,4758,1,0,0,0,4758,
		4760,1,0,0,0,4759,4757,1,0,0,0,4760,4761,5,1159,0,0,4761,4763,1,0,0,0,
		4762,4713,1,0,0,0,4762,4719,1,0,0,0,4762,4725,1,0,0,0,4762,4731,1,0,0,
		0,4762,4737,1,0,0,0,4762,4743,1,0,0,0,4762,4749,1,0,0,0,4763,371,1,0,0,
		0,4764,4765,5,1158,0,0,4765,4766,3,562,281,0,4766,4767,5,1160,0,0,4767,
		4768,3,562,281,0,4768,4769,5,1159,0,0,4769,373,1,0,0,0,4770,4771,7,64,
		0,0,4771,375,1,0,0,0,4772,4773,7,65,0,0,4773,4774,5,1149,0,0,4774,4791,
		3,380,190,0,4775,4776,5,488,0,0,4776,4777,5,1149,0,0,4777,4778,5,1173,
		0,0,4778,4779,5,1160,0,0,4779,4780,5,489,0,0,4780,4781,5,1149,0,0,4781,
		4791,3,602,301,0,4782,4783,5,581,0,0,4783,4784,5,1149,0,0,4784,4785,5,
		1173,0,0,4785,4786,5,1160,0,0,4786,4787,5,582,0,0,4787,4788,5,1149,0,0,
		4788,4791,3,602,301,0,4789,4791,5,630,0,0,4790,4772,1,0,0,0,4790,4775,
		1,0,0,0,4790,4782,1,0,0,0,4790,4789,1,0,0,0,4791,377,1,0,0,0,4792,4793,
		5,673,0,0,4793,4794,5,1149,0,0,4794,4805,5,1173,0,0,4795,4796,5,556,0,
		0,4796,4797,5,1149,0,0,4797,4805,5,1173,0,0,4798,4799,5,395,0,0,4799,4800,
		5,1149,0,0,4800,4805,5,1173,0,0,4801,4802,5,560,0,0,4802,4803,5,1149,0,
		0,4803,4805,5,1173,0,0,4804,4792,1,0,0,0,4804,4795,1,0,0,0,4804,4798,1,
		0,0,0,4804,4801,1,0,0,0,4805,379,1,0,0,0,4806,4811,3,588,294,0,4807,4808,
		5,1160,0,0,4808,4810,3,588,294,0,4809,4807,1,0,0,0,4810,4813,1,0,0,0,4811,
		4809,1,0,0,0,4811,4812,1,0,0,0,4812,4816,1,0,0,0,4813,4811,1,0,0,0,4814,
		4816,5,1173,0,0,4815,4806,1,0,0,0,4815,4814,1,0,0,0,4816,381,1,0,0,0,4817,
		4818,5,691,0,0,4818,4819,7,66,0,0,4819,4821,3,590,295,0,4820,4822,7,67,
		0,0,4821,4820,1,0,0,0,4821,4822,1,0,0,0,4822,383,1,0,0,0,4823,4824,5,691,
		0,0,4824,4825,5,411,0,0,4825,4831,3,590,295,0,4826,4829,5,650,0,0,4827,
		4828,5,65,0,0,4828,4830,5,514,0,0,4829,4827,1,0,0,0,4829,4830,1,0,0,0,
		4830,4832,1,0,0,0,4831,4826,1,0,0,0,4831,4832,1,0,0,0,4832,385,1,0,0,0,
		4833,4834,5,691,0,0,4834,4835,5,565,0,0,4835,4836,3,590,295,0,4836,387,
		1,0,0,0,4837,4838,5,691,0,0,4838,4839,5,373,0,0,4839,4842,3,590,295,0,
		4840,4841,5,541,0,0,4841,4843,5,558,0,0,4842,4840,1,0,0,0,4842,4843,1,
		0,0,0,4843,389,1,0,0,0,4844,4845,5,691,0,0,4845,4846,5,603,0,0,4846,4847,
		3,590,295,0,4847,391,1,0,0,0,4848,4849,5,691,0,0,4849,4852,5,576,0,0,4850,
		4851,5,33,0,0,4851,4853,3,590,295,0,4852,4850,1,0,0,0,4852,4853,1,0,0,
		0,4853,393,1,0,0,0,4854,4855,5,565,0,0,4855,4856,3,596,298,0,4856,4859,
		5,68,0,0,4857,4860,5,1173,0,0,4858,4860,5,1184,0,0,4859,4857,1,0,0,0,4859,
		4858,1,0,0,0,4860,395,1,0,0,0,4861,4862,5,720,0,0,4862,4865,3,596,298,
		0,4863,4864,5,189,0,0,4864,4866,3,644,322,0,4865,4863,1,0,0,0,4865,4866,
		1,0,0,0,4866,397,1,0,0,0,4867,4868,7,68,0,0,4868,4869,5,565,0,0,4869,4870,
		3,596,298,0,4870,399,1,0,0,0,4871,4874,3,402,201,0,4872,4874,3,4,2,0,4873,
		4871,1,0,0,0,4873,4872,1,0,0,0,4874,401,1,0,0,0,4875,4876,3,596,298,0,
		4876,4877,5,1169,0,0,4877,4879,1,0,0,0,4878,4875,1,0,0,0,4878,4879,1,0,
		0,0,4879,4880,1,0,0,0,4880,4919,5,348,0,0,4881,4882,3,422,211,0,4882,4883,
		5,1161,0,0,4883,4885,1,0,0,0,4884,4881,1,0,0,0,4885,4888,1,0,0,0,4886,
		4884,1,0,0,0,4886,4887,1,0,0,0,4887,4894,1,0,0,0,4888,4886,1,0,0,0,4889,
		4890,3,424,212,0,4890,4891,5,1161,0,0,4891,4893,1,0,0,0,4892,4889,1,0,
		0,0,4893,4896,1,0,0,0,4894,4892,1,0,0,0,4894,4895,1,0,0,0,4895,4902,1,
		0,0,0,4896,4894,1,0,0,0,4897,4898,3,426,213,0,4898,4899,5,1161,0,0,4899,
		4901,1,0,0,0,4900,4897,1,0,0,0,4901,4904,1,0,0,0,4902,4900,1,0,0,0,4902,
		4903,1,0,0,0,4903,4910,1,0,0,0,4904,4902,1,0,0,0,4905,4906,3,428,214,0,
		4906,4907,5,1161,0,0,4907,4909,1,0,0,0,4908,4905,1,0,0,0,4909,4912,1,0,
		0,0,4910,4908,1,0,0,0,4910,4911,1,0,0,0,4911,4916,1,0,0,0,4912,4910,1,
		0,0,0,4913,4915,3,432,216,0,4914,4913,1,0,0,0,4915,4918,1,0,0,0,4916,4914,
		1,0,0,0,4916,4917,1,0,0,0,4917,4920,1,0,0,0,4918,4916,1,0,0,0,4919,4886,
		1,0,0,0,4919,4920,1,0,0,0,4920,4921,1,0,0,0,4921,4923,5,411,0,0,4922,4924,
		3,596,298,0,4923,4922,1,0,0,0,4923,4924,1,0,0,0,4924,403,1,0,0,0,4925,
		4928,5,23,0,0,4926,4929,3,596,298,0,4927,4929,3,702,351,0,4928,4926,1,
		0,0,0,4928,4927,1,0,0,0,4928,4929,1,0,0,0,4929,4931,1,0,0,0,4930,4932,
		3,434,217,0,4931,4930,1,0,0,0,4932,4933,1,0,0,0,4933,4931,1,0,0,0,4933,
		4934,1,0,0,0,4934,4941,1,0,0,0,4935,4937,5,54,0,0,4936,4938,3,432,216,
		0,4937,4936,1,0,0,0,4938,4939,1,0,0,0,4939,4937,1,0,0,0,4939,4940,1,0,
		0,0,4940,4942,1,0,0,0,4941,4935,1,0,0,0,4941,4942,1,0,0,0,4942,4943,1,
		0,0,0,4943,4944,5,411,0,0,4944,4945,5,23,0,0,4945,405,1,0,0,0,4946,4947,
		5,77,0,0,4947,4948,3,702,351,0,4948,4950,5,176,0,0,4949,4951,3,432,216,
		0,4950,4949,1,0,0,0,4951,4952,1,0,0,0,4952,4950,1,0,0,0,4952,4953,1,0,
		0,0,4953,4957,1,0,0,0,4954,4956,3,436,218,0,4955,4954,1,0,0,0,4956,4959,
		1,0,0,0,4957,4955,1,0,0,0,4957,4958,1,0,0,0,4958,4966,1,0,0,0,4959,4957,
		1,0,0,0,4960,4962,5,54,0,0,4961,4963,3,432,216,0,4962,4961,1,0,0,0,4963,
		4964,1,0,0,0,4964,4962,1,0,0,0,4964,4965,1,0,0,0,4965,4967,1,0,0,0,4966,
		4960,1,0,0,0,4966,4967,1,0,0,0,4967,4968,1,0,0,0,4968,4969,5,411,0,0,4969,
		4970,5,77,0,0,4970,407,1,0,0,0,4971,4972,5,89,0,0,4972,4973,3,596,298,
		0,4973,409,1,0,0,0,4974,4975,5,96,0,0,4975,4976,3,596,298,0,4976,411,1,
		0,0,0,4977,4978,3,596,298,0,4978,4979,5,1169,0,0,4979,4981,1,0,0,0,4980,
		4977,1,0,0,0,4980,4981,1,0,0,0,4981,4982,1,0,0,0,4982,4984,5,105,0,0,4983,
		4985,3,432,216,0,4984,4983,1,0,0,0,4985,4986,1,0,0,0,4986,4984,1,0,0,0,
		4986,4987,1,0,0,0,4987,4988,1,0,0,0,4988,4989,5,411,0,0,4989,4991,5,105,
		0,0,4990,4992,3,596,298,0,4991,4990,1,0,0,0,4991,4992,1,0,0,0,4992,413,
		1,0,0,0,4993,4994,3,596,298,0,4994,4995,5,1169,0,0,4995,4997,1,0,0,0,4996,
		4993,1,0,0,0,4996,4997,1,0,0,0,4997,4998,1,0,0,0,4998,5000,5,141,0,0,4999,
		5001,3,432,216,0,5000,4999,1,0,0,0,5001,5002,1,0,0,0,5002,5000,1,0,0,0,
		5002,5003,1,0,0,0,5003,5004,1,0,0,0,5004,5005,5,671,0,0,5005,5006,3,702,
		351,0,5006,5007,5,411,0,0,5007,5009,5,141,0,0,5008,5010,3,596,298,0,5009,
		5008,1,0,0,0,5009,5010,1,0,0,0,5010,415,1,0,0,0,5011,5012,5,147,0,0,5012,
		5013,3,702,351,0,5013,417,1,0,0,0,5014,5015,3,596,298,0,5015,5016,5,1169,
		0,0,5016,5018,1,0,0,0,5017,5014,1,0,0,0,5017,5018,1,0,0,0,5018,5019,1,
		0,0,0,5019,5020,5,194,0,0,5020,5021,3,702,351,0,5021,5023,5,403,0,0,5022,
		5024,3,432,216,0,5023,5022,1,0,0,0,5024,5025,1,0,0,0,5025,5023,1,0,0,0,
		5025,5026,1,0,0,0,5026,5027,1,0,0,0,5027,5028,5,411,0,0,5028,5030,5,194,
		0,0,5029,5031,3,596,298,0,5030,5029,1,0,0,0,5030,5031,1,0,0,0,5031,419,
		1,0,0,0,5032,5033,5,365,0,0,5033,5048,3,596,298,0,5034,5039,5,64,0,0,5035,
		5037,5,525,0,0,5036,5035,1,0,0,0,5036,5037,1,0,0,0,5037,5038,1,0,0,0,5038,
		5040,5,68,0,0,5039,5036,1,0,0,0,5039,5040,1,0,0,0,5040,5041,1,0,0,0,5041,
		5042,3,596,298,0,5042,5043,5,87,0,0,5043,5044,3,630,315,0,5044,5048,1,
		0,0,0,5045,5046,5,544,0,0,5046,5048,3,596,298,0,5047,5032,1,0,0,0,5047,
		5034,1,0,0,0,5047,5045,1,0,0,0,5048,421,1,0,0,0,5049,5050,5,42,0,0,5050,
		5051,3,630,315,0,5051,5054,3,616,308,0,5052,5053,5,43,0,0,5053,5055,3,
		702,351,0,5054,5052,1,0,0,0,5054,5055,1,0,0,0,5055,423,1,0,0,0,5056,5057,
		5,42,0,0,5057,5058,3,596,298,0,5058,5059,5,30,0,0,5059,5066,5,65,0,0,5060,
		5067,3,602,301,0,5061,5063,5,162,0,0,5062,5064,5,677,0,0,5063,5062,1,0,
		0,0,5063,5064,1,0,0,0,5064,5065,1,0,0,0,5065,5067,5,1173,0,0,5066,5060,
		1,0,0,0,5066,5061,1,0,0,0,5067,425,1,0,0,0,5068,5069,5,42,0,0,5069,5070,
		3,596,298,0,5070,5071,5,39,0,0,5071,5072,5,65,0,0,5072,5073,3,214,107,
		0,5073,427,1,0,0,0,5074,5075,5,42,0,0,5075,5076,7,69,0,0,5076,5077,5,446,
		0,0,5077,5078,5,65,0,0,5078,5083,3,430,215,0,5079,5080,5,1160,0,0,5080,
		5082,3,430,215,0,5081,5079,1,0,0,0,5082,5085,1,0,0,0,5083,5081,1,0,0,0,
		5083,5084,1,0,0,0,5084,5086,1,0,0,0,5085,5083,1,0,0,0,5086,5087,3,400,
		200,0,5087,429,1,0,0,0,5088,5100,3,602,301,0,5089,5091,5,162,0,0,5090,
		5092,5,677,0,0,5091,5090,1,0,0,0,5091,5092,1,0,0,0,5092,5093,1,0,0,0,5093,
		5100,5,1173,0,0,5094,5100,3,596,298,0,5095,5100,5,163,0,0,5096,5097,5,
		114,0,0,5097,5100,5,439,0,0,5098,5100,5,161,0,0,5099,5088,1,0,0,0,5099,
		5089,1,0,0,0,5099,5094,1,0,0,0,5099,5095,1,0,0,0,5099,5096,1,0,0,0,5099,
		5098,1,0,0,0,5100,431,1,0,0,0,5101,5104,3,20,10,0,5102,5104,3,4,2,0,5103,
		5101,1,0,0,0,5103,5102,1,0,0,0,5104,5105,1,0,0,0,5105,5106,5,1161,0,0,
		5106,433,1,0,0,0,5107,5110,5,192,0,0,5108,5111,3,614,307,0,5109,5111,3,
		702,351,0,5110,5108,1,0,0,0,5110,5109,1,0,0,0,5111,5112,1,0,0,0,5112,5114,
		5,176,0,0,5113,5115,3,432,216,0,5114,5113,1,0,0,0,5115,5116,1,0,0,0,5116,
		5114,1,0,0,0,5116,5117,1,0,0,0,5117,435,1,0,0,0,5118,5119,5,55,0,0,5119,
		5120,3,702,351,0,5120,5122,5,176,0,0,5121,5123,3,432,216,0,5122,5121,1,
		0,0,0,5123,5124,1,0,0,0,5124,5122,1,0,0,0,5124,5125,1,0,0,0,5125,437,1,
		0,0,0,5126,5127,5,7,0,0,5127,5128,5,673,0,0,5128,5133,3,458,229,0,5129,
		5130,5,1160,0,0,5130,5132,3,458,229,0,5131,5129,1,0,0,0,5132,5135,1,0,
		0,0,5133,5131,1,0,0,0,5133,5134,1,0,0,0,5134,5187,1,0,0,0,5135,5133,1,
		0,0,0,5136,5137,5,7,0,0,5137,5139,5,673,0,0,5138,5140,3,652,326,0,5139,
		5138,1,0,0,0,5139,5140,1,0,0,0,5140,5141,1,0,0,0,5141,5146,3,460,230,0,
		5142,5143,5,1160,0,0,5143,5145,3,460,230,0,5144,5142,1,0,0,0,5145,5148,
		1,0,0,0,5146,5144,1,0,0,0,5146,5147,1,0,0,0,5147,5163,1,0,0,0,5148,5146,
		1,0,0,0,5149,5161,5,143,0,0,5150,5162,5,534,0,0,5151,5158,3,464,232,0,
		5152,5154,5,10,0,0,5153,5152,1,0,0,0,5153,5154,1,0,0,0,5154,5155,1,0,0,
		0,5155,5157,3,464,232,0,5156,5153,1,0,0,0,5157,5160,1,0,0,0,5158,5156,
		1,0,0,0,5158,5159,1,0,0,0,5159,5162,1,0,0,0,5160,5158,1,0,0,0,5161,5150,
		1,0,0,0,5161,5151,1,0,0,0,5162,5164,1,0,0,0,5163,5149,1,0,0,0,5163,5164,
		1,0,0,0,5164,5171,1,0,0,0,5165,5167,5,195,0,0,5166,5168,3,466,233,0,5167,
		5166,1,0,0,0,5168,5169,1,0,0,0,5169,5167,1,0,0,0,5169,5170,1,0,0,0,5170,
		5172,1,0,0,0,5171,5165,1,0,0,0,5171,5172,1,0,0,0,5172,5177,1,0,0,0,5173,
		5176,3,468,234,0,5174,5176,3,470,235,0,5175,5173,1,0,0,0,5175,5174,1,0,
		0,0,5176,5179,1,0,0,0,5177,5175,1,0,0,0,5177,5178,1,0,0,0,5178,5184,1,
		0,0,0,5179,5177,1,0,0,0,5180,5181,5,372,0,0,5181,5185,5,1173,0,0,5182,
		5183,5,14,0,0,5183,5185,5,1173,0,0,5184,5180,1,0,0,0,5184,5182,1,0,0,0,
		5184,5185,1,0,0,0,5185,5187,1,0,0,0,5186,5126,1,0,0,0,5186,5136,1,0,0,
		0,5187,439,1,0,0,0,5188,5189,5,34,0,0,5189,5190,5,673,0,0,5190,5195,3,
		460,230,0,5191,5192,5,1160,0,0,5192,5194,3,460,230,0,5193,5191,1,0,0,0,
		5194,5197,1,0,0,0,5195,5193,1,0,0,0,5195,5196,1,0,0,0,5196,5249,1,0,0,
		0,5197,5195,1,0,0,0,5198,5199,5,34,0,0,5199,5201,5,673,0,0,5200,5202,3,
		654,327,0,5201,5200,1,0,0,0,5201,5202,1,0,0,0,5202,5203,1,0,0,0,5203,5208,
		3,460,230,0,5204,5205,5,1160,0,0,5205,5207,3,460,230,0,5206,5204,1,0,0,
		0,5207,5210,1,0,0,0,5208,5206,1,0,0,0,5208,5209,1,0,0,0,5209,5225,1,0,
		0,0,5210,5208,1,0,0,0,5211,5223,5,143,0,0,5212,5224,5,534,0,0,5213,5220,
		3,464,232,0,5214,5216,5,10,0,0,5215,5214,1,0,0,0,5215,5216,1,0,0,0,5216,
		5217,1,0,0,0,5217,5219,3,464,232,0,5218,5215,1,0,0,0,5219,5222,1,0,0,0,
		5220,5218,1,0,0,0,5220,5221,1,0,0,0,5221,5224,1,0,0,0,5222,5220,1,0,0,
		0,5223,5212,1,0,0,0,5223,5213,1,0,0,0,5224,5226,1,0,0,0,5225,5211,1,0,
		0,0,5225,5226,1,0,0,0,5226,5233,1,0,0,0,5227,5229,5,195,0,0,5228,5230,
		3,466,233,0,5229,5228,1,0,0,0,5230,5231,1,0,0,0,5231,5229,1,0,0,0,5231,
		5232,1,0,0,0,5232,5234,1,0,0,0,5233,5227,1,0,0,0,5233,5234,1,0,0,0,5234,
		5239,1,0,0,0,5235,5238,3,468,234,0,5236,5238,3,470,235,0,5237,5235,1,0,
		0,0,5237,5236,1,0,0,0,5238,5241,1,0,0,0,5239,5237,1,0,0,0,5239,5240,1,
		0,0,0,5240,5246,1,0,0,0,5241,5239,1,0,0,0,5242,5243,5,372,0,0,5243,5247,
		5,1173,0,0,5244,5245,5,14,0,0,5245,5247,5,1173,0,0,5246,5242,1,0,0,0,5246,
		5244,1,0,0,0,5246,5247,1,0,0,0,5247,5249,1,0,0,0,5248,5188,1,0,0,0,5248,
		5198,1,0,0,0,5249,441,1,0,0,0,5250,5251,5,52,0,0,5251,5253,5,673,0,0,5252,
		5254,3,652,326,0,5253,5252,1,0,0,0,5253,5254,1,0,0,0,5254,5255,1,0,0,0,
		5255,5260,3,574,287,0,5256,5257,5,1160,0,0,5257,5259,3,574,287,0,5258,
		5256,1,0,0,0,5259,5262,1,0,0,0,5260,5258,1,0,0,0,5260,5261,1,0,0,0,5261,
		443,1,0,0,0,5262,5260,1,0,0,0,5263,5264,5,72,0,0,5264,5269,3,472,236,0,
		5265,5266,5,1160,0,0,5266,5268,3,472,236,0,5267,5265,1,0,0,0,5268,5271,
		1,0,0,0,5269,5267,1,0,0,0,5269,5270,1,0,0,0,5270,5272,1,0,0,0,5271,5269,
		1,0,0,0,5272,5274,5,118,0,0,5273,5275,7,70,0,0,5274,5273,1,0,0,0,5274,
		5275,1,0,0,0,5275,5276,1,0,0,0,5276,5277,3,476,238,0,5277,5278,5,177,0,
		0,5278,5283,3,460,230,0,5279,5280,5,1160,0,0,5280,5282,3,460,230,0,5281,
		5279,1,0,0,0,5282,5285,1,0,0,0,5283,5281,1,0,0,0,5283,5284,1,0,0,0,5284,
		5300,1,0,0,0,5285,5283,1,0,0,0,5286,5298,5,143,0,0,5287,5299,5,534,0,0,
		5288,5295,3,464,232,0,5289,5291,5,10,0,0,5290,5289,1,0,0,0,5290,5291,1,
		0,0,0,5291,5292,1,0,0,0,5292,5294,3,464,232,0,5293,5290,1,0,0,0,5294,5297,
		1,0,0,0,5295,5293,1,0,0,0,5295,5296,1,0,0,0,5296,5299,1,0,0,0,5297,5295,
		1,0,0,0,5298,5287,1,0,0,0,5298,5288,1,0,0,0,5299,5301,1,0,0,0,5300,5286,
		1,0,0,0,5300,5301,1,0,0,0,5301,5311,1,0,0,0,5302,5308,5,195,0,0,5303,5304,
		5,72,0,0,5304,5307,5,120,0,0,5305,5307,3,466,233,0,5306,5303,1,0,0,0,5306,
		5305,1,0,0,0,5307,5310,1,0,0,0,5308,5306,1,0,0,0,5308,5309,1,0,0,0,5309,
		5312,1,0,0,0,5310,5308,1,0,0,0,5311,5302,1,0,0,0,5311,5312,1,0,0,0,5312,
		5319,1,0,0,0,5313,5314,5,12,0,0,5314,5315,3,574,287,0,5315,5316,5,195,
		0,0,5316,5317,5,602,0,0,5317,5318,3,446,223,0,5318,5320,1,0,0,0,5319,5313,
		1,0,0,0,5319,5320,1,0,0,0,5320,5357,1,0,0,0,5321,5324,5,72,0,0,5322,5325,
		3,574,287,0,5323,5325,3,596,298,0,5324,5322,1,0,0,0,5324,5323,1,0,0,0,
		5325,5333,1,0,0,0,5326,5329,5,1160,0,0,5327,5330,3,574,287,0,5328,5330,
		3,596,298,0,5329,5327,1,0,0,0,5329,5328,1,0,0,0,5330,5332,1,0,0,0,5331,
		5326,1,0,0,0,5332,5335,1,0,0,0,5333,5331,1,0,0,0,5333,5334,1,0,0,0,5334,
		5336,1,0,0,0,5335,5333,1,0,0,0,5336,5339,5,177,0,0,5337,5340,3,574,287,
		0,5338,5340,3,596,298,0,5339,5337,1,0,0,0,5339,5338,1,0,0,0,5340,5348,
		1,0,0,0,5341,5344,5,1160,0,0,5342,5345,3,574,287,0,5343,5345,3,596,298,
		0,5344,5342,1,0,0,0,5344,5343,1,0,0,0,5345,5347,1,0,0,0,5346,5341,1,0,
		0,0,5347,5350,1,0,0,0,5348,5346,1,0,0,0,5348,5349,1,0,0,0,5349,5354,1,
		0,0,0,5350,5348,1,0,0,0,5351,5352,5,195,0,0,5352,5353,5,711,0,0,5353,5355,
		5,120,0,0,5354,5351,1,0,0,0,5354,5355,1,0,0,0,5355,5357,1,0,0,0,5356,5263,
		1,0,0,0,5356,5321,1,0,0,0,5357,445,1,0,0,0,5358,5381,5,43,0,0,5359,5381,
		5,534,0,0,5360,5370,5,6,0,0,5361,5362,5,59,0,0,5362,5367,3,574,287,0,5363,
		5364,5,1160,0,0,5364,5366,3,574,287,0,5365,5363,1,0,0,0,5366,5369,1,0,
		0,0,5367,5365,1,0,0,0,5367,5368,1,0,0,0,5368,5371,1,0,0,0,5369,5367,1,
		0,0,0,5370,5361,1,0,0,0,5370,5371,1,0,0,0,5371,5381,1,0,0,0,5372,5377,
		3,574,287,0,5373,5374,5,1160,0,0,5374,5376,3,574,287,0,5375,5373,1,0,0,
		0,5376,5379,1,0,0,0,5377,5375,1,0,0,0,5377,5378,1,0,0,0,5378,5381,1,0,
		0,0,5379,5377,1,0,0,0,5380,5358,1,0,0,0,5380,5359,1,0,0,0,5380,5360,1,
		0,0,0,5380,5372,1,0,0,0,5381,447,1,0,0,0,5382,5383,5,72,0,0,5383,5384,
		5,571,0,0,5384,5385,5,118,0,0,5385,5386,3,574,287,0,5386,5387,5,177,0,
		0,5387,5392,3,574,287,0,5388,5389,5,1160,0,0,5389,5391,3,574,287,0,5390,
		5388,1,0,0,0,5391,5394,1,0,0,0,5392,5390,1,0,0,0,5392,5393,1,0,0,0,5393,
		5398,1,0,0,0,5394,5392,1,0,0,0,5395,5396,5,195,0,0,5396,5397,5,72,0,0,
		5397,5399,5,120,0,0,5398,5395,1,0,0,0,5398,5399,1,0,0,0,5399,449,1,0,0,
		0,5400,5401,5,140,0,0,5401,5402,5,673,0,0,5402,5407,3,478,239,0,5403,5404,
		5,1160,0,0,5404,5406,3,478,239,0,5405,5403,1,0,0,0,5406,5409,1,0,0,0,5407,
		5405,1,0,0,0,5407,5408,1,0,0,0,5408,451,1,0,0,0,5409,5407,1,0,0,0,5410,
		5411,5,148,0,0,5411,5416,3,472,236,0,5412,5413,5,1160,0,0,5413,5415,3,
		472,236,0,5414,5412,1,0,0,0,5415,5418,1,0,0,0,5416,5414,1,0,0,0,5416,5417,
		1,0,0,0,5417,5419,1,0,0,0,5418,5416,1,0,0,0,5419,5421,5,118,0,0,5420,5422,
		7,70,0,0,5421,5420,1,0,0,0,5421,5422,1,0,0,0,5422,5423,1,0,0,0,5423,5424,
		3,476,238,0,5424,5425,5,68,0,0,5425,5430,3,574,287,0,5426,5427,5,1160,
		0,0,5427,5429,3,574,287,0,5428,5426,1,0,0,0,5429,5432,1,0,0,0,5430,5428,
		1,0,0,0,5430,5431,1,0,0,0,5431,5475,1,0,0,0,5432,5430,1,0,0,0,5433,5434,
		5,148,0,0,5434,5436,5,6,0,0,5435,5437,5,736,0,0,5436,5435,1,0,0,0,5436,
		5437,1,0,0,0,5437,5438,1,0,0,0,5438,5439,5,1160,0,0,5439,5440,5,72,0,0,
		5440,5441,5,120,0,0,5441,5442,5,68,0,0,5442,5447,3,574,287,0,5443,5444,
		5,1160,0,0,5444,5446,3,574,287,0,5445,5443,1,0,0,0,5446,5449,1,0,0,0,5447,
		5445,1,0,0,0,5447,5448,1,0,0,0,5448,5475,1,0,0,0,5449,5447,1,0,0,0,5450,
		5451,5,148,0,0,5451,5456,3,596,298,0,5452,5453,5,1160,0,0,5453,5455,3,
		596,298,0,5454,5452,1,0,0,0,5455,5458,1,0,0,0,5456,5454,1,0,0,0,5456,5457,
		1,0,0,0,5457,5459,1,0,0,0,5458,5456,1,0,0,0,5459,5462,5,68,0,0,5460,5463,
		3,574,287,0,5461,5463,3,596,298,0,5462,5460,1,0,0,0,5462,5461,1,0,0,0,
		5463,5471,1,0,0,0,5464,5467,5,1160,0,0,5465,5468,3,574,287,0,5466,5468,
		3,596,298,0,5467,5465,1,0,0,0,5467,5466,1,0,0,0,5468,5470,1,0,0,0,5469,
		5464,1,0,0,0,5470,5473,1,0,0,0,5471,5469,1,0,0,0,5471,5472,1,0,0,0,5472,
		5475,1,0,0,0,5473,5471,1,0,0,0,5474,5410,1,0,0,0,5474,5433,1,0,0,0,5474,
		5450,1,0,0,0,5475,453,1,0,0,0,5476,5477,5,148,0,0,5477,5478,5,571,0,0,
		5478,5479,5,118,0,0,5479,5480,3,574,287,0,5480,5481,5,68,0,0,5481,5486,
		3,574,287,0,5482,5483,5,1160,0,0,5483,5485,3,574,287,0,5484,5482,1,0,0,
		0,5485,5488,1,0,0,0,5486,5484,1,0,0,0,5486,5487,1,0,0,0,5487,455,1,0,0,
		0,5488,5486,1,0,0,0,5489,5490,5,154,0,0,5490,5493,5,556,0,0,5491,5492,
		5,65,0,0,5492,5494,3,574,287,0,5493,5491,1,0,0,0,5493,5494,1,0,0,0,5494,
		5495,1,0,0,0,5495,5498,5,1149,0,0,5496,5499,3,696,348,0,5497,5499,5,1173,
		0,0,5498,5496,1,0,0,0,5498,5497,1,0,0,0,5499,457,1,0,0,0,5500,5501,3,574,
		287,0,5501,5502,3,468,234,0,5502,459,1,0,0,0,5503,5504,3,574,287,0,5504,
		5505,5,452,0,0,5505,5506,5,20,0,0,5506,5507,5,556,0,0,5507,5508,5,1173,
		0,0,5508,5531,1,0,0,0,5509,5510,3,574,287,0,5510,5511,5,452,0,0,5511,5512,
		5,20,0,0,5512,5516,5,1173,0,0,5513,5514,5,146,0,0,5514,5515,5,36,0,0,5515,
		5517,5,556,0,0,5516,5513,1,0,0,0,5516,5517,1,0,0,0,5517,5531,1,0,0,0,5518,
		5519,3,574,287,0,5519,5520,5,452,0,0,5520,5521,7,71,0,0,5521,5526,3,462,
		231,0,5522,5523,5,123,0,0,5523,5525,3,462,231,0,5524,5522,1,0,0,0,5525,
		5528,1,0,0,0,5526,5524,1,0,0,0,5526,5527,1,0,0,0,5527,5531,1,0,0,0,5528,
		5526,1,0,0,0,5529,5531,3,574,287,0,5530,5503,1,0,0,0,5530,5509,1,0,0,0,
		5530,5518,1,0,0,0,5530,5529,1,0,0,0,5531,461,1,0,0,0,5532,5535,3,594,297,
		0,5533,5534,7,72,0,0,5534,5536,5,1173,0,0,5535,5533,1,0,0,0,5535,5536,
		1,0,0,0,5536,5542,1,0,0,0,5537,5538,3,594,297,0,5538,5539,7,73,0,0,5539,
		5540,3,696,348,0,5540,5542,1,0,0,0,5541,5532,1,0,0,0,5541,5537,1,0,0,0,
		5542,463,1,0,0,0,5543,5552,5,167,0,0,5544,5552,5,690,0,0,5545,5546,5,362,
		0,0,5546,5552,5,1173,0,0,5547,5548,5,469,0,0,5548,5552,5,1173,0,0,5549,
		5550,5,647,0,0,5550,5552,5,1173,0,0,5551,5543,1,0,0,0,5551,5544,1,0,0,
		0,5551,5545,1,0,0,0,5551,5547,1,0,0,0,5551,5549,1,0,0,0,5552,465,1,0,0,
		0,5553,5554,5,504,0,0,5554,5562,3,602,301,0,5555,5556,5,507,0,0,5556,5562,
		3,602,301,0,5557,5558,5,503,0,0,5558,5562,3,602,301,0,5559,5560,5,508,
		0,0,5560,5562,3,602,301,0,5561,5553,1,0,0,0,5561,5555,1,0,0,0,5561,5557,
		1,0,0,0,5561,5559,1,0,0,0,5562,467,1,0,0,0,5563,5564,5,556,0,0,5564,5571,
		5,424,0,0,5565,5572,5,43,0,0,5566,5572,5,524,0,0,5567,5568,5,86,0,0,5568,
		5569,3,602,301,0,5569,5570,5,701,0,0,5570,5572,1,0,0,0,5571,5565,1,0,0,
		0,5571,5566,1,0,0,0,5571,5567,1,0,0,0,5571,5572,1,0,0,0,5572,5602,1,0,
		0,0,5573,5574,5,556,0,0,5574,5577,5,449,0,0,5575,5578,5,43,0,0,5576,5578,
		3,602,301,0,5577,5575,1,0,0,0,5577,5576,1,0,0,0,5578,5602,1,0,0,0,5579,
		5580,5,556,0,0,5580,5581,5,601,0,0,5581,5586,5,86,0,0,5582,5587,5,43,0,
		0,5583,5584,3,602,301,0,5584,5585,5,701,0,0,5585,5587,1,0,0,0,5586,5582,
		1,0,0,0,5586,5583,1,0,0,0,5587,5602,1,0,0,0,5588,5589,5,556,0,0,5589,5590,
		5,143,0,0,5590,5592,5,36,0,0,5591,5593,7,74,0,0,5592,5591,1,0,0,0,5592,
		5593,1,0,0,0,5593,5602,1,0,0,0,5594,5595,5,428,0,0,5595,5602,3,602,301,
		0,5596,5599,5,557,0,0,5597,5600,3,602,301,0,5598,5600,5,665,0,0,5599,5597,
		1,0,0,0,5599,5598,1,0,0,0,5600,5602,1,0,0,0,5601,5563,1,0,0,0,5601,5573,
		1,0,0,0,5601,5579,1,0,0,0,5601,5588,1,0,0,0,5601,5594,1,0,0,0,5601,5596,
		1,0,0,0,5602,469,1,0,0,0,5603,5604,5,335,0,0,5604,5605,7,75,0,0,5605,471,
		1,0,0,0,5606,5611,3,474,237,0,5607,5608,5,1158,0,0,5608,5609,3,630,315,
		0,5609,5610,5,1159,0,0,5610,5612,1,0,0,0,5611,5607,1,0,0,0,5611,5612,1,
		0,0,0,5612,473,1,0,0,0,5613,5615,5,6,0,0,5614,5616,5,736,0,0,5615,5614,
		1,0,0,0,5615,5616,1,0,0,0,5616,5737,1,0,0,0,5617,5619,5,7,0,0,5618,5620,
		5,744,0,0,5619,5618,1,0,0,0,5619,5620,1,0,0,0,5620,5737,1,0,0,0,5621,5629,
		5,34,0,0,5622,5623,5,656,0,0,5623,5630,5,753,0,0,5624,5630,5,744,0,0,5625,
		5630,5,679,0,0,5626,5630,5,673,0,0,5627,5630,5,654,0,0,5628,5630,5,602,
		0,0,5629,5622,1,0,0,0,5629,5624,1,0,0,0,5629,5625,1,0,0,0,5629,5626,1,
		0,0,0,5629,5627,1,0,0,0,5629,5628,1,0,0,0,5629,5630,1,0,0,0,5630,5737,
		1,0,0,0,5631,5633,5,45,0,0,5632,5634,5,449,0,0,5633,5632,1,0,0,0,5633,
		5634,1,0,0,0,5634,5737,1,0,0,0,5635,5637,5,52,0,0,5636,5638,5,602,0,0,
		5637,5636,1,0,0,0,5637,5638,1,0,0,0,5638,5737,1,0,0,0,5639,5737,5,419,
		0,0,5640,5737,5,720,0,0,5641,5737,5,721,0,0,5642,5643,5,72,0,0,5643,5737,
		5,120,0,0,5644,5737,5,81,0,0,5645,5737,5,85,0,0,5646,5647,5,103,0,0,5647,
		5737,5,753,0,0,5648,5737,5,737,0,0,5649,5737,5,571,0,0,5650,5737,5,137,
		0,0,5651,5737,5,738,0,0,5652,5653,5,594,0,0,5653,5655,7,76,0,0,5654,5656,
		5,711,0,0,5655,5654,1,0,0,0,5655,5656,1,0,0,0,5656,5737,1,0,0,0,5657,5737,
		5,153,0,0,5658,5659,5,156,0,0,5659,5737,7,77,0,0,5660,5737,5,750,0,0,5661,
		5737,5,751,0,0,5662,5737,5,179,0,0,5663,5737,5,186,0,0,5664,5737,5,187,
		0,0,5665,5737,5,712,0,0,5666,5737,5,713,0,0,5667,5737,5,714,0,0,5668,5737,
		5,715,0,0,5669,5737,5,716,0,0,5670,5737,5,717,0,0,5671,5737,5,718,0,0,
		5672,5737,5,719,0,0,5673,5737,5,722,0,0,5674,5737,5,723,0,0,5675,5737,
		5,724,0,0,5676,5737,5,725,0,0,5677,5737,5,726,0,0,5678,5737,5,727,0,0,
		5679,5737,5,728,0,0,5680,5737,5,729,0,0,5681,5737,5,730,0,0,5682,5737,
		5,733,0,0,5683,5737,5,734,0,0,5684,5737,5,735,0,0,5685,5737,5,739,0,0,
		5686,5737,5,740,0,0,5687,5737,5,741,0,0,5688,5737,5,742,0,0,5689,5737,
		5,743,0,0,5690,5737,5,746,0,0,5691,5737,5,747,0,0,5692,5737,5,748,0,0,
		5693,5737,5,749,0,0,5694,5737,5,1087,0,0,5695,5737,5,752,0,0,5696,5737,
		5,754,0,0,5697,5737,5,755,0,0,5698,5737,5,756,0,0,5699,5737,5,1123,0,0,
		5700,5737,5,1124,0,0,5701,5737,5,1125,0,0,5702,5737,5,1126,0,0,5703,5737,
		5,1129,0,0,5704,5705,5,349,0,0,5705,5737,7,78,0,0,5706,5707,5,801,0,0,
		5707,5737,5,711,0,0,5708,5709,5,135,0,0,5709,5712,5,543,0,0,5710,5712,
		5,1131,0,0,5711,5708,1,0,0,0,5711,5710,1,0,0,0,5712,5713,1,0,0,0,5713,
		5737,5,711,0,0,5714,5715,5,711,0,0,5715,5737,5,120,0,0,5716,5717,5,380,
		0,0,5717,5737,5,711,0,0,5718,5719,5,45,0,0,5719,5737,5,449,0,0,5720,5721,
		5,1127,0,0,5721,5737,5,1130,0,0,5722,5723,5,72,0,0,5723,5737,5,120,0,0,
		5724,5725,5,154,0,0,5725,5737,5,673,0,0,5726,5727,5,620,0,0,5727,5737,
		5,1130,0,0,5728,5729,5,102,0,0,5729,5730,5,68,0,0,5730,5737,5,745,0,0,
		5731,5732,5,153,0,0,5732,5733,5,87,0,0,5733,5737,5,745,0,0,5734,5735,5,
		731,0,0,5735,5737,5,732,0,0,5736,5613,1,0,0,0,5736,5617,1,0,0,0,5736,5621,
		1,0,0,0,5736,5631,1,0,0,0,5736,5635,1,0,0,0,5736,5639,1,0,0,0,5736,5640,
		1,0,0,0,5736,5641,1,0,0,0,5736,5642,1,0,0,0,5736,5644,1,0,0,0,5736,5645,
		1,0,0,0,5736,5646,1,0,0,0,5736,5648,1,0,0,0,5736,5649,1,0,0,0,5736,5650,
		1,0,0,0,5736,5651,1,0,0,0,5736,5652,1,0,0,0,5736,5657,1,0,0,0,5736,5658,
		1,0,0,0,5736,5660,1,0,0,0,5736,5661,1,0,0,0,5736,5662,1,0,0,0,5736,5663,
		1,0,0,0,5736,5664,1,0,0,0,5736,5665,1,0,0,0,5736,5666,1,0,0,0,5736,5667,
		1,0,0,0,5736,5668,1,0,0,0,5736,5669,1,0,0,0,5736,5670,1,0,0,0,5736,5671,
		1,0,0,0,5736,5672,1,0,0,0,5736,5673,1,0,0,0,5736,5674,1,0,0,0,5736,5675,
		1,0,0,0,5736,5676,1,0,0,0,5736,5677,1,0,0,0,5736,5678,1,0,0,0,5736,5679,
		1,0,0,0,5736,5680,1,0,0,0,5736,5681,1,0,0,0,5736,5682,1,0,0,0,5736,5683,
		1,0,0,0,5736,5684,1,0,0,0,5736,5685,1,0,0,0,5736,5686,1,0,0,0,5736,5687,
		1,0,0,0,5736,5688,1,0,0,0,5736,5689,1,0,0,0,5736,5690,1,0,0,0,5736,5691,
		1,0,0,0,5736,5692,1,0,0,0,5736,5693,1,0,0,0,5736,5694,1,0,0,0,5736,5695,
		1,0,0,0,5736,5696,1,0,0,0,5736,5697,1,0,0,0,5736,5698,1,0,0,0,5736,5699,
		1,0,0,0,5736,5700,1,0,0,0,5736,5701,1,0,0,0,5736,5702,1,0,0,0,5736,5703,
		1,0,0,0,5736,5704,1,0,0,0,5736,5706,1,0,0,0,5736,5711,1,0,0,0,5736,5714,
		1,0,0,0,5736,5716,1,0,0,0,5736,5718,1,0,0,0,5736,5720,1,0,0,0,5736,5722,
		1,0,0,0,5736,5724,1,0,0,0,5736,5726,1,0,0,0,5736,5728,1,0,0,0,5736,5731,
		1,0,0,0,5736,5734,1,0,0,0,5737,475,1,0,0,0,5738,5755,5,1142,0,0,5739,5740,
		5,1142,0,0,5740,5741,5,1157,0,0,5741,5755,5,1142,0,0,5742,5743,3,596,298,
		0,5743,5744,5,1157,0,0,5744,5745,5,1142,0,0,5745,5755,1,0,0,0,5746,5747,
		3,596,298,0,5747,5748,5,1157,0,0,5748,5749,3,596,298,0,5749,5755,1,0,0,
		0,5750,5751,3,596,298,0,5751,5752,3,600,300,0,5752,5755,1,0,0,0,5753,5755,
		3,596,298,0,5754,5738,1,0,0,0,5754,5739,1,0,0,0,5754,5742,1,0,0,0,5754,
		5746,1,0,0,0,5754,5750,1,0,0,0,5754,5753,1,0,0,0,5755,477,1,0,0,0,5756,
		5757,3,574,287,0,5757,5758,5,177,0,0,5758,5759,3,574,287,0,5759,479,1,
		0,0,0,5760,5762,5,9,0,0,5761,5763,7,79,0,0,5762,5761,1,0,0,0,5762,5763,
		1,0,0,0,5763,5764,1,0,0,0,5764,5765,7,58,0,0,5765,5783,3,632,316,0,5766,
		5767,5,186,0,0,5767,5768,5,76,0,0,5768,5769,5,118,0,0,5769,5774,3,566,
		283,0,5770,5771,5,1160,0,0,5771,5773,3,566,283,0,5772,5770,1,0,0,0,5773,
		5776,1,0,0,0,5774,5772,1,0,0,0,5774,5775,1,0,0,0,5775,5781,1,0,0,0,5776,
		5774,1,0,0,0,5777,5778,5,195,0,0,5778,5779,3,602,301,0,5779,5780,5,19,
		0,0,5780,5782,1,0,0,0,5781,5777,1,0,0,0,5781,5782,1,0,0,0,5782,5784,1,
		0,0,0,5783,5766,1,0,0,0,5783,5784,1,0,0,0,5784,5796,1,0,0,0,5785,5786,
		5,52,0,0,5786,5787,5,76,0,0,5787,5788,5,118,0,0,5788,5793,3,566,283,0,
		5789,5790,5,1160,0,0,5790,5792,3,566,283,0,5791,5789,1,0,0,0,5792,5795,
		1,0,0,0,5793,5791,1,0,0,0,5793,5794,1,0,0,0,5794,5797,1,0,0,0,5795,5793,
		1,0,0,0,5796,5785,1,0,0,0,5796,5797,1,0,0,0,5797,481,1,0,0,0,5798,5799,
		5,27,0,0,5799,5800,5,174,0,0,5800,5804,3,632,316,0,5801,5803,3,490,245,
		0,5802,5801,1,0,0,0,5803,5806,1,0,0,0,5804,5802,1,0,0,0,5804,5805,1,0,
		0,0,5805,483,1,0,0,0,5806,5804,1,0,0,0,5807,5808,5,360,0,0,5808,5809,5,
		174,0,0,5809,5811,3,632,316,0,5810,5812,7,80,0,0,5811,5810,1,0,0,0,5811,
		5812,1,0,0,0,5812,485,1,0,0,0,5813,5815,5,119,0,0,5814,5816,7,79,0,0,5815,
		5814,1,0,0,0,5815,5816,1,0,0,0,5816,5817,1,0,0,0,5817,5818,7,58,0,0,5818,
		5820,3,632,316,0,5819,5821,3,658,329,0,5820,5819,1,0,0,0,5820,5821,1,0,
		0,0,5821,487,1,0,0,0,5822,5824,5,586,0,0,5823,5825,7,79,0,0,5824,5823,
		1,0,0,0,5824,5825,1,0,0,0,5825,5826,1,0,0,0,5826,5827,5,174,0,0,5827,5829,
		3,632,316,0,5828,5830,5,574,0,0,5829,5828,1,0,0,0,5829,5830,1,0,0,0,5830,
		5832,1,0,0,0,5831,5833,5,426,0,0,5832,5831,1,0,0,0,5832,5833,1,0,0,0,5833,
		5835,1,0,0,0,5834,5836,5,674,0,0,5835,5834,1,0,0,0,5835,5836,1,0,0,0,5836,
		489,1,0,0,0,5837,5838,5,65,0,0,5838,5845,5,672,0,0,5839,5845,5,574,0,0,
		5840,5845,5,429,0,0,5841,5845,5,509,0,0,5842,5845,5,426,0,0,5843,5845,
		5,358,0,0,5844,5837,1,0,0,0,5844,5839,1,0,0,0,5844,5840,1,0,0,0,5844,5841,
		1,0,0,0,5844,5842,1,0,0,0,5844,5843,1,0,0,0,5845,491,1,0,0,0,5846,5848,
		5,34,0,0,5847,5849,3,656,328,0,5848,5847,1,0,0,0,5848,5849,1,0,0,0,5849,
		5851,1,0,0,0,5850,5852,5,338,0,0,5851,5850,1,0,0,0,5851,5852,1,0,0,0,5852,
		5853,1,0,0,0,5853,5855,5,441,0,0,5854,5856,3,654,327,0,5855,5854,1,0,0,
		0,5855,5856,1,0,0,0,5856,5857,1,0,0,0,5857,5858,3,596,298,0,5858,5859,
		5,600,0,0,5859,5860,7,81,0,0,5860,5861,5,626,0,0,5861,5862,5,1173,0,0,
		5862,493,1,0,0,0,5863,5864,5,460,0,0,5864,5865,5,559,0,0,5865,5866,3,596,
		298,0,5866,5867,5,626,0,0,5867,5868,5,1173,0,0,5868,495,1,0,0,0,5869,5870,
		5,669,0,0,5870,5871,5,559,0,0,5871,5872,3,596,298,0,5872,497,1,0,0,0,5873,
		5874,5,154,0,0,5874,5875,3,504,252,0,5875,5878,7,82,0,0,5876,5879,3,702,
		351,0,5877,5879,5,118,0,0,5878,5876,1,0,0,0,5878,5877,1,0,0,0,5879,5889,
		1,0,0,0,5880,5881,5,1160,0,0,5881,5882,3,504,252,0,5882,5885,7,82,0,0,
		5883,5886,3,702,351,0,5884,5886,5,118,0,0,5885,5883,1,0,0,0,5885,5884,
		1,0,0,0,5886,5888,1,0,0,0,5887,5880,1,0,0,0,5888,5891,1,0,0,0,5889,5887,
		1,0,0,0,5889,5890,1,0,0,0,5890,5926,1,0,0,0,5891,5889,1,0,0,0,5892,5893,
		5,154,0,0,5893,5896,3,66,33,0,5894,5897,3,578,289,0,5895,5897,5,43,0,0,
		5896,5894,1,0,0,0,5896,5895,1,0,0,0,5897,5926,1,0,0,0,5898,5899,5,154,
		0,0,5899,5906,5,522,0,0,5900,5903,3,578,289,0,5901,5902,5,28,0,0,5902,
		5904,3,580,290,0,5903,5901,1,0,0,0,5903,5904,1,0,0,0,5904,5907,1,0,0,0,
		5905,5907,5,43,0,0,5906,5900,1,0,0,0,5906,5905,1,0,0,0,5907,5926,1,0,0,
		0,5908,5926,3,456,228,0,5909,5926,3,330,165,0,5910,5926,3,328,164,0,5911,
		5912,5,154,0,0,5912,5913,3,560,280,0,5913,5914,7,82,0,0,5914,5922,3,702,
		351,0,5915,5916,5,1160,0,0,5916,5917,3,560,280,0,5917,5918,7,82,0,0,5918,
		5919,3,702,351,0,5919,5921,1,0,0,0,5920,5915,1,0,0,0,5921,5924,1,0,0,0,
		5922,5920,1,0,0,0,5922,5923,1,0,0,0,5923,5926,1,0,0,0,5924,5922,1,0,0,
		0,5925,5873,1,0,0,0,5925,5892,1,0,0,0,5925,5898,1,0,0,0,5925,5908,1,0,
		0,0,5925,5909,1,0,0,0,5925,5910,1,0,0,0,5925,5911,1,0,0,0,5926,499,1,0,
		0,0,5927,5928,5,156,0,0,5928,5929,7,60,0,0,5929,6119,5,481,0,0,5930,5931,
		5,156,0,0,5931,5932,5,349,0,0,5932,5935,5,420,0,0,5933,5934,5,80,0,0,5934,
		5936,5,1173,0,0,5935,5933,1,0,0,0,5935,5936,1,0,0,0,5936,5939,1,0,0,0,
		5937,5938,5,68,0,0,5938,5940,3,602,301,0,5939,5937,1,0,0,0,5939,5940,1,
		0,0,0,5940,5942,1,0,0,0,5941,5943,3,306,153,0,5942,5941,1,0,0,0,5942,5943,
		1,0,0,0,5943,6119,1,0,0,0,5944,5945,5,156,0,0,5945,5947,5,583,0,0,5946,
		5948,5,1173,0,0,5947,5946,1,0,0,0,5947,5948,1,0,0,0,5948,5949,1,0,0,0,
		5949,5952,5,420,0,0,5950,5951,5,80,0,0,5951,5953,5,1173,0,0,5952,5950,
		1,0,0,0,5952,5953,1,0,0,0,5953,5956,1,0,0,0,5954,5955,5,68,0,0,5955,5957,
		3,602,301,0,5956,5954,1,0,0,0,5956,5957,1,0,0,0,5957,5959,1,0,0,0,5958,
		5960,3,306,153,0,5959,5958,1,0,0,0,5959,5960,1,0,0,0,5960,5964,1,0,0,0,
		5961,5962,5,65,0,0,5962,5963,5,359,0,0,5963,5965,5,1173,0,0,5964,5961,
		1,0,0,0,5964,5965,1,0,0,0,5965,6119,1,0,0,0,5966,5967,5,156,0,0,5967,5969,
		3,506,253,0,5968,5970,3,508,254,0,5969,5968,1,0,0,0,5969,5970,1,0,0,0,
		5970,6119,1,0,0,0,5971,5973,5,156,0,0,5972,5974,5,440,0,0,5973,5972,1,
		0,0,0,5973,5974,1,0,0,0,5974,5975,1,0,0,0,5975,5976,7,45,0,0,5976,5977,
		7,83,0,0,5977,5980,3,562,281,0,5978,5979,7,83,0,0,5979,5981,3,596,298,
		0,5980,5978,1,0,0,0,5980,5981,1,0,0,0,5981,5983,1,0,0,0,5982,5984,3,508,
		254,0,5983,5982,1,0,0,0,5983,5984,1,0,0,0,5984,6119,1,0,0,0,5985,5986,
		5,156,0,0,5986,5987,5,34,0,0,5987,5989,7,0,0,0,5988,5990,3,654,327,0,5989,
		5988,1,0,0,0,5989,5990,1,0,0,0,5990,5991,1,0,0,0,5991,6119,3,596,298,0,
		5992,5993,5,156,0,0,5993,5994,5,34,0,0,5994,5995,7,84,0,0,5995,6119,3,
		560,280,0,5996,5997,5,156,0,0,5997,5998,5,34,0,0,5998,6000,5,131,0,0,5999,
		6001,5,17,0,0,6000,5999,1,0,0,0,6000,6001,1,0,0,0,6001,6002,1,0,0,0,6002,
		6119,3,560,280,0,6003,6004,5,156,0,0,6004,6005,5,34,0,0,6005,6006,5,673,
		0,0,6006,6119,3,574,287,0,6007,6008,5,156,0,0,6008,6009,5,413,0,0,6009,
		6010,3,582,291,0,6010,6011,7,85,0,0,6011,6119,1,0,0,0,6012,6013,5,156,
		0,0,6013,6014,5,802,0,0,6014,6119,5,641,0,0,6015,6016,5,156,0,0,6016,6119,
		3,510,255,0,6017,6018,5,156,0,0,6018,6020,7,86,0,0,6019,6021,3,306,153,
		0,6020,6019,1,0,0,0,6020,6021,1,0,0,0,6021,6119,1,0,0,0,6022,6023,5,156,
		0,0,6023,6024,5,293,0,0,6024,6025,5,1158,0,0,6025,6026,5,1142,0,0,6026,
		6027,5,1159,0,0,6027,6119,7,86,0,0,6028,6029,5,156,0,0,6029,6032,3,512,
		256,0,6030,6031,7,83,0,0,6031,6033,3,596,298,0,6032,6030,1,0,0,0,6032,
		6033,1,0,0,0,6033,6035,1,0,0,0,6034,6036,3,508,254,0,6035,6034,1,0,0,0,
		6035,6036,1,0,0,0,6036,6119,1,0,0,0,6037,6038,5,156,0,0,6038,6039,7,87,
		0,0,6039,6040,5,368,0,0,6040,6119,3,560,280,0,6041,6042,5,156,0,0,6042,
		6045,5,444,0,0,6043,6044,5,65,0,0,6044,6046,3,574,287,0,6045,6043,1,0,
		0,0,6045,6046,1,0,0,0,6046,6119,1,0,0,0,6047,6048,5,156,0,0,6048,6049,
		7,88,0,0,6049,6050,7,83,0,0,6050,6053,3,562,281,0,6051,6052,7,83,0,0,6052,
		6054,3,596,298,0,6053,6051,1,0,0,0,6053,6054,1,0,0,0,6054,6057,1,0,0,0,
		6055,6056,5,193,0,0,6056,6058,3,702,351,0,6057,6055,1,0,0,0,6057,6058,
		1,0,0,0,6058,6119,1,0,0,0,6059,6060,5,156,0,0,6060,6061,5,544,0,0,6061,
		6064,5,753,0,0,6062,6063,7,83,0,0,6063,6065,3,560,280,0,6064,6062,1,0,
		0,0,6064,6065,1,0,0,0,6065,6067,1,0,0,0,6066,6068,3,508,254,0,6067,6066,
		1,0,0,0,6067,6068,1,0,0,0,6068,6119,1,0,0,0,6069,6070,5,156,0,0,6070,6079,
		5,569,0,0,6071,6076,3,514,257,0,6072,6073,5,1160,0,0,6073,6075,3,514,257,
		0,6074,6072,1,0,0,0,6075,6078,1,0,0,0,6076,6074,1,0,0,0,6076,6077,1,0,
		0,0,6077,6080,1,0,0,0,6078,6076,1,0,0,0,6079,6071,1,0,0,0,6079,6080,1,
		0,0,0,6080,6084,1,0,0,0,6081,6082,5,65,0,0,6082,6083,5,572,0,0,6083,6085,
		3,602,301,0,6084,6081,1,0,0,0,6084,6085,1,0,0,0,6085,6087,1,0,0,0,6086,
		6088,3,306,153,0,6087,6086,1,0,0,0,6087,6088,1,0,0,0,6088,6119,1,0,0,0,
		6089,6090,5,156,0,0,6090,6092,7,89,0,0,6091,6093,5,1173,0,0,6092,6091,
		1,0,0,0,6092,6093,1,0,0,0,6093,6094,1,0,0,0,6094,6098,5,641,0,0,6095,6096,
		5,65,0,0,6096,6097,5,359,0,0,6097,6099,5,1173,0,0,6098,6095,1,0,0,0,6098,
		6099,1,0,0,0,6099,6119,1,0,0,0,6100,6101,5,156,0,0,6101,6119,7,90,0,0,
		6102,6103,5,156,0,0,6103,6105,5,62,0,0,6104,6106,3,542,271,0,6105,6104,
		1,0,0,0,6105,6106,1,0,0,0,6106,6107,1,0,0,0,6107,6108,5,65,0,0,6108,6119,
		3,602,301,0,6109,6110,5,156,0,0,6110,6112,5,131,0,0,6111,6113,5,17,0,0,
		6112,6111,1,0,0,0,6112,6113,1,0,0,0,6113,6114,1,0,0,0,6114,6116,5,641,
		0,0,6115,6117,3,508,254,0,6116,6115,1,0,0,0,6116,6117,1,0,0,0,6117,6119,
		1,0,0,0,6118,5927,1,0,0,0,6118,5930,1,0,0,0,6118,5944,1,0,0,0,6118,5966,
		1,0,0,0,6118,5971,1,0,0,0,6118,5985,1,0,0,0,6118,5992,1,0,0,0,6118,5996,
		1,0,0,0,6118,6003,1,0,0,0,6118,6007,1,0,0,0,6118,6012,1,0,0,0,6118,6015,
		1,0,0,0,6118,6017,1,0,0,0,6118,6022,1,0,0,0,6118,6028,1,0,0,0,6118,6037,
		1,0,0,0,6118,6041,1,0,0,0,6118,6047,1,0,0,0,6118,6059,1,0,0,0,6118,6069,
		1,0,0,0,6118,6089,1,0,0,0,6118,6100,1,0,0,0,6118,6102,1,0,0,0,6118,6109,
		1,0,0,0,6119,501,1,0,0,0,6120,6122,5,62,0,0,6121,6123,3,542,271,0,6122,
		6121,1,0,0,0,6122,6123,1,0,0,0,6123,6124,1,0,0,0,6124,6125,5,65,0,0,6125,
		6126,5,380,0,0,6126,6127,3,602,301,0,6127,503,1,0,0,0,6128,6139,5,1184,
		0,0,6129,6139,5,1185,0,0,6130,6131,5,1162,0,0,6131,6133,5,1162,0,0,6132,
		6130,1,0,0,0,6132,6133,1,0,0,0,6133,6134,1,0,0,0,6134,6136,7,91,0,0,6135,
		6132,1,0,0,0,6135,6136,1,0,0,0,6136,6137,1,0,0,0,6137,6139,3,596,298,0,
		6138,6128,1,0,0,0,6138,6129,1,0,0,0,6138,6135,1,0,0,0,6139,505,1,0,0,0,
		6140,6141,5,26,0,0,6141,6154,5,154,0,0,6142,6154,5,855,0,0,6143,6154,5,
		41,0,0,6144,6154,5,152,0,0,6145,6146,5,441,0,0,6146,6154,5,641,0,0,6147,
		6148,5,132,0,0,6148,6154,5,641,0,0,6149,6151,7,59,0,0,6150,6149,1,0,0,
		0,6150,6151,1,0,0,0,6151,6152,1,0,0,0,6152,6154,7,92,0,0,6153,6140,1,0,
		0,0,6153,6142,1,0,0,0,6153,6143,1,0,0,0,6153,6144,1,0,0,0,6153,6145,1,
		0,0,0,6153,6147,1,0,0,0,6153,6150,1,0,0,0,6154,507,1,0,0,0,6155,6156,5,
		98,0,0,6156,6160,5,1173,0,0,6157,6158,5,193,0,0,6158,6160,3,702,351,0,
		6159,6155,1,0,0,0,6159,6157,1,0,0,0,6160,509,1,0,0,0,6161,6163,5,643,0,
		0,6162,6161,1,0,0,0,6162,6163,1,0,0,0,6163,6164,1,0,0,0,6164,6195,5,414,
		0,0,6165,6166,7,93,0,0,6166,6195,5,641,0,0,6167,6173,5,561,0,0,6168,6171,
		5,626,0,0,6169,6172,5,1173,0,0,6170,6172,3,508,254,0,6171,6169,1,0,0,0,
		6171,6170,1,0,0,0,6172,6174,1,0,0,0,6173,6168,1,0,0,0,6173,6174,1,0,0,
		0,6174,6195,1,0,0,0,6175,6195,5,736,0,0,6176,6178,5,440,0,0,6177,6176,
		1,0,0,0,6177,6178,1,0,0,0,6178,6179,1,0,0,0,6179,6195,5,568,0,0,6180,6195,
		5,570,0,0,6181,6195,5,479,0,0,6182,6183,7,89,0,0,6183,6195,5,451,0,0,6184,
		6195,5,342,0,0,6185,6195,5,387,0,0,6186,6195,5,573,0,0,6187,6188,5,6,0,
		0,6188,6189,7,94,0,0,6189,6195,5,641,0,0,6190,6195,5,688,0,0,6191,6195,
		5,689,0,0,6192,6193,5,174,0,0,6193,6195,5,664,0,0,6194,6162,1,0,0,0,6194,
		6165,1,0,0,0,6194,6167,1,0,0,0,6194,6175,1,0,0,0,6194,6177,1,0,0,0,6194,
		6180,1,0,0,0,6194,6181,1,0,0,0,6194,6182,1,0,0,0,6194,6184,1,0,0,0,6194,
		6185,1,0,0,0,6194,6186,1,0,0,0,6194,6187,1,0,0,0,6194,6190,1,0,0,0,6194,
		6191,1,0,0,0,6194,6192,1,0,0,0,6195,511,1,0,0,0,6196,6205,5,420,0,0,6197,
		6198,5,174,0,0,6198,6205,5,641,0,0,6199,6201,5,440,0,0,6200,6199,1,0,0,
		0,6200,6201,1,0,0,0,6201,6202,1,0,0,0,6202,6205,5,753,0,0,6203,6205,5,
		662,0,0,6204,6196,1,0,0,0,6204,6197,1,0,0,0,6204,6200,1,0,0,0,6204,6203,
		1,0,0,0,6205,513,1,0,0,0,6206,6219,5,6,0,0,6207,6208,5,351,0,0,6208,6219,
		5,465,0,0,6209,6210,5,386,0,0,6210,6219,5,652,0,0,6211,6219,5,389,0,0,
		6212,6219,5,467,0,0,6213,6219,5,803,0,0,6214,6215,5,549,0,0,6215,6219,
		5,430,0,0,6216,6219,5,628,0,0,6217,6219,5,651,0,0,6218,6206,1,0,0,0,6218,
		6207,1,0,0,0,6218,6209,1,0,0,0,6218,6211,1,0,0,0,6218,6212,1,0,0,0,6218,
		6213,1,0,0,0,6218,6214,1,0,0,0,6218,6216,1,0,0,0,6218,6217,1,0,0,0,6219,
		515,1,0,0,0,6220,6221,5,349,0,0,6221,6222,5,1173,0,0,6222,517,1,0,0,0,
		6223,6224,5,355,0,0,6224,6225,5,81,0,0,6225,6230,3,530,265,0,6226,6227,
		5,1160,0,0,6227,6229,3,530,265,0,6228,6226,1,0,0,0,6229,6232,1,0,0,0,6230,
		6228,1,0,0,0,6230,6231,1,0,0,0,6231,6240,1,0,0,0,6232,6230,1,0,0,0,6233,
		6234,5,129,0,0,6234,6237,5,1158,0,0,6235,6238,3,630,315,0,6236,6238,5,
		6,0,0,6237,6235,1,0,0,0,6237,6236,1,0,0,0,6238,6239,1,0,0,0,6239,6241,
		5,1159,0,0,6240,6233,1,0,0,0,6240,6241,1,0,0,0,6241,6242,1,0,0,0,6242,
		6243,5,80,0,0,6243,6244,3,596,298,0,6244,519,1,0,0,0,6245,6247,5,436,0,
		0,6246,6248,7,79,0,0,6247,6246,1,0,0,0,6247,6248,1,0,0,0,6248,6249,1,0,
		0,0,6249,6254,3,532,266,0,6250,6251,5,1160,0,0,6251,6253,3,532,266,0,6252,
		6250,1,0,0,0,6253,6256,1,0,0,0,6254,6252,1,0,0,0,6254,6255,1,0,0,0,6255,
		6260,1,0,0,0,6256,6254,1,0,0,0,6257,6258,5,436,0,0,6258,6260,7,90,0,0,
		6259,6245,1,0,0,0,6259,6257,1,0,0,0,6260,521,1,0,0,0,6261,6263,5,93,0,
		0,6262,6264,7,95,0,0,6263,6262,1,0,0,0,6263,6264,1,0,0,0,6264,6265,1,0,
		0,0,6265,6266,3,702,351,0,6266,523,1,0,0,0,6267,6268,5,102,0,0,6268,6269,
		5,81,0,0,6269,6270,5,87,0,0,6270,6271,5,355,0,0,6271,6276,3,536,268,0,
		6272,6273,5,1160,0,0,6273,6275,3,536,268,0,6274,6272,1,0,0,0,6275,6278,
		1,0,0,0,6276,6274,1,0,0,0,6276,6277,1,0,0,0,6277,525,1,0,0,0,6278,6276,
		1,0,0,0,6279,6280,5,595,0,0,6280,6281,5,572,0,0,6281,6282,5,355,0,0,6282,
		527,1,0,0,0,6283,6284,5,750,0,0,6284,529,1,0,0,0,6285,6293,3,562,281,0,
		6286,6288,7,23,0,0,6287,6286,1,0,0,0,6287,6288,1,0,0,0,6288,6289,1,0,0,
		0,6289,6290,5,1158,0,0,6290,6291,3,630,315,0,6291,6292,5,1159,0,0,6292,
		6294,1,0,0,0,6293,6287,1,0,0,0,6293,6294,1,0,0,0,6294,531,1,0,0,0,6295,
		6314,5,398,0,0,6296,6314,5,451,0,0,6297,6299,7,96,0,0,6298,6297,1,0,0,
		0,6298,6299,1,0,0,0,6299,6300,1,0,0,0,6300,6314,5,481,0,0,6301,6314,5,
		545,0,0,6302,6314,5,736,0,0,6303,6304,5,572,0,0,6304,6314,5,355,0,0,6305,
		6314,5,641,0,0,6306,6314,5,675,0,0,6307,6311,5,753,0,0,6308,6309,5,195,
		0,0,6309,6310,5,135,0,0,6310,6312,5,103,0,0,6311,6308,1,0,0,0,6311,6312,
		1,0,0,0,6312,6314,1,0,0,0,6313,6295,1,0,0,0,6313,6296,1,0,0,0,6313,6298,
		1,0,0,0,6313,6301,1,0,0,0,6313,6302,1,0,0,0,6313,6303,1,0,0,0,6313,6305,
		1,0,0,0,6313,6306,1,0,0,0,6313,6307,1,0,0,0,6314,6328,1,0,0,0,6315,6316,
		5,580,0,0,6316,6318,5,481,0,0,6317,6319,3,368,184,0,6318,6317,1,0,0,0,
		6318,6319,1,0,0,0,6319,6328,1,0,0,0,6320,6322,7,58,0,0,6321,6323,3,632,
		316,0,6322,6321,1,0,0,0,6322,6323,1,0,0,0,6323,6325,1,0,0,0,6324,6326,
		3,534,267,0,6325,6324,1,0,0,0,6325,6326,1,0,0,0,6326,6328,1,0,0,0,6327,
		6313,1,0,0,0,6327,6315,1,0,0,0,6327,6320,1,0,0,0,6328,533,1,0,0,0,6329,
		6330,5,195,0,0,6330,6331,5,135,0,0,6331,6335,5,103,0,0,6332,6333,5,65,
		0,0,6333,6335,5,425,0,0,6334,6329,1,0,0,0,6334,6332,1,0,0,0,6335,535,1,
		0,0,0,6336,6344,3,562,281,0,6337,6338,5,129,0,0,6338,6341,5,1158,0,0,6339,
		6342,3,630,315,0,6340,6342,5,6,0,0,6341,6339,1,0,0,0,6341,6340,1,0,0,0,
		6342,6343,1,0,0,0,6343,6345,5,1159,0,0,6344,6337,1,0,0,0,6344,6345,1,0,
		0,0,6345,6353,1,0,0,0,6346,6348,7,23,0,0,6347,6346,1,0,0,0,6347,6348,1,
		0,0,0,6348,6349,1,0,0,0,6349,6350,5,1158,0,0,6350,6351,3,630,315,0,6351,
		6352,5,1159,0,0,6352,6354,1,0,0,0,6353,6347,1,0,0,0,6353,6354,1,0,0,0,
		6354,6357,1,0,0,0,6355,6356,5,78,0,0,6356,6358,5,474,0,0,6357,6355,1,0,
		0,0,6357,6358,1,0,0,0,6358,537,1,0,0,0,6359,6360,7,97,0,0,6360,6363,3,
		562,281,0,6361,6364,3,596,298,0,6362,6364,5,1173,0,0,6363,6361,1,0,0,0,
		6363,6362,1,0,0,0,6363,6364,1,0,0,0,6364,539,1,0,0,0,6365,6369,7,97,0,
		0,6366,6367,7,98,0,0,6367,6368,5,1149,0,0,6368,6370,7,99,0,0,6369,6366,
		1,0,0,0,6369,6370,1,0,0,0,6370,6371,1,0,0,0,6371,6372,3,558,279,0,6372,
		541,1,0,0,0,6373,6374,5,896,0,0,6374,6375,5,1149,0,0,6375,6376,5,470,0,
		0,6376,543,1,0,0,0,6377,6378,5,448,0,0,6378,6379,5,1173,0,0,6379,545,1,
		0,0,0,6380,6381,5,188,0,0,6381,6382,3,596,298,0,6382,547,1,0,0,0,6383,
		6391,5,157,0,0,6384,6386,5,162,0,0,6385,6387,5,677,0,0,6386,6385,1,0,0,
		0,6386,6387,1,0,0,0,6387,6388,1,0,0,0,6388,6392,3,606,303,0,6389,6392,
		5,1181,0,0,6390,6392,5,1182,0,0,6391,6384,1,0,0,0,6391,6389,1,0,0,0,6391,
		6390,1,0,0,0,6392,6402,1,0,0,0,6393,6394,5,154,0,0,6394,6399,3,552,276,
		0,6395,6396,5,1160,0,0,6396,6398,3,552,276,0,6397,6395,1,0,0,0,6398,6401,
		1,0,0,0,6399,6397,1,0,0,0,6399,6400,1,0,0,0,6400,6403,1,0,0,0,6401,6399,
		1,0,0,0,6402,6393,1,0,0,0,6402,6403,1,0,0,0,6403,549,1,0,0,0,6404,6412,
		5,144,0,0,6405,6407,5,162,0,0,6406,6408,5,677,0,0,6407,6406,1,0,0,0,6407,
		6408,1,0,0,0,6408,6409,1,0,0,0,6409,6413,3,606,303,0,6410,6413,5,1181,
		0,0,6411,6413,5,1182,0,0,6412,6405,1,0,0,0,6412,6410,1,0,0,0,6412,6411,
		1,0,0,0,6412,6413,1,0,0,0,6413,6423,1,0,0,0,6414,6415,5,154,0,0,6415,6420,
		3,552,276,0,6416,6417,5,1160,0,0,6417,6419,3,552,276,0,6418,6416,1,0,0,
		0,6419,6422,1,0,0,0,6420,6418,1,0,0,0,6420,6421,1,0,0,0,6421,6424,1,0,
		0,0,6422,6420,1,0,0,0,6423,6414,1,0,0,0,6423,6424,1,0,0,0,6424,551,1,0,
		0,0,6425,6426,7,100,0,0,6426,6431,5,1149,0,0,6427,6432,3,606,303,0,6428,
		6432,5,1174,0,0,6429,6432,3,576,288,0,6430,6432,3,598,299,0,6431,6427,
		1,0,0,0,6431,6428,1,0,0,0,6431,6429,1,0,0,0,6431,6430,1,0,0,0,6432,553,
		1,0,0,0,6433,6435,5,71,0,0,6434,6436,7,101,0,0,6435,6434,1,0,0,0,6435,
		6436,1,0,0,0,6436,6437,1,0,0,0,6437,6469,5,49,0,0,6438,6439,3,504,252,
		0,6439,6440,5,1149,0,0,6440,6448,7,102,0,0,6441,6442,5,1160,0,0,6442,6443,
		3,504,252,0,6443,6444,5,1149,0,0,6444,6445,7,102,0,0,6445,6447,1,0,0,0,
		6446,6441,1,0,0,0,6447,6450,1,0,0,0,6448,6446,1,0,0,0,6448,6449,1,0,0,
		0,6449,6470,1,0,0,0,6450,6448,1,0,0,0,6451,6454,5,30,0,0,6452,6455,3,602,
		301,0,6453,6455,3,504,252,0,6454,6452,1,0,0,0,6454,6453,1,0,0,0,6455,6456,
		1,0,0,0,6456,6457,3,504,252,0,6457,6458,5,1149,0,0,6458,6466,3,556,278,
		0,6459,6460,5,1160,0,0,6460,6461,3,504,252,0,6461,6462,5,1149,0,0,6462,
		6463,3,556,278,0,6463,6465,1,0,0,0,6464,6459,1,0,0,0,6465,6468,1,0,0,0,
		6466,6464,1,0,0,0,6466,6467,1,0,0,0,6467,6470,1,0,0,0,6468,6466,1,0,0,
		0,6469,6438,1,0,0,0,6469,6451,1,0,0,0,6470,555,1,0,0,0,6471,6472,7,103,
		0,0,6472,557,1,0,0,0,6473,6479,3,214,107,0,6474,6479,3,200,100,0,6475,
		6479,3,206,103,0,6476,6479,3,212,106,0,6477,6479,3,216,108,0,6478,6473,
		1,0,0,0,6478,6474,1,0,0,0,6478,6475,1,0,0,0,6478,6476,1,0,0,0,6478,6477,
		1,0,0,0,6479,6484,1,0,0,0,6480,6481,5,65,0,0,6481,6482,5,380,0,0,6482,
		6484,3,596,298,0,6483,6478,1,0,0,0,6483,6480,1,0,0,0,6484,559,1,0,0,0,
		6485,6489,3,596,298,0,6486,6490,5,1180,0,0,6487,6488,5,1157,0,0,6488,6490,
		3,596,298,0,6489,6486,1,0,0,0,6489,6487,1,0,0,0,6489,6490,1,0,0,0,6490,
		561,1,0,0,0,6491,6492,3,560,280,0,6492,563,1,0,0,0,6493,6496,3,574,287,
		0,6494,6496,3,596,298,0,6495,6493,1,0,0,0,6495,6494,1,0,0,0,6496,565,1,
		0,0,0,6497,6502,3,596,298,0,6498,6500,3,600,300,0,6499,6501,3,600,300,
		0,6500,6499,1,0,0,0,6500,6501,1,0,0,0,6501,6503,1,0,0,0,6502,6498,1,0,
		0,0,6502,6503,1,0,0,0,6503,6510,1,0,0,0,6504,6505,9,0,0,0,6505,6507,3,
		600,300,0,6506,6508,3,600,300,0,6507,6506,1,0,0,0,6507,6508,1,0,0,0,6508,
		6510,1,0,0,0,6509,6497,1,0,0,0,6509,6504,1,0,0,0,6510,567,1,0,0,0,6511,
		6514,3,596,298,0,6512,6514,5,1173,0,0,6513,6511,1,0,0,0,6513,6512,1,0,
		0,0,6514,6519,1,0,0,0,6515,6516,5,1158,0,0,6516,6517,3,602,301,0,6517,
		6518,5,1159,0,0,6518,6520,1,0,0,0,6519,6515,1,0,0,0,6519,6520,1,0,0,0,
		6520,6523,1,0,0,0,6521,6523,3,702,351,0,6522,6513,1,0,0,0,6522,6521,1,
		0,0,0,6523,6525,1,0,0,0,6524,6526,7,52,0,0,6525,6524,1,0,0,0,6525,6526,
		1,0,0,0,6526,569,1,0,0,0,6527,6532,5,1173,0,0,6528,6532,5,1181,0,0,6529,
		6532,5,711,0,0,6530,6532,3,730,365,0,6531,6527,1,0,0,0,6531,6528,1,0,0,
		0,6531,6529,1,0,0,0,6531,6530,1,0,0,0,6532,571,1,0,0,0,6533,6534,7,104,
		0,0,6534,573,1,0,0,0,6535,6541,3,570,285,0,6536,6537,3,570,285,0,6537,
		6538,3,572,286,0,6538,6541,1,0,0,0,6539,6541,3,68,34,0,6540,6535,1,0,0,
		0,6540,6536,1,0,0,0,6540,6539,1,0,0,0,6541,575,1,0,0,0,6542,6543,7,105,
		0,0,6543,577,1,0,0,0,6544,6549,5,229,0,0,6545,6549,3,720,360,0,6546,6549,
		5,1173,0,0,6547,6549,5,1170,0,0,6548,6544,1,0,0,0,6548,6545,1,0,0,0,6548,
		6546,1,0,0,0,6548,6547,1,0,0,0,6549,579,1,0,0,0,6550,6553,3,596,298,0,
		6551,6553,5,1173,0,0,6552,6550,1,0,0,0,6552,6551,1,0,0,0,6553,581,1,0,
		0,0,6554,6558,3,584,292,0,6555,6558,5,1181,0,0,6556,6558,5,1173,0,0,6557,
		6554,1,0,0,0,6557,6555,1,0,0,0,6557,6556,1,0,0,0,6558,583,1,0,0,0,6559,
		6560,7,106,0,0,6560,585,1,0,0,0,6561,6562,7,107,0,0,6562,587,1,0,0,0,6563,
		6564,3,602,301,0,6564,6565,5,1146,0,0,6565,6566,3,602,301,0,6566,6567,
		5,1146,0,0,6567,6568,3,602,301,0,6568,6569,5,1146,0,0,6569,6570,3,602,
		301,0,6570,6571,5,1146,0,0,6571,6577,3,602,301,0,6572,6573,5,1169,0,0,
		6573,6574,3,602,301,0,6574,6575,5,1146,0,0,6575,6576,3,602,301,0,6576,
		6578,1,0,0,0,6577,6572,1,0,0,0,6578,6579,1,0,0,0,6579,6577,1,0,0,0,6579,
		6580,1,0,0,0,6580,589,1,0,0,0,6581,6588,3,592,296,0,6582,6583,5,1160,0,
		0,6583,6586,3,592,296,0,6584,6585,5,1160,0,0,6585,6587,3,602,301,0,6586,
		6584,1,0,0,0,6586,6587,1,0,0,0,6587,6589,1,0,0,0,6588,6582,1,0,0,0,6588,
		6589,1,0,0,0,6589,591,1,0,0,0,6590,6598,5,1173,0,0,6591,6598,5,1178,0,
		0,6592,6594,5,1175,0,0,6593,6592,1,0,0,0,6594,6595,1,0,0,0,6595,6593,1,
		0,0,0,6595,6596,1,0,0,0,6596,6598,1,0,0,0,6597,6590,1,0,0,0,6597,6591,
		1,0,0,0,6597,6593,1,0,0,0,6598,593,1,0,0,0,6599,6602,3,596,298,0,6600,
		6602,5,1173,0,0,6601,6599,1,0,0,0,6601,6600,1,0,0,0,6602,595,1,0,0,0,6603,
		6607,3,598,299,0,6604,6607,5,1170,0,0,6605,6607,5,1173,0,0,6606,6603,1,
		0,0,0,6606,6604,1,0,0,0,6606,6605,1,0,0,0,6607,597,1,0,0,0,6608,6618,5,
		1181,0,0,6609,6618,3,720,360,0,6610,6618,3,722,361,0,6611,6618,3,584,292,
		0,6612,6618,3,724,362,0,6613,6618,3,726,363,0,6614,6618,3,728,364,0,6615,
		6618,3,730,365,0,6616,6618,3,694,347,0,6617,6608,1,0,0,0,6617,6609,1,0,
		0,0,6617,6610,1,0,0,0,6617,6611,1,0,0,0,6617,6612,1,0,0,0,6617,6613,1,
		0,0,0,6617,6614,1,0,0,0,6617,6615,1,0,0,0,6617,6616,1,0,0,0,6618,599,1,
		0,0,0,6619,6623,5,1180,0,0,6620,6621,5,1157,0,0,6621,6623,3,596,298,0,
		6622,6619,1,0,0,0,6622,6620,1,0,0,0,6623,601,1,0,0,0,6624,6625,7,108,0,
		0,6625,603,1,0,0,0,6626,6629,5,1171,0,0,6627,6629,3,602,301,0,6628,6626,
		1,0,0,0,6628,6627,1,0,0,0,6629,605,1,0,0,0,6630,6632,5,1179,0,0,6631,6630,
		1,0,0,0,6631,6632,1,0,0,0,6632,6633,1,0,0,0,6633,6636,5,1173,0,0,6634,
		6636,5,1172,0,0,6635,6631,1,0,0,0,6635,6634,1,0,0,0,6636,6638,1,0,0,0,
		6637,6639,5,1173,0,0,6638,6637,1,0,0,0,6639,6640,1,0,0,0,6640,6638,1,0,
		0,0,6640,6641,1,0,0,0,6641,6654,1,0,0,0,6642,6644,5,1179,0,0,6643,6642,
		1,0,0,0,6643,6644,1,0,0,0,6644,6645,1,0,0,0,6645,6648,5,1173,0,0,6646,
		6648,5,1172,0,0,6647,6643,1,0,0,0,6647,6646,1,0,0,0,6648,6651,1,0,0,0,
		6649,6650,5,28,0,0,6650,6652,3,580,290,0,6651,6649,1,0,0,0,6651,6652,1,
		0,0,0,6652,6654,1,0,0,0,6653,6635,1,0,0,0,6653,6647,1,0,0,0,6654,607,1,
		0,0,0,6655,6656,7,109,0,0,6656,609,1,0,0,0,6657,6659,5,1179,0,0,6658,6657,
		1,0,0,0,6658,6659,1,0,0,0,6659,6660,1,0,0,0,6660,6661,5,1175,0,0,6661,
		611,1,0,0,0,6662,6664,5,114,0,0,6663,6662,1,0,0,0,6663,6664,1,0,0,0,6664,
		6665,1,0,0,0,6665,6666,7,110,0,0,6666,613,1,0,0,0,6667,6680,3,606,303,
		0,6668,6680,3,602,301,0,6669,6670,5,1146,0,0,6670,6680,3,602,301,0,6671,
		6680,3,610,305,0,6672,6680,3,608,304,0,6673,6680,5,1176,0,0,6674,6680,
		5,1178,0,0,6675,6677,5,114,0,0,6676,6675,1,0,0,0,6676,6677,1,0,0,0,6677,
		6678,1,0,0,0,6678,6680,7,110,0,0,6679,6667,1,0,0,0,6679,6668,1,0,0,0,6679,
		6669,1,0,0,0,6679,6671,1,0,0,0,6679,6672,1,0,0,0,6679,6673,1,0,0,0,6679,
		6674,1,0,0,0,6679,6676,1,0,0,0,6680,615,1,0,0,0,6681,6683,7,111,0,0,6682,
		6684,5,241,0,0,6683,6682,1,0,0,0,6683,6684,1,0,0,0,6684,6686,1,0,0,0,6685,
		6687,3,624,312,0,6686,6685,1,0,0,0,6686,6687,1,0,0,0,6687,6689,1,0,0,0,
		6688,6690,5,229,0,0,6689,6688,1,0,0,0,6689,6690,1,0,0,0,6690,6694,1,0,
		0,0,6691,6692,3,66,33,0,6692,6693,3,578,289,0,6693,6695,1,0,0,0,6694,6691,
		1,0,0,0,6694,6695,1,0,0,0,6695,6699,1,0,0,0,6696,6697,5,28,0,0,6697,6700,
		3,580,290,0,6698,6700,5,229,0,0,6699,6696,1,0,0,0,6699,6698,1,0,0,0,6699,
		6700,1,0,0,0,6700,6805,1,0,0,0,6701,6702,5,228,0,0,6702,6704,7,112,0,0,
		6703,6705,3,624,312,0,6704,6703,1,0,0,0,6704,6705,1,0,0,0,6705,6707,1,
		0,0,0,6706,6708,5,229,0,0,6707,6706,1,0,0,0,6707,6708,1,0,0,0,6708,6805,
		1,0,0,0,6709,6710,5,523,0,0,6710,6712,5,226,0,0,6711,6713,3,624,312,0,
		6712,6711,1,0,0,0,6712,6713,1,0,0,0,6713,6715,1,0,0,0,6714,6716,5,229,
		0,0,6715,6714,1,0,0,0,6715,6716,1,0,0,0,6716,6805,1,0,0,0,6717,6718,5,
		228,0,0,6718,6719,7,113,0,0,6719,6721,5,241,0,0,6720,6722,3,624,312,0,
		6721,6720,1,0,0,0,6721,6722,1,0,0,0,6722,6724,1,0,0,0,6723,6725,5,229,
		0,0,6724,6723,1,0,0,0,6724,6725,1,0,0,0,6725,6805,1,0,0,0,6726,6728,7,
		114,0,0,6727,6729,3,624,312,0,6728,6727,1,0,0,0,6728,6729,1,0,0,0,6729,
		6733,1,0,0,0,6730,6732,7,115,0,0,6731,6730,1,0,0,0,6732,6735,1,0,0,0,6733,
		6731,1,0,0,0,6733,6734,1,0,0,0,6734,6805,1,0,0,0,6735,6733,1,0,0,0,6736,
		6738,5,211,0,0,6737,6739,3,626,313,0,6738,6737,1,0,0,0,6738,6739,1,0,0,
		0,6739,6743,1,0,0,0,6740,6742,7,115,0,0,6741,6740,1,0,0,0,6742,6745,1,
		0,0,0,6743,6741,1,0,0,0,6743,6744,1,0,0,0,6744,6805,1,0,0,0,6745,6743,
		1,0,0,0,6746,6748,5,212,0,0,6747,6749,5,213,0,0,6748,6747,1,0,0,0,6748,
		6749,1,0,0,0,6749,6751,1,0,0,0,6750,6752,3,626,313,0,6751,6750,1,0,0,0,
		6751,6752,1,0,0,0,6752,6756,1,0,0,0,6753,6755,7,115,0,0,6754,6753,1,0,
		0,0,6755,6758,1,0,0,0,6756,6754,1,0,0,0,6756,6757,1,0,0,0,6757,6805,1,
		0,0,0,6758,6756,1,0,0,0,6759,6761,7,116,0,0,6760,6762,3,628,314,0,6761,
		6760,1,0,0,0,6761,6762,1,0,0,0,6762,6766,1,0,0,0,6763,6765,7,115,0,0,6764,
		6763,1,0,0,0,6765,6768,1,0,0,0,6766,6764,1,0,0,0,6766,6767,1,0,0,0,6767,
		6805,1,0,0,0,6768,6766,1,0,0,0,6769,6805,7,117,0,0,6770,6772,7,118,0,0,
		6771,6773,3,624,312,0,6772,6771,1,0,0,0,6772,6773,1,0,0,0,6773,6805,1,
		0,0,0,6774,6775,7,119,0,0,6775,6777,3,618,309,0,6776,6778,5,229,0,0,6777,
		6776,1,0,0,0,6777,6778,1,0,0,0,6778,6782,1,0,0,0,6779,6780,3,66,33,0,6780,
		6781,3,578,289,0,6781,6783,1,0,0,0,6782,6779,1,0,0,0,6782,6783,1,0,0,0,
		6783,6805,1,0,0,0,6784,6805,7,120,0,0,6785,6787,5,234,0,0,6786,6788,5,
		226,0,0,6787,6786,1,0,0,0,6787,6788,1,0,0,0,6788,6790,1,0,0,0,6789,6791,
		5,229,0,0,6790,6789,1,0,0,0,6790,6791,1,0,0,0,6791,6795,1,0,0,0,6792,6793,
		3,66,33,0,6793,6794,3,578,289,0,6794,6796,1,0,0,0,6795,6792,1,0,0,0,6795,
		6796,1,0,0,0,6796,6799,1,0,0,0,6797,6798,5,28,0,0,6798,6800,3,580,290,
		0,6799,6797,1,0,0,0,6799,6800,1,0,0,0,6800,6805,1,0,0,0,6801,6802,5,234,
		0,0,6802,6805,5,230,0,0,6803,6805,5,1105,0,0,6804,6681,1,0,0,0,6804,6701,
		1,0,0,0,6804,6709,1,0,0,0,6804,6717,1,0,0,0,6804,6726,1,0,0,0,6804,6736,
		1,0,0,0,6804,6746,1,0,0,0,6804,6759,1,0,0,0,6804,6769,1,0,0,0,6804,6770,
		1,0,0,0,6804,6774,1,0,0,0,6804,6784,1,0,0,0,6804,6785,1,0,0,0,6804,6801,
		1,0,0,0,6804,6803,1,0,0,0,6805,617,1,0,0,0,6806,6807,5,1158,0,0,6807,6812,
		3,620,310,0,6808,6809,5,1160,0,0,6809,6811,3,620,310,0,6810,6808,1,0,0,
		0,6811,6814,1,0,0,0,6812,6810,1,0,0,0,6812,6813,1,0,0,0,6813,6815,1,0,
		0,0,6814,6812,1,0,0,0,6815,6816,5,1159,0,0,6816,619,1,0,0,0,6817,6818,
		5,1173,0,0,6818,621,1,0,0,0,6819,6821,7,121,0,0,6820,6822,3,624,312,0,
		6821,6820,1,0,0,0,6821,6822,1,0,0,0,6822,6842,1,0,0,0,6823,6825,5,225,
		0,0,6824,6826,3,624,312,0,6825,6824,1,0,0,0,6825,6826,1,0,0,0,6826,6830,
		1,0,0,0,6827,6828,3,66,33,0,6828,6829,3,578,289,0,6829,6831,1,0,0,0,6830,
		6827,1,0,0,0,6830,6831,1,0,0,0,6831,6842,1,0,0,0,6832,6842,7,122,0,0,6833,
		6835,5,217,0,0,6834,6836,3,628,314,0,6835,6834,1,0,0,0,6835,6836,1,0,0,
		0,6836,6842,1,0,0,0,6837,6839,7,123,0,0,6838,6840,5,209,0,0,6839,6838,
		1,0,0,0,6839,6840,1,0,0,0,6840,6842,1,0,0,0,6841,6819,1,0,0,0,6841,6823,
		1,0,0,0,6841,6832,1,0,0,0,6841,6833,1,0,0,0,6841,6837,1,0,0,0,6842,6844,
		1,0,0,0,6843,6845,5,11,0,0,6844,6843,1,0,0,0,6844,6845,1,0,0,0,6845,623,
		1,0,0,0,6846,6847,5,1158,0,0,6847,6848,3,602,301,0,6848,6849,5,1159,0,
		0,6849,625,1,0,0,0,6850,6851,5,1158,0,0,6851,6852,3,602,301,0,6852,6853,
		5,1160,0,0,6853,6854,3,602,301,0,6854,6855,5,1159,0,0,6855,627,1,0,0,0,
		6856,6857,5,1158,0,0,6857,6860,3,602,301,0,6858,6859,5,1160,0,0,6859,6861,
		3,602,301,0,6860,6858,1,0,0,0,6860,6861,1,0,0,0,6861,6862,1,0,0,0,6862,
		6863,5,1159,0,0,6863,629,1,0,0,0,6864,6869,3,596,298,0,6865,6866,5,1160,
		0,0,6866,6868,3,596,298,0,6867,6865,1,0,0,0,6868,6871,1,0,0,0,6869,6867,
		1,0,0,0,6869,6870,1,0,0,0,6870,631,1,0,0,0,6871,6869,1,0,0,0,6872,6877,
		3,562,281,0,6873,6874,5,1160,0,0,6874,6876,3,562,281,0,6875,6873,1,0,0,
		0,6876,6879,1,0,0,0,6877,6875,1,0,0,0,6877,6878,1,0,0,0,6878,633,1,0,0,
		0,6879,6877,1,0,0,0,6880,6881,5,1158,0,0,6881,6886,3,568,284,0,6882,6883,
		5,1160,0,0,6883,6885,3,568,284,0,6884,6882,1,0,0,0,6885,6888,1,0,0,0,6886,
		6884,1,0,0,0,6886,6887,1,0,0,0,6887,6889,1,0,0,0,6888,6886,1,0,0,0,6889,
		6890,5,1159,0,0,6890,635,1,0,0,0,6891,6896,3,702,351,0,6892,6893,5,1160,
		0,0,6893,6895,3,702,351,0,6894,6892,1,0,0,0,6895,6898,1,0,0,0,6896,6894,
		1,0,0,0,6896,6897,1,0,0,0,6897,637,1,0,0,0,6898,6896,1,0,0,0,6899,6904,
		3,650,325,0,6900,6901,5,1160,0,0,6901,6903,3,650,325,0,6902,6900,1,0,0,
		0,6903,6906,1,0,0,0,6904,6902,1,0,0,0,6904,6905,1,0,0,0,6905,639,1,0,0,
		0,6906,6904,1,0,0,0,6907,6912,3,614,307,0,6908,6909,5,1160,0,0,6909,6911,
		3,614,307,0,6910,6908,1,0,0,0,6911,6914,1,0,0,0,6912,6910,1,0,0,0,6912,
		6913,1,0,0,0,6913,641,1,0,0,0,6914,6912,1,0,0,0,6915,6920,5,1173,0,0,6916,
		6917,5,1160,0,0,6917,6919,5,1173,0,0,6918,6916,1,0,0,0,6919,6922,1,0,0,
		0,6920,6918,1,0,0,0,6920,6921,1,0,0,0,6921,643,1,0,0,0,6922,6920,1,0,0,
		0,6923,6928,5,1184,0,0,6924,6925,5,1160,0,0,6925,6927,5,1184,0,0,6926,
		6924,1,0,0,0,6927,6930,1,0,0,0,6928,6926,1,0,0,0,6928,6929,1,0,0,0,6929,
		645,1,0,0,0,6930,6928,1,0,0,0,6931,6967,5,116,0,0,6932,6933,5,24,0,0,6933,
		6934,5,1158,0,0,6934,6935,3,702,351,0,6935,6936,5,12,0,0,6936,6937,3,622,
		311,0,6937,6938,5,1159,0,0,6938,6967,1,0,0,0,6939,6941,3,708,354,0,6940,
		6939,1,0,0,0,6940,6941,1,0,0,0,6941,6942,1,0,0,0,6942,6967,3,614,307,0,
		6943,6947,3,648,324,0,6944,6945,5,118,0,0,6945,6946,5,186,0,0,6946,6948,
		3,648,324,0,6947,6944,1,0,0,0,6947,6948,1,0,0,0,6948,6967,1,0,0,0,6949,
		6950,5,1158,0,0,6950,6951,3,702,351,0,6951,6952,5,1159,0,0,6952,6967,1,
		0,0,0,6953,6954,7,124,0,0,6954,6955,5,1158,0,0,6955,6956,3,560,280,0,6956,
		6957,5,1159,0,0,6957,6967,1,0,0,0,6958,6959,5,1158,0,0,6959,6960,7,125,
		0,0,6960,6961,5,677,0,0,6961,6962,5,65,0,0,6962,6963,3,560,280,0,6963,
		6964,5,1159,0,0,6964,6967,1,0,0,0,6965,6967,3,702,351,0,6966,6931,1,0,
		0,0,6966,6932,1,0,0,0,6966,6940,1,0,0,0,6966,6943,1,0,0,0,6966,6949,1,
		0,0,0,6966,6953,1,0,0,0,6966,6958,1,0,0,0,6966,6965,1,0,0,0,6967,647,1,
		0,0,0,6968,6974,7,126,0,0,6969,6971,5,1158,0,0,6970,6972,3,602,301,0,6971,
		6970,1,0,0,0,6971,6972,1,0,0,0,6972,6973,1,0,0,0,6973,6975,5,1159,0,0,
		6974,6969,1,0,0,0,6974,6975,1,0,0,0,6975,6983,1,0,0,0,6976,6977,5,326,
		0,0,6977,6979,5,1158,0,0,6978,6980,3,602,301,0,6979,6978,1,0,0,0,6979,
		6980,1,0,0,0,6980,6981,1,0,0,0,6981,6983,5,1159,0,0,6982,6968,1,0,0,0,
		6982,6976,1,0,0,0,6983,649,1,0,0,0,6984,6987,3,702,351,0,6985,6987,5,43,
		0,0,6986,6984,1,0,0,0,6986,6985,1,0,0,0,6987,651,1,0,0,0,6988,6989,5,77,
		0,0,6989,6990,5,60,0,0,6990,653,1,0,0,0,6991,6992,5,77,0,0,6992,6993,5,
		114,0,0,6993,6994,5,60,0,0,6994,655,1,0,0,0,6995,6996,5,123,0,0,6996,6997,
		5,142,0,0,6997,657,1,0,0,0,6998,6999,5,682,0,0,6999,7002,3,602,301,0,7000,
		7002,5,532,0,0,7001,6998,1,0,0,0,7001,7000,1,0,0,0,7002,659,1,0,0,0,7003,
		7007,3,658,329,0,7004,7005,5,158,0,0,7005,7007,5,104,0,0,7006,7003,1,0,
		0,0,7006,7004,1,0,0,0,7007,661,1,0,0,0,7008,7027,3,664,332,0,7009,7027,
		3,672,336,0,7010,7027,3,674,337,0,7011,7012,3,694,347,0,7012,7014,5,1158,
		0,0,7013,7015,3,698,349,0,7014,7013,1,0,0,0,7014,7015,1,0,0,0,7015,7016,
		1,0,0,0,7016,7017,5,1159,0,0,7017,7027,1,0,0,0,7018,7019,3,560,280,0,7019,
		7021,5,1158,0,0,7020,7022,3,698,349,0,7021,7020,1,0,0,0,7021,7022,1,0,
		0,0,7022,7023,1,0,0,0,7023,7024,5,1159,0,0,7024,7027,1,0,0,0,7025,7027,
		3,696,348,0,7026,7008,1,0,0,0,7026,7009,1,0,0,0,7026,7010,1,0,0,0,7026,
		7011,1,0,0,0,7026,7018,1,0,0,0,7026,7025,1,0,0,0,7027,663,1,0,0,0,7028,
		7031,7,127,0,0,7029,7030,5,1158,0,0,7030,7032,5,1159,0,0,7031,7029,1,0,
		0,0,7031,7032,1,0,0,0,7032,7207,1,0,0,0,7033,7034,5,33,0,0,7034,7035,5,
		1158,0,0,7035,7036,3,702,351,0,7036,7037,5,1160,0,0,7037,7038,3,622,311,
		0,7038,7039,5,1159,0,0,7039,7207,1,0,0,0,7040,7041,5,33,0,0,7041,7042,
		5,1158,0,0,7042,7043,3,702,351,0,7043,7044,5,189,0,0,7044,7045,3,578,289,
		0,7045,7046,5,1159,0,0,7046,7207,1,0,0,0,7047,7048,5,24,0,0,7048,7049,
		5,1158,0,0,7049,7050,3,702,351,0,7050,7051,5,12,0,0,7051,7052,3,622,311,
		0,7052,7053,5,1159,0,0,7053,7207,1,0,0,0,7054,7055,5,190,0,0,7055,7056,
		5,1158,0,0,7056,7057,3,566,283,0,7057,7058,5,1159,0,0,7058,7207,1,0,0,
		0,7059,7060,5,23,0,0,7060,7062,3,702,351,0,7061,7063,3,666,333,0,7062,
		7061,1,0,0,0,7063,7064,1,0,0,0,7064,7062,1,0,0,0,7064,7065,1,0,0,0,7065,
		7068,1,0,0,0,7066,7067,5,54,0,0,7067,7069,3,700,350,0,7068,7066,1,0,0,
		0,7068,7069,1,0,0,0,7069,7070,1,0,0,0,7070,7071,5,411,0,0,7071,7207,1,
		0,0,0,7072,7074,5,23,0,0,7073,7075,3,666,333,0,7074,7073,1,0,0,0,7075,
		7076,1,0,0,0,7076,7074,1,0,0,0,7076,7077,1,0,0,0,7077,7080,1,0,0,0,7078,
		7079,5,54,0,0,7079,7081,3,700,350,0,7080,7078,1,0,0,0,7080,7081,1,0,0,
		0,7081,7082,1,0,0,0,7082,7083,5,411,0,0,7083,7207,1,0,0,0,7084,7085,5,
		225,0,0,7085,7086,5,1158,0,0,7086,7089,3,698,349,0,7087,7088,5,189,0,0,
		7088,7090,3,578,289,0,7089,7087,1,0,0,0,7089,7090,1,0,0,0,7090,7091,1,
		0,0,0,7091,7092,5,1159,0,0,7092,7207,1,0,0,0,7093,7094,5,327,0,0,7094,
		7097,5,1158,0,0,7095,7098,3,606,303,0,7096,7098,3,702,351,0,7097,7095,
		1,0,0,0,7097,7096,1,0,0,0,7098,7099,1,0,0,0,7099,7102,5,80,0,0,7100,7103,
		3,606,303,0,7101,7103,3,702,351,0,7102,7100,1,0,0,0,7102,7101,1,0,0,0,
		7103,7104,1,0,0,0,7104,7105,5,1159,0,0,7105,7207,1,0,0,0,7106,7107,7,128,
		0,0,7107,7110,5,1158,0,0,7108,7111,3,606,303,0,7109,7111,3,702,351,0,7110,
		7108,1,0,0,0,7110,7109,1,0,0,0,7111,7112,1,0,0,0,7112,7115,5,68,0,0,7113,
		7116,3,602,301,0,7114,7116,3,702,351,0,7115,7113,1,0,0,0,7115,7114,1,0,
		0,0,7116,7122,1,0,0,0,7117,7120,5,65,0,0,7118,7121,3,602,301,0,7119,7121,
		3,702,351,0,7120,7118,1,0,0,0,7120,7119,1,0,0,0,7121,7123,1,0,0,0,7122,
		7117,1,0,0,0,7122,7123,1,0,0,0,7123,7124,1,0,0,0,7124,7125,5,1159,0,0,
		7125,7207,1,0,0,0,7126,7127,5,331,0,0,7127,7128,5,1158,0,0,7128,7131,7,
		129,0,0,7129,7132,3,606,303,0,7130,7132,3,702,351,0,7131,7129,1,0,0,0,
		7131,7130,1,0,0,0,7131,7132,1,0,0,0,7132,7133,1,0,0,0,7133,7136,5,68,0,
		0,7134,7137,3,606,303,0,7135,7137,3,702,351,0,7136,7134,1,0,0,0,7136,7135,
		1,0,0,0,7137,7138,1,0,0,0,7138,7139,5,1159,0,0,7139,7207,1,0,0,0,7140,
		7141,5,331,0,0,7141,7144,5,1158,0,0,7142,7145,3,606,303,0,7143,7145,3,
		702,351,0,7144,7142,1,0,0,0,7144,7143,1,0,0,0,7145,7146,1,0,0,0,7146,7149,
		5,68,0,0,7147,7150,3,606,303,0,7148,7150,3,702,351,0,7149,7147,1,0,0,0,
		7149,7148,1,0,0,0,7150,7151,1,0,0,0,7151,7152,5,1159,0,0,7152,7207,1,0,
		0,0,7153,7154,5,1112,0,0,7154,7157,5,1158,0,0,7155,7158,3,606,303,0,7156,
		7158,3,702,351,0,7157,7155,1,0,0,0,7157,7156,1,0,0,0,7158,7165,1,0,0,0,
		7159,7160,5,12,0,0,7160,7161,7,130,0,0,7161,7162,5,1158,0,0,7162,7163,
		3,602,301,0,7163,7164,5,1159,0,0,7164,7166,1,0,0,0,7165,7159,1,0,0,0,7165,
		7166,1,0,0,0,7166,7168,1,0,0,0,7167,7169,3,668,334,0,7168,7167,1,0,0,0,
		7168,7169,1,0,0,0,7169,7170,1,0,0,0,7170,7171,5,1159,0,0,7171,7207,1,0,
		0,0,7172,7173,5,324,0,0,7173,7174,5,1158,0,0,7174,7175,3,78,39,0,7175,
		7178,5,68,0,0,7176,7179,3,606,303,0,7177,7179,3,702,351,0,7178,7176,1,
		0,0,0,7178,7177,1,0,0,0,7179,7180,1,0,0,0,7180,7181,5,1159,0,0,7181,7207,
		1,0,0,0,7182,7183,5,911,0,0,7183,7184,5,1158,0,0,7184,7185,7,131,0,0,7185,
		7186,5,1160,0,0,7186,7187,3,606,303,0,7187,7188,5,1159,0,0,7188,7207,1,
		0,0,0,7189,7190,5,285,0,0,7190,7191,5,1158,0,0,7191,7192,3,702,351,0,7192,
		7193,5,1160,0,0,7193,7196,3,702,351,0,7194,7195,5,599,0,0,7195,7197,3,
		622,311,0,7196,7194,1,0,0,0,7196,7197,1,0,0,0,7197,7199,1,0,0,0,7198,7200,
		3,280,140,0,7199,7198,1,0,0,0,7199,7200,1,0,0,0,7200,7202,1,0,0,0,7201,
		7203,3,282,141,0,7202,7201,1,0,0,0,7202,7203,1,0,0,0,7203,7204,1,0,0,0,
		7204,7205,5,1159,0,0,7205,7207,1,0,0,0,7206,7028,1,0,0,0,7206,7033,1,0,
		0,0,7206,7040,1,0,0,0,7206,7047,1,0,0,0,7206,7054,1,0,0,0,7206,7059,1,
		0,0,0,7206,7072,1,0,0,0,7206,7084,1,0,0,0,7206,7093,1,0,0,0,7206,7106,
		1,0,0,0,7206,7126,1,0,0,0,7206,7140,1,0,0,0,7206,7153,1,0,0,0,7206,7172,
		1,0,0,0,7206,7182,1,0,0,0,7206,7189,1,0,0,0,7207,665,1,0,0,0,7208,7209,
		5,192,0,0,7209,7210,3,700,350,0,7210,7211,5,176,0,0,7211,7212,3,700,350,
		0,7212,667,1,0,0,0,7213,7214,5,476,0,0,7214,7219,3,670,335,0,7215,7216,
		5,1160,0,0,7216,7218,3,670,335,0,7217,7215,1,0,0,0,7218,7221,1,0,0,0,7219,
		7217,1,0,0,0,7219,7220,1,0,0,0,7220,7228,1,0,0,0,7221,7219,1,0,0,0,7222,
		7223,5,476,0,0,7223,7224,3,602,301,0,7224,7225,5,1146,0,0,7225,7226,3,
		602,301,0,7226,7228,1,0,0,0,7227,7213,1,0,0,0,7227,7222,1,0,0,0,7228,669,
		1,0,0,0,7229,7231,3,602,301,0,7230,7232,7,132,0,0,7231,7230,1,0,0,0,7231,
		7232,1,0,0,0,7232,671,1,0,0,0,7233,7234,7,133,0,0,7234,7236,5,1158,0,0,
		7235,7237,7,48,0,0,7236,7235,1,0,0,0,7236,7237,1,0,0,0,7237,7238,1,0,0,
		0,7238,7239,3,700,350,0,7239,7241,5,1159,0,0,7240,7242,3,676,338,0,7241,
		7240,1,0,0,0,7241,7242,1,0,0,0,7242,7293,1,0,0,0,7243,7244,5,293,0,0,7244,
		7252,5,1158,0,0,7245,7253,5,1142,0,0,7246,7248,5,6,0,0,7247,7246,1,0,0,
		0,7247,7248,1,0,0,0,7248,7249,1,0,0,0,7249,7253,3,700,350,0,7250,7251,
		5,50,0,0,7251,7253,3,698,349,0,7252,7245,1,0,0,0,7252,7247,1,0,0,0,7252,
		7250,1,0,0,0,7253,7254,1,0,0,0,7254,7256,5,1159,0,0,7255,7257,3,676,338,
		0,7256,7255,1,0,0,0,7256,7257,1,0,0,0,7257,7293,1,0,0,0,7258,7259,7,134,
		0,0,7259,7261,5,1158,0,0,7260,7262,5,6,0,0,7261,7260,1,0,0,0,7261,7262,
		1,0,0,0,7262,7263,1,0,0,0,7263,7264,3,700,350,0,7264,7266,5,1159,0,0,7265,
		7267,3,676,338,0,7266,7265,1,0,0,0,7266,7267,1,0,0,0,7267,7293,1,0,0,0,
		7268,7269,5,297,0,0,7269,7271,5,1158,0,0,7270,7272,5,50,0,0,7271,7270,
		1,0,0,0,7271,7272,1,0,0,0,7272,7273,1,0,0,0,7273,7284,3,698,349,0,7274,
		7275,5,124,0,0,7275,7276,5,20,0,0,7276,7281,3,246,123,0,7277,7278,5,1160,
		0,0,7278,7280,3,246,123,0,7279,7277,1,0,0,0,7280,7283,1,0,0,0,7281,7279,
		1,0,0,0,7281,7282,1,0,0,0,7282,7285,1,0,0,0,7283,7281,1,0,0,0,7284,7274,
		1,0,0,0,7284,7285,1,0,0,0,7285,7288,1,0,0,0,7286,7287,5,155,0,0,7287,7289,
		5,1173,0,0,7288,7286,1,0,0,0,7288,7289,1,0,0,0,7289,7290,1,0,0,0,7290,
		7291,5,1159,0,0,7291,7293,1,0,0,0,7292,7233,1,0,0,0,7292,7243,1,0,0,0,
		7292,7258,1,0,0,0,7292,7268,1,0,0,0,7293,673,1,0,0,0,7294,7295,7,135,0,
		0,7295,7296,5,1158,0,0,7296,7299,3,702,351,0,7297,7298,5,1160,0,0,7298,
		7300,3,602,301,0,7299,7297,1,0,0,0,7299,7300,1,0,0,0,7300,7303,1,0,0,0,
		7301,7302,5,1160,0,0,7302,7304,3,602,301,0,7303,7301,1,0,0,0,7303,7304,
		1,0,0,0,7304,7305,1,0,0,0,7305,7306,5,1159,0,0,7306,7307,3,676,338,0,7307,
		7333,1,0,0,0,7308,7309,7,136,0,0,7309,7310,5,1158,0,0,7310,7311,3,702,
		351,0,7311,7312,5,1159,0,0,7312,7313,3,676,338,0,7313,7333,1,0,0,0,7314,
		7315,7,137,0,0,7315,7316,5,1158,0,0,7316,7317,5,1159,0,0,7317,7333,3,676,
		338,0,7318,7319,5,304,0,0,7319,7320,5,1158,0,0,7320,7321,3,702,351,0,7321,
		7322,5,1160,0,0,7322,7323,3,602,301,0,7323,7324,5,1159,0,0,7324,7325,3,
		676,338,0,7325,7333,1,0,0,0,7326,7327,5,303,0,0,7327,7328,5,1158,0,0,7328,
		7329,3,602,301,0,7329,7330,5,1159,0,0,7330,7331,3,676,338,0,7331,7333,
		1,0,0,0,7332,7294,1,0,0,0,7332,7308,1,0,0,0,7332,7314,1,0,0,0,7332,7318,
		1,0,0,0,7332,7326,1,0,0,0,7333,675,1,0,0,0,7334,7341,5,128,0,0,7335,7337,
		5,1158,0,0,7336,7338,3,678,339,0,7337,7336,1,0,0,0,7337,7338,1,0,0,0,7338,
		7339,1,0,0,0,7339,7342,5,1159,0,0,7340,7342,3,680,340,0,7341,7335,1,0,
		0,0,7341,7340,1,0,0,0,7342,677,1,0,0,0,7343,7345,3,680,340,0,7344,7343,
		1,0,0,0,7344,7345,1,0,0,0,7345,7347,1,0,0,0,7346,7348,3,692,346,0,7347,
		7346,1,0,0,0,7347,7348,1,0,0,0,7348,7350,1,0,0,0,7349,7351,3,244,122,0,
		7350,7349,1,0,0,0,7350,7351,1,0,0,0,7351,7353,1,0,0,0,7352,7354,3,682,
		341,0,7353,7352,1,0,0,0,7353,7354,1,0,0,0,7354,679,1,0,0,0,7355,7356,3,
		596,298,0,7356,681,1,0,0,0,7357,7358,3,684,342,0,7358,7359,3,686,343,0,
		7359,683,1,0,0,0,7360,7361,7,138,0,0,7361,685,1,0,0,0,7362,7365,3,690,
		345,0,7363,7365,3,688,344,0,7364,7362,1,0,0,0,7364,7363,1,0,0,0,7365,687,
		1,0,0,0,7366,7367,5,16,0,0,7367,7368,3,690,345,0,7368,7369,5,10,0,0,7369,
		7370,3,690,345,0,7370,689,1,0,0,0,7371,7372,5,36,0,0,7372,7379,5,606,0,
		0,7373,7374,5,665,0,0,7374,7379,7,139,0,0,7375,7376,3,702,351,0,7376,7377,
		7,139,0,0,7377,7379,1,0,0,0,7378,7371,1,0,0,0,7378,7373,1,0,0,0,7378,7375,
		1,0,0,0,7379,691,1,0,0,0,7380,7381,5,129,0,0,7381,7382,5,20,0,0,7382,7387,
		3,702,351,0,7383,7384,5,1160,0,0,7384,7386,3,702,351,0,7385,7383,1,0,0,
		0,7386,7389,1,0,0,0,7387,7385,1,0,0,0,7387,7388,1,0,0,0,7388,693,1,0,0,
		0,7389,7387,1,0,0,0,7390,7414,3,732,366,0,7391,7414,5,758,0,0,7392,7414,
		5,320,0,0,7393,7414,5,316,0,0,7394,7414,5,317,0,0,7395,7414,5,318,0,0,
		7396,7414,5,321,0,0,7397,7414,5,322,0,0,7398,7414,5,323,0,0,7399,7414,
		5,77,0,0,7400,7414,5,85,0,0,7401,7414,5,319,0,0,7402,7414,5,325,0,0,7403,
		7414,5,513,0,0,7404,7414,5,326,0,0,7405,7414,5,142,0,0,7406,7414,5,328,
		0,0,7407,7414,5,329,0,0,7408,7414,5,330,0,0,7409,7414,5,331,0,0,7410,7414,
		5,332,0,0,7411,7414,5,333,0,0,7412,7414,5,334,0,0,7413,7390,1,0,0,0,7413,
		7391,1,0,0,0,7413,7392,1,0,0,0,7413,7393,1,0,0,0,7413,7394,1,0,0,0,7413,
		7395,1,0,0,0,7413,7396,1,0,0,0,7413,7397,1,0,0,0,7413,7398,1,0,0,0,7413,
		7399,1,0,0,0,7413,7400,1,0,0,0,7413,7401,1,0,0,0,7413,7402,1,0,0,0,7413,
		7403,1,0,0,0,7413,7404,1,0,0,0,7413,7405,1,0,0,0,7413,7406,1,0,0,0,7413,
		7407,1,0,0,0,7413,7408,1,0,0,0,7413,7409,1,0,0,0,7413,7410,1,0,0,0,7413,
		7411,1,0,0,0,7413,7412,1,0,0,0,7414,695,1,0,0,0,7415,7416,7,140,0,0,7416,
		7417,5,1158,0,0,7417,7418,3,700,350,0,7418,7419,5,1159,0,0,7419,697,1,
		0,0,0,7420,7425,3,614,307,0,7421,7425,3,566,283,0,7422,7425,3,662,331,
		0,7423,7425,3,702,351,0,7424,7420,1,0,0,0,7424,7421,1,0,0,0,7424,7422,
		1,0,0,0,7424,7423,1,0,0,0,7425,7435,1,0,0,0,7426,7431,5,1160,0,0,7427,
		7432,3,614,307,0,7428,7432,3,566,283,0,7429,7432,3,662,331,0,7430,7432,
		3,702,351,0,7431,7427,1,0,0,0,7431,7428,1,0,0,0,7431,7429,1,0,0,0,7431,
		7430,1,0,0,0,7432,7434,1,0,0,0,7433,7426,1,0,0,0,7434,7437,1,0,0,0,7435,
		7433,1,0,0,0,7435,7436,1,0,0,0,7436,699,1,0,0,0,7437,7435,1,0,0,0,7438,
		7443,3,614,307,0,7439,7443,3,566,283,0,7440,7443,3,662,331,0,7441,7443,
		3,702,351,0,7442,7438,1,0,0,0,7442,7439,1,0,0,0,7442,7440,1,0,0,0,7442,
		7441,1,0,0,0,7443,701,1,0,0,0,7444,7445,6,351,-1,0,7445,7446,7,141,0,0,
		7446,7456,3,702,351,4,7447,7448,3,704,352,0,7448,7450,5,88,0,0,7449,7451,
		5,114,0,0,7450,7449,1,0,0,0,7450,7451,1,0,0,0,7451,7452,1,0,0,0,7452,7453,
		7,142,0,0,7453,7456,1,0,0,0,7454,7456,3,704,352,0,7455,7444,1,0,0,0,7455,
		7447,1,0,0,0,7455,7454,1,0,0,0,7456,7463,1,0,0,0,7457,7458,10,3,0,0,7458,
		7459,3,712,356,0,7459,7460,3,702,351,4,7460,7462,1,0,0,0,7461,7457,1,0,
		0,0,7462,7465,1,0,0,0,7463,7461,1,0,0,0,7463,7464,1,0,0,0,7464,703,1,0,
		0,0,7465,7463,1,0,0,0,7466,7467,6,352,-1,0,7467,7468,3,706,353,0,7468,
		7533,1,0,0,0,7469,7470,10,8,0,0,7470,7471,3,710,355,0,7471,7472,3,704,
		352,9,7472,7532,1,0,0,0,7473,7475,10,6,0,0,7474,7476,5,114,0,0,7475,7474,
		1,0,0,0,7475,7476,1,0,0,0,7476,7477,1,0,0,0,7477,7478,5,16,0,0,7478,7479,
		3,704,352,0,7479,7480,5,10,0,0,7480,7481,3,704,352,7,7481,7532,1,0,0,0,
		7482,7483,10,5,0,0,7483,7484,5,627,0,0,7484,7485,5,98,0,0,7485,7532,3,
		704,352,6,7486,7488,10,3,0,0,7487,7489,5,114,0,0,7488,7487,1,0,0,0,7488,
		7489,1,0,0,0,7489,7490,1,0,0,0,7490,7491,7,143,0,0,7491,7532,3,704,352,
		4,7492,7494,10,10,0,0,7493,7495,5,114,0,0,7494,7493,1,0,0,0,7494,7495,
		1,0,0,0,7495,7496,1,0,0,0,7496,7497,5,80,0,0,7497,7500,5,1158,0,0,7498,
		7501,3,214,107,0,7499,7501,3,636,318,0,7500,7498,1,0,0,0,7500,7499,1,0,
		0,0,7501,7502,1,0,0,0,7502,7503,5,1159,0,0,7503,7532,1,0,0,0,7504,7505,
		10,9,0,0,7505,7506,5,88,0,0,7506,7532,3,612,306,0,7507,7508,10,7,0,0,7508,
		7509,3,710,355,0,7509,7510,7,144,0,0,7510,7511,5,1158,0,0,7511,7512,3,
		214,107,0,7512,7513,5,1159,0,0,7513,7532,1,0,0,0,7514,7516,10,4,0,0,7515,
		7517,5,114,0,0,7516,7515,1,0,0,0,7516,7517,1,0,0,0,7517,7518,1,0,0,0,7518,
		7519,5,98,0,0,7519,7522,3,704,352,0,7520,7521,5,417,0,0,7521,7523,5,1173,
		0,0,7522,7520,1,0,0,0,7522,7523,1,0,0,0,7523,7532,1,0,0,0,7524,7525,10,
		2,0,0,7525,7526,5,510,0,0,7526,7527,5,538,0,0,7527,7528,5,1158,0,0,7528,
		7529,3,704,352,0,7529,7530,5,1159,0,0,7530,7532,1,0,0,0,7531,7469,1,0,
		0,0,7531,7473,1,0,0,0,7531,7482,1,0,0,0,7531,7486,1,0,0,0,7531,7492,1,
		0,0,0,7531,7504,1,0,0,0,7531,7507,1,0,0,0,7531,7514,1,0,0,0,7531,7524,
		1,0,0,0,7532,7535,1,0,0,0,7533,7531,1,0,0,0,7533,7534,1,0,0,0,7534,705,
		1,0,0,0,7535,7533,1,0,0,0,7536,7537,6,353,-1,0,7537,7585,3,614,307,0,7538,
		7585,3,566,283,0,7539,7585,3,662,331,0,7540,7585,3,576,288,0,7541,7542,
		3,708,354,0,7542,7543,3,706,353,11,7543,7585,1,0,0,0,7544,7545,5,229,0,
		0,7545,7585,3,706,353,10,7546,7547,5,1184,0,0,7547,7548,5,1133,0,0,7548,
		7585,3,706,353,9,7549,7550,5,1158,0,0,7550,7555,3,702,351,0,7551,7552,
		5,1160,0,0,7552,7554,3,702,351,0,7553,7551,1,0,0,0,7554,7557,1,0,0,0,7555,
		7553,1,0,0,0,7555,7556,1,0,0,0,7556,7558,1,0,0,0,7557,7555,1,0,0,0,7558,
		7559,5,1159,0,0,7559,7585,1,0,0,0,7560,7561,5,606,0,0,7561,7562,5,1158,
		0,0,7562,7565,3,702,351,0,7563,7564,5,1160,0,0,7564,7566,3,702,351,0,7565,
		7563,1,0,0,0,7566,7567,1,0,0,0,7567,7565,1,0,0,0,7567,7568,1,0,0,0,7568,
		7569,1,0,0,0,7569,7570,5,1159,0,0,7570,7585,1,0,0,0,7571,7572,5,60,0,0,
		7572,7573,5,1158,0,0,7573,7574,3,214,107,0,7574,7575,5,1159,0,0,7575,7585,
		1,0,0,0,7576,7577,5,1158,0,0,7577,7578,3,214,107,0,7578,7579,5,1159,0,
		0,7579,7585,1,0,0,0,7580,7581,5,86,0,0,7581,7582,3,702,351,0,7582,7583,
		3,78,39,0,7583,7585,1,0,0,0,7584,7536,1,0,0,0,7584,7538,1,0,0,0,7584,7539,
		1,0,0,0,7584,7540,1,0,0,0,7584,7541,1,0,0,0,7584,7544,1,0,0,0,7584,7546,
		1,0,0,0,7584,7549,1,0,0,0,7584,7560,1,0,0,0,7584,7571,1,0,0,0,7584,7576,
		1,0,0,0,7584,7580,1,0,0,0,7585,7603,1,0,0,0,7586,7587,10,3,0,0,7587,7588,
		3,714,357,0,7588,7589,3,706,353,4,7589,7602,1,0,0,0,7590,7591,10,2,0,0,
		7591,7592,3,716,358,0,7592,7593,3,706,353,3,7593,7602,1,0,0,0,7594,7595,
		10,1,0,0,7595,7596,3,718,359,0,7596,7597,3,706,353,2,7597,7602,1,0,0,0,
		7598,7599,10,13,0,0,7599,7600,5,28,0,0,7600,7602,3,580,290,0,7601,7586,
		1,0,0,0,7601,7590,1,0,0,0,7601,7594,1,0,0,0,7601,7598,1,0,0,0,7602,7605,
		1,0,0,0,7603,7601,1,0,0,0,7603,7604,1,0,0,0,7604,707,1,0,0,0,7605,7603,
		1,0,0,0,7606,7607,7,145,0,0,7607,709,1,0,0,0,7608,7623,5,1149,0,0,7609,
		7623,5,1150,0,0,7610,7623,5,1151,0,0,7611,7612,5,1151,0,0,7612,7623,5,
		1149,0,0,7613,7614,5,1150,0,0,7614,7623,5,1149,0,0,7615,7616,5,1151,0,
		0,7616,7623,5,1150,0,0,7617,7618,5,1152,0,0,7618,7623,5,1149,0,0,7619,
		7620,5,1151,0,0,7620,7621,5,1149,0,0,7621,7623,5,1150,0,0,7622,7608,1,
		0,0,0,7622,7609,1,0,0,0,7622,7610,1,0,0,0,7622,7611,1,0,0,0,7622,7613,
		1,0,0,0,7622,7615,1,0,0,0,7622,7617,1,0,0,0,7622,7619,1,0,0,0,7623,711,
		1,0,0,0,7624,7632,5,10,0,0,7625,7626,5,1155,0,0,7626,7632,5,1155,0,0,7627,
		7632,5,197,0,0,7628,7632,5,123,0,0,7629,7630,5,1154,0,0,7630,7632,5,1154,
		0,0,7631,7624,1,0,0,0,7631,7625,1,0,0,0,7631,7627,1,0,0,0,7631,7628,1,
		0,0,0,7631,7629,1,0,0,0,7632,713,1,0,0,0,7633,7634,5,1151,0,0,7634,7641,
		5,1151,0,0,7635,7636,5,1150,0,0,7636,7641,5,1150,0,0,7637,7641,5,1155,
		0,0,7638,7641,5,1156,0,0,7639,7641,5,1154,0,0,7640,7633,1,0,0,0,7640,7635,
		1,0,0,0,7640,7637,1,0,0,0,7640,7638,1,0,0,0,7640,7639,1,0,0,0,7641,715,
		1,0,0,0,7642,7643,7,146,0,0,7643,717,1,0,0,0,7644,7645,5,1146,0,0,7645,
		7650,5,1150,0,0,7646,7647,5,1146,0,0,7647,7648,5,1150,0,0,7648,7650,5,
		1150,0,0,7649,7644,1,0,0,0,7649,7646,1,0,0,0,7650,719,1,0,0,0,7651,7652,
		7,147,0,0,7652,721,1,0,0,0,7653,7654,7,148,0,0,7654,723,1,0,0,0,7655,7656,
		7,149,0,0,7656,725,1,0,0,0,7657,7658,7,150,0,0,7658,727,1,0,0,0,7659,7660,
		7,151,0,0,7660,729,1,0,0,0,7661,7662,7,152,0,0,7662,731,1,0,0,0,7663,7664,
		7,153,0,0,7664,733,1,0,0,0,1130,735,739,746,749,752,754,760,763,766,769,
		778,791,839,852,863,880,885,900,928,937,942,948,953,957,966,969,972,976,
		983,986,989,993,997,1003,1008,1013,1018,1021,1023,1035,1038,1042,1045,
		1049,1052,1056,1059,1062,1066,1069,1073,1079,1082,1088,1094,1101,1108,
		1111,1114,1118,1123,1129,1138,1143,1148,1155,1172,1179,1182,1186,1196,
		1200,1203,1207,1211,1215,1220,1223,1226,1229,1232,1238,1241,1245,1251,
		1256,1259,1262,1264,1275,1279,1282,1296,1299,1303,1306,1310,1313,1317,
		1320,1324,1327,1330,1334,1337,1341,1347,1350,1363,1369,1380,1385,1393,
		1401,1406,1409,1414,1422,1427,1433,1438,1442,1444,1448,1451,1455,1460,
		1462,1467,1472,1480,1488,1493,1501,1504,1507,1511,1515,1518,1522,1526,
		1530,1536,1539,1546,1551,1558,1565,1571,1579,1582,1589,1592,1594,1600,
		1606,1623,1630,1637,1649,1654,1663,1665,1668,1681,1694,1699,1715,1723,
		1733,1739,1751,1754,1759,1772,1779,1786,1788,1795,1799,1801,1806,1809,
		1815,1820,1822,1826,1829,1832,1838,1843,1845,1850,1857,1859,1866,1871,
		1875,1878,1886,1894,1896,1904,1908,1911,1917,1922,1925,1931,1934,1938,
		1941,1945,1950,1955,1960,1964,1968,1972,1976,1980,1984,1989,1994,1999,
		2005,2010,2015,2020,2026,2031,2036,2042,2047,2052,2057,2062,2067,2072,
		2077,2084,2089,2094,2099,2103,2108,2116,2121,2130,2142,2149,2151,2159,
		2164,2167,2175,2181,2197,2209,2215,2221,2223,2226,2229,2231,2239,2249,
		2257,2263,2269,2282,2289,2298,2303,2314,2323,2328,2340,2347,2356,2361,
		2373,2380,2389,2394,2401,2410,2415,2417,2422,2430,2439,2443,2446,2450,
		2455,2461,2467,2472,2477,2482,2487,2490,2495,2500,2510,2514,2521,2526,
		2529,2534,2537,2541,2545,2553,2572,2575,2578,2582,2592,2605,2612,2615,
		2619,2623,2630,2633,2636,2647,2650,2654,2662,2665,2670,2678,2684,2688,
		2693,2699,2703,2708,2713,2716,2723,2727,2730,2741,2749,2752,2755,2761,
		2767,2769,2774,2777,2783,2789,2791,2795,2798,2801,2804,2810,2816,2819,
		2825,2831,2833,2838,2841,2849,2851,2860,2865,2873,2877,2880,2888,2898,
		2903,2906,2913,2917,2920,2924,2929,2938,2956,2960,2968,2972,2984,2987,
		2996,3007,3010,3018,3024,3029,3037,3045,3052,3059,3066,3081,3094,3100,
		3106,3112,3118,3124,3130,3135,3142,3149,3152,3159,3164,3167,3169,3173,
		3186,3193,3200,3206,3210,3214,3217,3224,3227,3232,3239,3246,3250,3255,
		3262,3275,3278,3283,3288,3292,3298,3302,3306,3309,3316,3322,3329,3334,
		3341,3345,3352,3355,3359,3368,3372,3375,3378,3384,3387,3393,3402,3405,
		3416,3419,3424,3427,3432,3442,3447,3453,3455,3461,3463,3469,3477,3482,
		3490,3493,3498,3501,3506,3514,3522,3528,3536,3541,3549,3552,3556,3559,
		3567,3573,3582,3585,3589,3593,3599,3603,3607,3609,3612,3615,3618,3624,
		3628,3631,3634,3637,3640,3647,3649,3653,3658,3664,3669,3676,3682,3687,
		3690,3696,3700,3708,3711,3715,3718,3721,3730,3734,3737,3741,3745,3748,
		3751,3756,3762,3766,3776,3782,3786,3792,3796,3802,3805,3817,3821,3825,
		3833,3837,3845,3848,3852,3855,3863,3868,3871,3874,3878,3881,3890,3895,
		3904,3909,3916,3923,3931,3937,3945,3948,3951,3958,3961,3968,3971,3979,
		3985,3996,3999,4003,4013,4019,4023,4027,4037,4042,4044,4048,4058,4068,
		4074,4079,4082,4085,4088,4091,4094,4097,4103,4108,4111,4114,4117,4120,
		4123,4126,4128,4134,4139,4142,4145,4148,4151,4154,4158,4164,4168,4176,
		4180,4183,4185,4198,4201,4208,4218,4221,4226,4228,4232,4240,4246,4255,
		4268,4272,4278,4287,4290,4294,4297,4301,4305,4308,4310,4318,4330,4336,
		4338,4344,4346,4348,4354,4362,4370,4374,4378,4387,4392,4412,4417,4423,
		4430,4435,4444,4447,4451,4455,4459,4462,4465,4468,4472,4476,4479,4482,
		4485,4492,4496,4511,4515,4527,4535,4545,4549,4552,4558,4561,4564,4573,
		4582,4592,4596,4606,4616,4624,4627,4636,4639,4643,4648,4652,4661,4664,
		4695,4698,4701,4757,4762,4790,4804,4811,4815,4821,4829,4831,4842,4852,
		4859,4865,4873,4878,4886,4894,4902,4910,4916,4919,4923,4928,4933,4939,
		4941,4952,4957,4964,4966,4980,4986,4991,4996,5002,5009,5017,5025,5030,
		5036,5039,5047,5054,5063,5066,5083,5091,5099,5103,5110,5116,5124,5133,
		5139,5146,5153,5158,5161,5163,5169,5171,5175,5177,5184,5186,5195,5201,
		5208,5215,5220,5223,5225,5231,5233,5237,5239,5246,5248,5253,5260,5269,
		5274,5283,5290,5295,5298,5300,5306,5308,5311,5319,5324,5329,5333,5339,
		5344,5348,5354,5356,5367,5370,5377,5380,5392,5398,5407,5416,5421,5430,
		5436,5447,5456,5462,5467,5471,5474,5486,5493,5498,5516,5526,5530,5535,
		5541,5551,5561,5571,5577,5586,5592,5599,5601,5611,5615,5619,5629,5633,
		5637,5655,5711,5736,5754,5762,5774,5781,5783,5793,5796,5804,5811,5815,
		5820,5824,5829,5832,5835,5844,5848,5851,5855,5878,5885,5889,5896,5903,
		5906,5922,5925,5935,5939,5942,5947,5952,5956,5959,5964,5969,5973,5980,
		5983,5989,6000,6020,6032,6035,6045,6053,6057,6064,6067,6076,6079,6084,
		6087,6092,6098,6105,6112,6116,6118,6122,6132,6135,6138,6150,6153,6159,
		6162,6171,6173,6177,6194,6200,6204,6218,6230,6237,6240,6247,6254,6259,
		6263,6276,6287,6293,6298,6311,6313,6318,6322,6325,6327,6334,6341,6344,
		6347,6353,6357,6363,6369,6386,6391,6399,6402,6407,6412,6420,6423,6431,
		6435,6448,6454,6466,6469,6478,6483,6489,6495,6500,6502,6507,6509,6513,
		6519,6522,6525,6531,6540,6548,6552,6557,6579,6586,6588,6595,6597,6601,
		6606,6617,6622,6628,6631,6635,6640,6643,6647,6651,6653,6658,6663,6676,
		6679,6683,6686,6689,6694,6699,6704,6707,6712,6715,6721,6724,6728,6733,
		6738,6743,6748,6751,6756,6761,6766,6772,6777,6782,6787,6790,6795,6799,
		6804,6812,6821,6825,6830,6835,6839,6841,6844,6860,6869,6877,6886,6896,
		6904,6912,6920,6928,6940,6947,6966,6971,6974,6979,6982,6986,7001,7006,
		7014,7021,7026,7031,7064,7068,7076,7080,7089,7097,7102,7110,7115,7120,
		7122,7131,7136,7144,7149,7157,7165,7168,7178,7196,7199,7202,7206,7219,
		7227,7231,7236,7241,7247,7252,7256,7261,7266,7271,7281,7284,7288,7292,
		7299,7303,7332,7337,7341,7344,7347,7350,7353,7364,7378,7387,7413,7424,
		7431,7435,7442,7450,7455,7463,7475,7488,7494,7500,7516,7522,7531,7533,
		7555,7567,7584,7601,7603,7622,7631,7640,7649
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Antlr4.Query.mariadb
